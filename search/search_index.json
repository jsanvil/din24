{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Desarrollo de Interfaces 2024/25","text":""},{"location":"#objetivos-expresados-como-resultados-de-aprendizaje","title":"Objetivos expresados c\u00f3mo Resultados de Aprendizaje","text":"<ul> <li>RA1. Genera interfaces gr\u00e1ficos de usuario mediante editores visuales utilizando las funcionalidades del editor y adaptando el c\u00f3digo generado.</li> <li>RA2. Genera interfaces naturales de usuario utilizando herramientas visuales.</li> <li>RA3. Crea componentes visuales valorando y empleando herramientas espec\u00edficas.</li> <li>RA4. Dise\u00f1a interfaces gr\u00e1ficas identificando y aplicando criterios de usabilidad y accesibilidad.</li> <li>RA5. Crea informes evaluando y utilizando herramientas gr\u00e1ficas.</li> <li>RA6. Documenta aplicaciones seleccionando y utilizando herramientas espec\u00edficas.</li> <li>RA7. Prepara aplicaciones para su distribuci\u00f3n evaluando y utilizando herramientas espec\u00edficas.</li> </ul>"},{"location":"entorno/","title":"\ud83d\udd27 Entorno de trabajo","text":"<p>Gu\u00eda r\u00e1pida para instalar las herramientas necesarias para trabajar con ElectronJS.</p>"},{"location":"entorno/#visual-studio-code","title":"Visual Studio Code","text":"<p>Para la instalaci\u00f3n de VSCode, descargar el paquete de instalaci\u00f3n que corresponda al sistema operativo de la p\u00e1gina de Visual Studio Code y realizar la instalaci\u00f3n t\u00edpica.</p>"},{"location":"entorno/#version-portable","title":"Versi\u00f3n portable","text":"<p>En la p\u00e1gina oficial de descargas disponemos de empaquetados <code>.zip</code> para MS Windows y <code>.tar.gz</code> para Linux.</p> <p>S\u00f3lo hay que descargar el archivo, descomprimir y ejecutar el archivo <code>code</code>.</p>"},{"location":"entorno/#nodejs-npm-y-nvm","title":"Node.js npm y nvm","text":"<p>npm es el gestor de paquetes de Node.js. Para instalarlo se debe seguir la gu\u00eda en la p\u00e1gina de nodejs.org.</p>"},{"location":"entorno/#instalacion-en-el-perfil-local-de-usuario-para-sistemas-linux","title":"Instalaci\u00f3n en el perfil local de usuario para sistemas Linux","text":"<p>Alternativamente, npm se puede instalar en el perfil local del usuario, para ello utilizaremos nvm que es un gestor de versiones de node que nos permitir\u00e1 utilizar la versi\u00f3n que escojamos nvm-sh</p> <p>Para instalar nvm necesitamos ejecutar el siguiente comando, aunque es recomendable consultar la documentaci\u00f3n de nvm para comprobar que no haya cambiado:</p> Terminal<pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n</code></pre> <p>Cuando termine la instalaci\u00f3n de nvm, tendremos que abrir un nuevo terminal para que reconozca la ruta del ejecutable y proceder a instalar la \u00faltima versi\u00f3n LTS de Node.js de la siguiente forma:</p> Terminal<pre><code>nvm install --lts\n</code></pre>"},{"location":"entorno/#git-github-y-github-classroom","title":"Git, GitHub y GitHub Classroom","text":"<ul> <li>Git es un sistema de control de versiones usado com\u00fanmente para c\u00f3digo fuente.+</li> <li>GitHub es una plataforma de desarrollo colaborativo que utiliza Git y que nos permitir\u00e1 subir nuestro c\u00f3digo a la nube.</li> <li>GitHub Classroom es una herramienta que nos permitir\u00e1 recibir las tareas y ejercicios de la asignatura.</li> </ul> <p>Por lo tanto ser\u00e1 necesario:</p> <ul> <li> <p>Crear una cuenta de GitHub utilizando la cuenta de correo corporativa de la GVA (usuario@alu.edu.gva).</p> <ul> <li>Utiliza el mismo nombre de usuario para la cuenta GitHub.</li> </ul> <p>Ejemplo: Para la cuenta corporativa es <code>jacsanvil@alu.edu.gva</code> el usuario de GitHub debe ser <code>jacsanvil</code></p> </li> <li> <p>Instalar Git</p> <p>Si no est\u00e1s familiarizado en c\u00f3mo funciona git, se recomienda leer la Gu\u00eda de Git. </p> </li> <li> <p>Se puede utilizar <code>git</code> mediante la terminal o la interfaz gr\u00e1fica de GitHub Desktop.</p> </li> <li> <p>Para tareas sencillas, se recomienda el gestor integrado de Visual Studio Code.    </p> </li> </ul>"},{"location":"entorno/#electron-reloader","title":"Electron reloader","text":"<p>Para que los cambios en el c\u00f3digo se reflejen en la aplicaci\u00f3n, se puede utilizar el paquete electron-reloader que se instala como dependencia de desarrollo.</p> Terminal<pre><code>npm install --save-dev electron-reloader\n</code></pre> <p>Despu\u00e9s, en el archivo <code>main.js</code> se a\u00f1ade el siguiente c\u00f3digo:</p> main.js<pre><code>const { app, BrowserWindow } = require('electron')\n\ntry {\n    require('electron-reloader')(module, {\n        debug: true,\n        watchRenderer: true\n    })\n} catch(_) {}\n\n// ...\n</code></pre> <p>Ahora, cuando lancemos la aplicaci\u00f3n con <code>npm start</code> se recargar\u00e1 autom\u00e1ticamente cuando se guarden los cambios en el c\u00f3digo.</p>"},{"location":"00intro/01_electron_intro/","title":"0.1 Introducci\u00f3n a Electron","text":"<ul> <li>Requisitos<ul> <li>Conocimientos previos</li> <li>Herramientas necesarias<ul> <li>Editor de c\u00f3digo</li> <li>L\u00ednea de comandos</li> <li>Git y GitHub</li> </ul> </li> <li>Node.js y npm</li> </ul> </li> <li>Electron reloader</li> </ul>"},{"location":"00intro/01_electron_intro/#requisitos","title":"Requisitos","text":"<p>Electron es un framework para crear aplicaciones de escritorio usando JavaScript, HTML y CSS. Incorpora Chromium y Node.js en un \u00fanico archivo binario. Permite crear aplicaciones multiplataforma que funcionan en Windows, macOS y Linux con una \u00fanica base com\u00fan de c\u00f3digo JavaScript.</p>"},{"location":"00intro/01_electron_intro/#conocimientos-previos","title":"Conocimientos previos","text":"<p>Electron es una capa de envoltorio nativa para aplicaciones web y se ejecuta en un entorno Node.js. Se asume que el alumnado ha adquirido los conocimientos b\u00e1sicos de desarrollo web vistos en el m\u00f3dulo de primer curso de DAM \"Lenguajes de marcas y sistemas de gesti\u00f3n de informaci\u00f3n\" (LMSGI). Como apoyo se recomendan los siguientes recursos:</p> <ul> <li>Aprende desarrollo web (MDN Web Docs)</li> <li>Introducci\u00f3n a Node.js</li> </ul>"},{"location":"00intro/01_electron_intro/#herramientas-necesarias","title":"Herramientas necesarias","text":""},{"location":"00intro/01_electron_intro/#editor-de-codigo","title":"Editor de c\u00f3digo","text":"<p>Es necesario un editor de texto para escribir el c\u00f3digo, lo m\u00e1s recomendado es el uso de un IDE (Entorno de Desarrollo Integrado). Se recomienda el uso de Visual Studio Code, al ser uno de los m\u00e1s utilizados en el mundo del desarrollo, con ls integraci\u00f3n de m\u00faltiples herramientas que permiten agilizar el trabajo, como el control de versiones git, el terminal integrado de l\u00ednea de comandos o el depurador, entre muchas otras.</p>"},{"location":"00intro/01_electron_intro/#linea-de-comandos","title":"L\u00ednea de comandos","text":"<p>A lo largo del curso se requerir\u00e1 el uso de varias interfaces de l\u00ednea de comandos (CLIs). Se pueden teclear estos comandos v\u00eda terminal:</p> <ul> <li>Windows: Command Prompt, PowerShell, Terminal</li> <li>macOS: Terminal</li> <li>Linux: var\u00eda dependiendo de la distribuci\u00f3n (ej: Terminal GNOME, Konsole)</li> </ul> <p>La mayor\u00eda de los editores de c\u00f3digo tambi\u00e9n vienen con una terminal integrada.</p>"},{"location":"00intro/01_electron_intro/#git-y-github","title":"Git y GitHub","text":"<p>Git es un sistema de control de versiones usado com\u00fanmente para c\u00f3digo fuente, y GitHub es una plataforma de desarrollo colaborativa construida adem\u00e1s de ella. Aunque ninguno de los dos es estrictamente necesario para construir una aplicaci\u00f3n Electron usaremos GitHub para realizar las entregas. Por lo tanto ser\u00e1 necesario:</p> <ul> <li> <p>Crear una cuenta de GitHub utilizando la cuenta de correo corporativa de la GVA (usuario@alu.edu.gva).</p> <ul> <li>Utiliza el mismo nombre de usuario para la cuenta GitHub.</li> </ul> <p>Ejemplo: Para la cuenta corporativa es <code>jacsanvil@alu.edu.gva</code> el usuario de GitHub debe ser <code>jacsanvil</code></p> </li> <li> <p>Instalar Git</p> <p>Si no est\u00e1s familiarizado en como funciona git, se recomienda leer la Gu\u00eda de Git. </p> </li> <li> <p>Se puede utilizar <code>git</code> mediante la terminal o la interfaz gr\u00e1fica de GitHub Desktop.</p> </li> <li>Para tareas sencillas, se recomienda el gestor integrado de Visual Studio Code.</li> </ul>"},{"location":"00intro/01_electron_intro/#nodejs-y-npm","title":"Node.js y npm","text":"<p>Para comenzar a desarrollar una aplicaci\u00f3n Electron es necesario instalar Node.js y el gestor de paquetes npm. Es recomendable utilizar la \u00faltima versi\u00f3n con soporte a largo plazo (LTS).</p> <p>Para comprobar que Node.js se ha instalado correctamente, se puede usar la opci\u00f3n <code>-v</code> cuando en los comandos <code>node</code> y <code>npm</code>. Estos deben imprimir las versiones instaladas.</p> Terminal<pre><code>$ node -v\nv20.17.0\n$ npm -v\n10.8.2\n</code></pre> <p>NOTA</p> <p>Aunque es necesario tener Node.js instalado localmente para desarrollar un proyecto en Electron, el ejecutable final, viene empaquetado con su propio Node.js. Esto significa que los usuarios finales no necesitan instalar Node.js como requisito para ejecutar la aplicaci\u00f3n.</p>"},{"location":"00intro/01_electron_intro/#electron-reloader","title":"Electron reloader","text":"<p>Para que los cambios en el c\u00f3digo se reflejen en la aplicaci\u00f3n, se puede utilizar el paquete electron-reloader que se instala como dependencia de desarrollo.</p> Terminal<pre><code>$ npm install --save-dev electron-reloader\n</code></pre> <p>Despu\u00e9s, en el archivo <code>main.js</code> se a\u00f1ade el siguiente c\u00f3digo:</p> main.js<pre><code>const { app, BrowserWindow } = require('electron')\n\ntry {\n    require('electron-reloader')(module, {\n        debug: true,\n        watchRenderer: true\n    })\n} catch(_) {}\n\n// ...\n</code></pre> <p>Ahora, cuando lancemos la aplicaci\u00f3n con <code>npm start</code> se recargar\u00e1 autom\u00e1ticamente cuando se guarden los cambios en el c\u00f3digo.</p>"},{"location":"00intro/021_actividad/","title":"0.2.1 Actividad","text":"<p>Para realizar la actividad se debe seguir los siguientes pasos:</p> <ol> <li> <p>Acepta la invitaci\u00f3n a la actividad en GitHub Classroom: https://classroom.github.com/a/juoyhKUl</p> <ul> <li>Selecciona tu correo corporativo del listado.</li> <li>Acepta la actividad.</li> </ul> <p>Warning</p> <p>Debes utilizar tu cuenta corporativa de la GVA</p> <p>Con esto lo que se consigue es crear un repositorio remoto donde se subir\u00e1 el c\u00f3digo de la actividad.</p> <ul> <li>Copia la URL del repositorio creado.</li> </ul> <p>Ejemplo de URL del repositorio</p> <p><code>https://github.com/DAM-DIN-24/ud00-act01-electron-intro-jsanvil</code></p> </li> <li> <p>Clona el repositorio en tu m\u00e1quina local</p> <p>Puedes utilizar VS Code para clonar el repositorio o la terminal con el comando <code>git clone &lt;url-repositorio&gt;</code></p> </li> <li> <p>Sigue los pasos del punto 0.2 Creando la primera aplicaci\u00f3n en Electron para configurar el entorno de desarrollo y crear un proyecto Electron.</p> <p>.gitignore</p> <p>No olvides a\u00f1adir el archivo <code>.gitignore</code> en la ra\u00edz del proyecto para que no se suban los archivos innecesarios al repositorio.</p> <p>Ejemplo de archivo <code>.gitignore</code></p> </li> <li> <p>Realiza los cambios necesarios en el c\u00f3digo para que la aplicaci\u00f3n muestre un mensaje de bienvenida personalizado.</p> </li> <li> <p>Realiza un commit con los cambios realizados y sube el c\u00f3digo al repositorio remoto.</p> Terminal<pre><code>git add .\ngit commit -m \"Actividad finalizada\"\ngit push\n</code></pre> <p>Warning</p> <p>Es posible que solicite configuraci\u00f3n extra antes de hacer el primer commit</p> Terminal<pre><code>git config --global user.name \"Nombre Apellido\"\ngit config --global user.email \"user@alu.edu.gva.es\"\n</code></pre> </li> <li> <p>Comprueba que los cambios se han subido correctamente al repositorio remoto.</p> </li> </ol>"},{"location":"00intro/02_electron_firstapp/","title":"0.2 Creando la primera aplicaci\u00f3n en Electron","text":"<ul> <li>Objetivos</li> <li>Configurando tu Proyecto</li> <li>Iniciando el proyecto con <code>npm</code></li> <li>Agregando <code>.gitignore</code></li> <li>Ejecutar una aplicaci\u00f3n Electron</li> <li>Cargar una html en un <code>BrowserWindow</code><ul> <li>Importando m\u00f3dulos</li> <li>Escribir una funci\u00f3n reutilizable para instanciar ventanas</li> <li>Llamar a su funci\u00f3n cuando la aplicaci\u00f3n est\u00e9 lista</li> </ul> </li> <li>Administrar el ciclo de vida de la ventana de la aplicaci\u00f3n<ul> <li>Salir de la aplicaci\u00f3n cuando todas las ventanas est\u00e9n cerradas (Windows y Linux)</li> </ul> </li> <li>Abra una ventana si no hay ninguna abierta (macOS)</li> <li>C\u00f3digo final</li> <li>Depurando en VS Code</li> <li>Resumen</li> </ul>"},{"location":"00intro/02_electron_firstapp/#objetivos","title":"Objetivos","text":"<p>En esta parte se ense\u00f1ar\u00e1 a configurar un proyecto Electron y escribir una aplicaci\u00f3n inicial sencilla. Al final de esta secci\u00f3n, se podr\u00e1 ejecutar una aplicaci\u00f3n Electron en modo de desarrollo desde el terminal.</p>"},{"location":"00intro/02_electron_firstapp/#configurando-tu-proyecto","title":"Configurando tu Proyecto","text":"<p>EVITA WSL</p> <p>Si se utiliza un sistema Windows, no se debe utilizar el Subsistema de Windows para Linux (WSL), ya que surgir\u00e1n problemas al intentar ejecutar la aplicaci\u00f3n.</p>"},{"location":"00intro/02_electron_firstapp/#iniciando-el-proyecto-con-npm","title":"Iniciando el proyecto con <code>npm</code>","text":"<p>Las aplicaciones Electron se organizan usando npm, con el archivo <code>package.json</code> como punto de entrada. Comienza creando una carpeta e inicializando un paquete npm dentro de ella con el comando <code>npm init</code>.</p> Terminal<pre><code>mkdir my-electron-app\ncd my-electron-app\nnpm init\n</code></pre> <p>Este comando pedir\u00e1 que configures algunos atributos del <code>package.json</code>. Hay algunas reglas que seguir en esta gu\u00eda:</p> <ul> <li>El punto de entrada de la aplicaci\u00f3n debe ser el archivo <code>main.js</code>.</li> <li>\"author\", \"license\" y \"description\" pueden tener cualquier valor, pero ser\u00e1n necesarios para el empaquetado m\u00e1s adelante.</li> <li>Se puede aceptar la configuraci\u00f3n por defecto, normalmente indicada entre par\u00e9ntesis, pulsando la tecla <code>intro</code>.</li> </ul> Ejemplo del proceso de configuraci\u00f3n de `package.json` con `npm init`<pre><code>This utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help init` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install &lt;pkg&gt;` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (my-electron-app) \nversion: (1.0.0) \ndescription: \nentry point: (index.js) main.js\ntest command: \ngit repository: \nkeywords: \nauthor: \nlicense: (ISC) \nAbout to write to /home/user/my-electron-app/package.json:\n\n{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n\nIs this OK? (yes) \n</code></pre> <p>Ahora, instala Electron en las <code>devDependencies</code> de la aplicaci\u00f3n, que es la lista de dependencias de paquetes externos de desarrollo exclusivo que no se requieren en producci\u00f3n.</p> Terminal<pre><code>npm install electron --save-dev\n</code></pre> <p>\u00bfPor qu\u00e9 Electron es una dependencia?</p> <p>Esto puede parecer poco intuitivo ya que el c\u00f3digo de producci\u00f3n ejecuta API de Electron. Sin embargo, las aplicaciones finales incluir\u00e1n el binario de Electron, eliminando la necesidad de especificarlo como una dependencia de la aplicaci\u00f3n binaria final a distribuir en producci\u00f3n.</p> <p>El archivo <code>package.json</code> deber\u00eda verse as\u00ed despu\u00e9s de inicializar su paquete e instalar Electron. </p> package.json<pre><code>{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"description\": \"\",\n  \"devDependencies\": {\n    \"electron\": \"^32.0.2\"\n  }\n}\n</code></pre> <p>Tambi\u00e9n debe aparecer la carpeta <code>node_modules/</code> que contiene el ejecutable de Electron, as\u00ed como un archivo de bloqueo <code>package-lock.json</code> que especifica las versiones de dependencia exactas que se instalar\u00e1n.</p> <p>Instrucciones de instalaci\u00f3n avanzadas</p> <p>Si la instalaci\u00f3n de Electron falla, se puede consultar la documentaci\u00f3n de Instalaci\u00f3n avanzada para obtener instrucciones sobre c\u00f3mo descargar mirrors, servidores proxy y soluci\u00f3n de problemas.</p>"},{"location":"00intro/02_electron_firstapp/#agregando-gitignore","title":"Agregando <code>.gitignore</code>","text":"<p>El archivo <code>.gitignore</code> especifica qu\u00e9 archivos y directorios evitar en el seguimiento con Gi*t. Se debe colocar una copia de la plantilla GitHub's Node.js gitignore template en la carpeta ra\u00edz de tu proyecto para evitar el seguimiento la carpeta <code>node_modules/</code> del proyecto.</p>"},{"location":"00intro/02_electron_firstapp/#ejecutar-una-aplicacion-electron","title":"Ejecutar una aplicaci\u00f3n Electron","text":"<p>El script <code>main</code> que definiste en <code>package.json</code> es el punto de inicio de cualquier aplicaci\u00f3n. Este script controla el proceso principal, que se ejecuta en un entorno Node.js y es responsable de controlar el ciclo de vida de su aplicaci\u00f3n, mostrar interfaces nativas, realizar operaciones con privilegios y administrar los procesos de renderizado.</p> <p>Antes de crear la primera aplicaci\u00f3n, primero utilizar\u00e1 un script para asegurar de que el punto de entrada del proceso principal est\u00e1 configurado correctamente. Crea un archivo <code>main.js</code> en la carpeta ra\u00edz del proyecto con una sola l\u00ednea de c\u00f3digo:</p> main.js<pre><code>console.log('Hola desde Electron \ud83d\udc4b')\n</code></pre> <p>Debido a que el proceso principal es un int\u00e9rprete de Node.js, se puede ejecutar c\u00f3digo con el comando <code>electron</code>. Para ejecutar este script, agrega <code>\"electron .\"</code> al comando de inicio (<code>\"start\"</code>) en el atributo <code>\"scripts\"</code> del archivo <code>paquete.json</code>. Este comando le indicar\u00e1 al ejecutable que busque el script principal en el directorio actual y lo ejecute en modo de desarrollo.</p> package.json<pre><code>{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"description\": \"\",\n  \"devDependencies\": {\n    \"electron\": \"^32.0.2\"\n  }\n}\n</code></pre> Terminal<pre><code>npm run start\n</code></pre> <p>El terminal deber\u00eda mostrar \"Hola desde Electron \ud83d\udc4b.\" \u00a1Enhorabuena, has ejecutado tu primera l\u00ednea de c\u00f3digo en Electron! A continuaci\u00f3n, veremos como crear interfaces de usuario en HTML y cargarlas en una ventana nativa.</p>"},{"location":"00intro/02_electron_firstapp/#cargar-una-html-en-un-browserwindow","title":"Cargar una html en un <code>BrowserWindow</code>","text":"<p>Cada ventana muestra una p\u00e1gina web que se puede cargar desde un archivo HTML local o desde una direcci\u00f3n web remota. Para este ejemplo, se cargar\u00e1 desde un archivo local. Comienza creando una p\u00e1gina web b\u00e1sica en un archivo <code>index.html</code> en la carpeta ra\u00edz del proyecto:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta\n      http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\"\n    /&gt;\n    &lt;meta\n      http-equiv=\"X-Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\"\n    /&gt;\n    &lt;title&gt;Hello from Electron renderer!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello from Electron renderer!&lt;/h1&gt;\n    &lt;p&gt;\ud83d\udc4b&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ahora que tenemos una p\u00e1gina web, se puede cargar en una ventana del navegador Electron. Reemplaza el contenido del archivo <code>main.js</code> con el siguiente c\u00f3digo. Se explicar\u00e1 cada bloque resaltado por separado.</p> main.js<pre><code>const { app, BrowserWindow } = require('electron')\n\nconst createWindow = () =&gt; {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\napp.whenReady().then(() =&gt; {\n  createWindow()\n})\n</code></pre>"},{"location":"00intro/02_electron_firstapp/#importando-modulos","title":"Importando m\u00f3dulos","text":"main.js (l\u00ednea 1)<pre><code>const { app, BrowserWindow } = require('electron')\n\n...\n</code></pre> <p>En la primera l\u00ednea, estamos importando dos m\u00f3dulos Electron con la sintaxis del m\u00f3dulo CommonJS:</p> <ul> <li><code>app</code>, controla el ciclo de vida del evento de su aplicaci\u00f3n.</li> <li><code>BrowserWindow</code>, que crea y administra ventanas de aplicaciones.</li> </ul> <p>Convenciones de capitalizaci\u00f3n de nombres</p> <p>Es posible que hayas notado la diferencia de may\u00fasculas entre app y los m\u00f3dulos de BrowserWindow. Electron sigue las convenciones t\u00edpicas de JavaScript, donde los m\u00f3dulos se indican en PascalCase y son constructores de clases instanciables (por ejemplo, <code>BrowserWindow</code>, <code>Tray</code>, <code>Notification</code>) mientras que los m\u00f3dulos camelCase no son instanciables (por ejemplo, <code>app</code>, <code>ipcRenderer</code>, <code>webContents</code>).</p>"},{"location":"00intro/02_electron_firstapp/#escribir-una-funcion-reutilizable-para-instanciar-ventanas","title":"Escribir una funci\u00f3n reutilizable para instanciar ventanas","text":"<p>La funci\u00f3n <code>createWindow()</code> carga la p\u00e1gina web en una nueva instancia de <code>BrowserWindow</code>:</p> main.js (l\u00edneas 3-10)<pre><code>...\nconst createWindow = () =&gt; {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n...\n</code></pre>"},{"location":"00intro/02_electron_firstapp/#llamar-a-su-funcion-cuando-la-aplicacion-este-lista","title":"Llamar a su funci\u00f3n cuando la aplicaci\u00f3n est\u00e9 lista","text":"main.js (l\u00edneas 12-14)<pre><code>...\napp.whenReady().then(() =&gt; {\n  createWindow()\n})\n</code></pre> <p>Muchos de los m\u00f3dulos principales de son emisores de eventos de Node.js que se adhieren a la arquitectura asincr\u00f3nica basada en eventos de Node. El m\u00f3dulo de aplicaci\u00f3n es uno de estos emisores.</p> <p><code>BrowserWindows</code> solo se puede crear despu\u00e9s de que se del evento <code>ready</code> del m\u00f3dulo de la aplicaci\u00f3n. Puede esperar este evento utilizando la API <code>app.whenReady()</code> y llamando a <code>createWindow()</code> una vez que se cumpla su promesa.</p> <p>evento <code>ready</code></p> <p>Normalmente los eventos de Node.js se escuchan utilizando la funci\u00f3n <code>.on</code> de un emisor.</p> <pre><code>app.on('ready', () =&gt; {\n// app.whenReady().then(() =&gt; {\ncreateWindow()\n})\n</code></pre> <p>Sin embargo, Electron expone <code>app.whenReady()</code> para evitar problemas al escuchar directamente el evento <code>ready</code>.</p> <p>En este momento, al ejecutar el comando de <code>start</code> de la aplicaci\u00f3n deber\u00eda abrir con una ventana que muestre la p\u00e1gina web.</p> <p>Cada p\u00e1gina web que la aplicaci\u00f3n muestra en una ventana se ejecutar\u00e1 en un proceso separado llamado renderer process (proceso de renderizado) (o simplemente renderer para abreviar). Los procesos de renderizado tienen acceso a las mismas API de JavaScript y herramientas que se utilizan para el desarrollo web front-end t\u00edpico, como el uso de webpack para agrupar y minimizar su c\u00f3digo o React para crear interfaces de usuario.</p>"},{"location":"00intro/02_electron_firstapp/#administrar-el-ciclo-de-vida-de-la-ventana-de-la-aplicacion","title":"Administrar el ciclo de vida de la ventana de la aplicaci\u00f3n","text":"<p>Las ventanas de las aplicaciones se comportan de manera diferente en cada sistema operativo. En lugar de hacer cumplir estas convenciones de forma predeterminada, Electron ofrece la opci\u00f3n de implementarlas en el c\u00f3digo de su aplicaci\u00f3n si desea seguirlas. Puede implementar convenciones b\u00e1sicas de ventana escuchando los eventos emitidos por la aplicaci\u00f3n y los m\u00f3dulos de <code>BrowserWindow</code>.</p> <p>Flujo de control espec\u00edfico</p> <p>La verificaci\u00f3n con la variable <code>process.platform</code> de Node puede ayudar a ejecutar c\u00f3digo de manera condicional en ciertas plataformas. Se debe tener en cuenta que s\u00f3lo hay tres plataformas posibles en las que Electron puede ejecutarse: <code>win32</code> (Windows), <code>linux</code> (Linux) y <code>darwin</code> (macOS).</p>"},{"location":"00intro/02_electron_firstapp/#salir-de-la-aplicacion-cuando-todas-las-ventanas-esten-cerradas-windows-y-linux","title":"Salir de la aplicaci\u00f3n cuando todas las ventanas est\u00e9n cerradas (Windows y Linux)","text":"<p>En Windows y Linux, cerrar todas las ventanas generalmente cerrar\u00e1 una aplicaci\u00f3n por completo. Para implementar este patr\u00f3n en Electron, se debe escuchar el evento <code>window-all-closed</code> del m\u00f3dulo de la aplicaci\u00f3n y llama a <code>app.quit()</code> para salir de la aplicaci\u00f3n si el usuario no est\u00e1 en macOS.</p> <pre><code>app.on('window-all-closed', () =&gt; {\n  if (process.platform !== 'darwin') app.quit()\n})\n</code></pre>"},{"location":"00intro/02_electron_firstapp/#abra-una-ventana-si-no-hay-ninguna-abierta-macos","title":"Abra una ventana si no hay ninguna abierta (macOS)","text":"<p>Por el contrario, el comportamiento por defecto de las aplicaciones de macOS es que generalmente contin\u00faan ejecut\u00e1ndose incluso sin ninguna ventana abierta. Activar la aplicaci\u00f3n cuando no hay ventanas disponibles deber\u00eda abrir una nueva.</p> <p>Para implementar esta caracter\u00edstica, escuchar el evento <code>activate</code> del m\u00f3dulo de la aplicaci\u00f3n y llamar a su m\u00e9todo <code>createWindow()</code> existente si no hay ning\u00fan <code>BrowserWindows</code> abierto.</p> <p>Debido a que las ventanas no se pueden crear antes del evento <code>ready</code>, solo deber\u00eda escuchar el evento <code>activate</code> despu\u00e9s de inicializar la aplicaci\u00f3n. Haz esto escuchando solo los eventos de activaci\u00f3n dentro del <code>callback</code> de <code>whenReady()</code>.</p> <pre><code>app.whenReady().then(() =&gt; {\n  createWindow()\n\n  app.on('activate', () =&gt; {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n</code></pre>"},{"location":"00intro/02_electron_firstapp/#codigo-final","title":"C\u00f3digo final","text":"main.js<pre><code>const { app, BrowserWindow } = require('electron')\n\nconst createWindow = () =&gt; {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\napp.whenReady().then(() =&gt; {\n  createWindow()\n\n  app.on('activate', () =&gt; {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\n\napp.on('window-all-closed', () =&gt; {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta\n      http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\" /&gt;\n    &lt;meta\n      http-equiv=\"X-Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\" /&gt;\n    &lt;title&gt;Hola desde Electron renderer!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hola desde Electron renderer!&lt;/h1&gt;\n    &lt;p&gt;\ud83d\udc4b&lt;/p&gt;\n    &lt;p id=\"info\"&gt;&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"00intro/02_electron_firstapp/#depurando-en-vs-code","title":"Depurando en VS Code","text":"<p>Para depurar la aplicaci\u00f3n usando VS Code, se debe adjuntar VS code para ambos procesos tanto el principal y los renderizadores. Aqu\u00ed un ejemplo de configuraci\u00f3n. Crea un nuevo archivo <code>launch.json</code> en el directorio <code>.vscode\\</code> del proyecto:</p> .vscode/launch.json<pre><code>{\n  \"version\": \"0.2.0\",\n  \"compounds\": [\n    {\n      \"name\": \"Main + renderer\",\n      \"configurations\": [\"Main\", \"Renderer\"],\n      \"stopAll\": true\n    }\n  ],\n  \"configurations\": [\n    {\n      \"name\": \"Renderer\",\n      \"port\": 9222,\n      \"request\": \"attach\",\n      \"type\": \"chrome\",\n      \"webRoot\": \"${workspaceFolder}\"\n    },\n    {\n      \"name\": \"Main\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"cwd\": \"${workspaceFolder}\",\n      \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron\",\n      \"windows\": {\n        \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron.cmd\"\n      },\n      \"args\": [\".\", \"--remote-debugging-port=9222\"],\n      \"outputCapture\": \"std\",\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}\n</code></pre> <p>La opci\u00f3n \"Main + renderer\" aparecer\u00e1 cuando selecciones \"Run and debug\" en la barra lateral, lo que le permitir\u00e1 establecer puntos de interrupci\u00f3n e inspeccionar todas las variables, entre otras cosas, tanto en el proceso principal como en el renderizador.</p> <p>Lo que hemos hecho en el archivo <code>launch.json</code> es crear 3 configuraciones:</p> <ul> <li><code>Main</code> se utiliza para iniciar el proceso principal y tambi\u00e9n exponer el puerto 9222 para la depuraci\u00f3n remota (<code>--remote-debugging-port=9222</code>). Este es el puerto que usaremos para adjuntar el depurador del <code>Renderer</code>. Debido a que el proceso principal es un proceso de Node.js, el tipo se establece en <code>node</code>.</li> <li><code>Renderer</code> se utiliza para depurar el proceso de renderizado. Debido a que el proceso principal es el que crea el proceso, tenemos que adjuntarlo (<code>\"request\": \"attach\"</code>) en lugar de crear uno nuevo. El proceso de renderizado es web, por lo que el depurador que debemos usar es <code>chrome</code>.</li> <li><code>Main + renderer</code> es una tarea compuesta que ejecuta las anteriores simult\u00e1neamente.</li> </ul> <p>ADVERTENCIA</p> <p>Debido a que estamos adjuntando un proceso en <code>Renderer</code>, es posible que las primeras l\u00edneas de su c\u00f3digo se omitan ya que el depurador no habr\u00e1 tenido tiempo suficiente para conectarse antes de que se ejecuten. Puede solucionar este problema actualizando la p\u00e1gina o estableciendo un tiempo de espera antes de ejecutar el c\u00f3digo en modo de desarrollo.</p>"},{"location":"00intro/02_electron_firstapp/#resumen","title":"Resumen","text":"<p>Las aplicaciones Electron se configuran mediante paquetes npm. El ejecutable debe instalarse en las <code>devDependencies</code> de su proyecto y puede ejecutarse en modo de desarrollo usando un script en el archivo <code>package.json</code>.</p> <p>El ejecutable toma el punto de entrada de JavaScript que se encuentra en la propiedad <code>main</code> de <code>paquete.json</code>. Este archivo controla el proceso principal, que ejecuta una instancia de Node.js y es responsable del ciclo de vida de su aplicaci\u00f3n, mostrando interfaces nativas, realizando operaciones privilegiadas y administrando procesos de renderizado.</p> <p>Los procesos de renderizado (o renderers) son responsables de mostrar contenido gr\u00e1fico. Puedes cargar una p\u00e1gina web en un renderer apunt\u00e1ndola a una direcci\u00f3n web o a un archivo HTML local. Los renderers se comportan de manera muy similar a las p\u00e1ginas web normales y tienen acceso a las mismas API web.</p>"},{"location":"00intro/03_intro_interfaces/","title":"0.3 Introducci\u00f3n a la interfaz de usuario","text":""},{"location":"00intro/03_intro_interfaces/#el-diseno-de-una-interfaz-el-diseno-grafico","title":"El dise\u00f1o de una interfaz. El dise\u00f1o gr\u00e1fico","text":"<p>Una interfaz es el medio por el cual dos sistemas se comunican entre s\u00ed. En el caso de las interfaces de usuario, se trata de la comunicaci\u00f3n entre el usuario y la computadora.</p> <p>El dise\u00f1o de interfaces de usuario busca poner los puntos de contacto entre un usuario y una computadora, es decir, la forma en la que un usuario interact\u00faa con una aplicaci\u00f3n inform\u00e1tica o un dispositivo electr\u00f3nico.</p> <p>Generalmente es la forma en la cual se conectan el hardware con el software, que comprende las aplicaciones, programas y herramientas, su finalidad es que un usuario pueda realizar una acci\u00f3n determinada en la forma que se desea, teniendo eficacia, rendimiento y seguridad en cada proceso, lo que involucra que las acciones que se realicen sean las que el usuario desea de forma eficaz y precisa.</p> <ul> <li>La acci\u00f3n efectuada deber\u00eda ser la que el usuario tiene intenciones de hacer.</li> <li>La acci\u00f3n se debe realizar de forma eficaz y precisa.</li> <li>La acci\u00f3n debe afectar solamente al componente de hardware o a la aplicaci\u00f3n que se ten\u00eda considerada utilizar, esto sin afectar a otros componentes.</li> </ul> <p>En el caso de las interfaces gr\u00e1ficas de usuario, en ingl\u00e9s GUI (Graphical User Interface), se busca que el usuario pueda interactuar con la computadora de forma visual, a trav\u00e9s de elementos gr\u00e1ficos como ventanas, botones, men\u00fas, etc.</p> <p>As\u00ed, podemos definir el dise\u00f1o gr\u00e1fico como la disciplina que se encarga de proyectar y dise\u00f1ar soluciones visuales para comunicar mensajes espec\u00edficos a un p\u00fablico determinado. En el caso de las interfaces de usuario, el dise\u00f1o gr\u00e1fico busca que el usuario pueda interactuar con la computadora de forma visual.</p> <p>Por lo tanto, la interfaz gr\u00e1fica de usuario ser\u00e1 un conjunto de elementos y un dise\u00f1o donde su distribuci\u00f3n que permite una mejor presentaci\u00f3n y navegaci\u00f3n en la aplicaci\u00f3n. Si no existen ambos factores unidos, el resultado final no ser\u00e1 \u00f3ptimo, pudiendo tirar por tierra todo el buen trabajo que lleva en el backend. Ejemplo:</p> <p></p> <p>Como se puede apreciar, la figura, las dos im\u00e1genes son la misma aplicaci\u00f3n. En la izquierda tenemos un mal dise\u00f1o, ya que los los elementos no aparecen diferenciados, no se puede leer bien el texto, no se aprecian correctamente las im\u00e1genes, etc. Mientras que en la imagen de la derecha, la navegaci\u00f3n del usuario es mucho m\u00e1s intuitiva, proporcionando un mayor grado de satisfacci\u00f3n al usarla.</p>"},{"location":"00intro/03_intro_interfaces/#que-busca-la-interfaz-de-usuario","title":"\u00bfQu\u00e9 busca la interfaz de usuario?","text":"<p>Para responder a esta pregunta debemos recordar la siguiente figura, la cual muestra la relaci\u00f3n que existe entre los diferentes elementos que intervienen en un equipo:</p> <pre><code>flowchart\n    A(\"&lt;font color=black&gt; Usuario\") --&gt; B(\"&lt;font color=black&gt; Interfaz Aplicaci\u00f3n\")\n    style A fill:#fea,stroke:#888\n    style B fill:#cfa,stroke:#888\n    B --&gt; A\n    B --&gt; C(\"&lt;font color=black&gt; Interfaz Sistema Operativo\")\n    style C fill:#fdd,stroke:#888\n    C --&gt; B\n    C --&gt; D(\"&lt;font color=black&gt; Hardware\")\n    style D fill:#aef,stroke:#888\n    D --&gt; C\n    C --&gt; A</code></pre> <p>Con ello, podemos entender que la interfaz de usuario busca establecer una relaci\u00f3n entre el usuario que utiliza la aplicaci\u00f3n y el hardware del equipo mediante el uso del Sistema Operativo y la aplicaci\u00f3n que se est\u00e1 utilizando.</p> <p>Las interfaces de usuario son muchas y variadas, tantas como hardware que debemos utilizar, como por ejemplo la siguiente imagen:</p> <p></p>"},{"location":"00intro/03_intro_interfaces/#planteamiento-y-diseno-de-una-interfaz","title":"Planteamiento y dise\u00f1o de una interfaz","text":"<p>En la construcci\u00f3n de una aplicaci\u00f3n debemos tener en cuenta diferentes fases, desde la definici\u00f3n de los objetivos que persigue nuestro proyecto hasta el dise\u00f1o visual definitivo, pasando por las especificaciones funcionales. </p> <ul> <li>Definici\u00f3n de objetivos: en esta fase se establecen los objetivos que se persiguen con la aplicaci\u00f3n, as\u00ed como las necesidades de los usuarios a los que va dirigida.</li> <li>Especificaciones funcionales: en esta fase se definen las funcionalidades que debe tener la aplicaci\u00f3n, as\u00ed como los requisitos t\u00e9cnicos necesarios para su desarrollo.</li> <li>Dise\u00f1o de la interacci\u00f3n: en esta fase se establece la forma en que los usuarios interactuar\u00e1n con la aplicaci\u00f3n, definiendo los flujos de navegaci\u00f3n y las acciones que podr\u00e1n realizar.</li> <li>Dise\u00f1o de la interfaz: en esta fase se establece el dise\u00f1o visual de la aplicaci\u00f3n, definiendo la estructura de la interfaz, los elementos que la componen y su disposici\u00f3n en pantalla.</li> <li>Desarrollo de la aplicaci\u00f3n: en esta fase se lleva a cabo la implementaci\u00f3n de la aplicaci\u00f3n, siguiendo las especificaciones funcionales y el dise\u00f1o de la interfaz previamente establecidos.</li> <li>Pruebas y validaci\u00f3n: en esta fase se realizan pruebas para comprobar que la aplicaci\u00f3n funciona correctamente y se valida con los usuarios finales para asegurar que cumple con sus necesidades y expectativas.</li> </ul>"},{"location":"00intro/03_intro_interfaces/#elementos-de-una-interfaz-grafica-de-usuario-gui","title":"Elementos de una interfaz gr\u00e1fica de usuario (GUI)","text":"<p>Podemos observar la evoluci\u00f3n de las GUI ha llegado a ofrecer a los usuarios unas interfaces con una usabilidad \u00f3ptima. Para conseguir esto se ha establecido que las interfaces tienen que cumplir una serie de caracter\u00edsticas que, entre otras, ser\u00e1n:</p> <ul> <li>Consistencia: seguir un mismo dise\u00f1o y estructura entre ellas y tambi\u00e9n con otras interfaces de aplicaciones an\u00e1logas. Tambi\u00e9n tendr\u00e1n que ser consistente cuando se ejecuten en diferentes entornos.</li> <li>Usabilidad: debe ser f\u00e1cil de usar y de entender (intuitiva), y tiene que ser eficiente en su uso.</li> <li>Accesible: debe que mostrar con claridad las funcionalidades que ofrece y tiene que facilitar llegar de manera sencilla y clara.</li> <li>Aprendizaje y uso f\u00e1cil: las interfaces tienen que ser f\u00e1ciles de usar y tambi\u00e9n de aprender por parte de los usuarios m\u00e1s noveles.</li> <li>Retroalimentaci\u00f3n: la interfaz tiene que ofrecer informaci\u00f3n al usuario sobre las acciones que ha realizado, si estas han sido correctas o no, y si no lo han sido, tiene que ofrecer una soluci\u00f3n para corregirlo.</li> <li>Anticipaci\u00f3n: se tendr\u00e1n que prever los posibles errores que pueda cometer un usuario o las necesidades que pueda demostrar y ofrecer soluciones antes de que aparezcan o control\u00e1ndoos y ofreciendo soluciones.</li> <li>Autonom\u00eda: un usuario no tiene que necesitar m\u00e1s informaci\u00f3n o ayuda que la que una interfaz le ofrece o, la que puede encontrar a partir de las indicaciones que le indicar\u00e1 esta interfaz.</li> <li>Reducir carga de memoria: para poder usar una interfaz m\u00e1s de una vez no habr\u00e1 que obligar a los usuarios a recordar la ubicaci\u00f3n de las funcionalidades, sino que estas tendr\u00e1n que ser sencillas de reconocer. Esto har\u00e1 que no sea indispensable memorizar muchas informaciones para aprender a usar una interfaz determinada.</li> <li>Internacionalizaci\u00f3n de la interfaz: seg\u00fan los requisitos, debe que permitir ser entendida y utilizable por usuarios de diferentes culturas e idiomas o bien haci\u00e9ndola internacional con iconos f\u00e1cilmente reconocibles o con la posibilidad de seleccionar el idioma con el cual se querr\u00e1 trabajar.</li> <li>Valores iniciales: tambi\u00e9n conocidos como valores por defecto o est\u00e1ndar. Son los valores que en las interfaces que llevan un formulario incorporado aparecer\u00e1n seleccionados inicialmente. Adem\u00e1s, tienen que poder ser descartados de manera sencilla.</li> </ul> <p>Las interfaces gr\u00e1ficas de usuario disponen de una serie de elementos propios, comunes a muchas de las GUI desarrolladas, que dispondr\u00e1n de unas caracter\u00edsticas y propiedades. Con estos elementos se facilitar\u00e1 el desarrollo de las GUI de las aplicaciones inform\u00e1ticas, cosa que ofrece la posibilidad de cumplir la mayor\u00eda de las caracter\u00edsticas definidas.</p> <p>Para que el usuario pueda usar estos elementos, tendr\u00e1 que usar alguno de los dispositivos de entrada/salida. El teclado del ordenador ha sido el dispositivo indispensable, como tambi\u00e9n lo es el rat\u00f3n. Pero hay otros como touchpads, tabletas gr\u00e1ficas, gamepads, pantallas t\u00e1ctiles o micr\u00f3fonos. Por otra parte, en cuanto a dispositivos de salida, adem\u00e1s de la pantalla, ser\u00e1n importantes los altavoces, impresoras, leds indicadores, etc.</p> <p>Algunos de estos dispositivos ser\u00e1n indispensables para el funcionamiento correcto de algunos de los elementos que ofrecen las GUI. Cada interfaz gr\u00e1fica usar\u00e1 algunos elementos en funci\u00f3n de su entorno de trabajo, y no todas tienen los mismos elementos.</p> <p>Algunos de los elementos de las GUI que se pueden encontrar de manera habitual en muchas interfaces son:</p> <ul> <li>Botones</li> <li>Campos de texto</li> <li>Listas desplegables</li> <li>Men\u00fas</li> <li>Barras de herramientas</li> <li>Barras de estado</li> <li>Ventanas</li> <li>Paneles</li> <li>Pesta\u00f1as</li> <li>Iconos</li> <li>Etiquetas</li> <li>Cuadros de di\u00e1logo</li> <li>Barras de desplazamiento</li> <li>Barras de progreso</li> <li>Cuadros de texto</li> </ul>"},{"location":"00intro/03_intro_interfaces/#tipos-de-interfaces-graficas","title":"Tipos de interfaces gr\u00e1ficas","text":"<ul> <li> <p>Command Line Interfaces (CLI)</p> <p>Fueron las primeras interfaces, era solo una l\u00ednea de comandos, un prompt y un cursor parpadeante para mostrar la posici\u00f3n actual o un mensaje, un ejemplo en el caso de los primeros ordenadores personales con MS-DOS. </p> <p>Con una interfaz de l\u00edneas de comandos o Command Line Interface (CLI), se tecleaban comandos espec\u00edficos para establecer la comunicaci\u00f3n con la computadora, el resultado se mostraba en formato de texto. </p> </li> <li> <p>Text User Interface (TUI)</p> <p>En ellas la interacci\u00f3n con el dispositivo tambi\u00e9n se da por medio del teclado. Las TUI marcan el paso de las interfaces de l\u00edneas de comando a interfaces gr\u00e1ficas de usuario. </p> </li> <li> <p>Graphical User Interfaces (GUI)</p> <p>Este software se aplica con elementos gr\u00e1ficos de control e im\u00e1genes que se toman como referencia de objetos de la realidad. </p> <p>En este sentido, se suele recurrir al rat\u00f3n y al teclado como dispositivos de control, aunque tambi\u00e9n ya es muy com\u00fan que entren pantallas t\u00e1ctiles.Aqu\u00ed los iconos tambi\u00e9n se introducen en el mundo digital, al igual que el escritorio o la papelera.</p> </li> <li> <p>Voice User Interface (VUI)</p> <p>La Voice User Interface tambi\u00e9n permite la interacci\u00f3n con las computadoras por medio del control por voz, un ejemplo es Apple con  Siri, Amazon con Alexa, Microsoft con Cortana o la b\u00fasqueda de Google mediante voz.</p> <p>De esta forma, se puede acceder a algunas aplicaciones de un modo m\u00e1s efectivo y garantizando una mayor accesibilidad.</p> </li> <li> <p>Natural User Interface (NUI)</p> <p>Con Natural User Interface, la comunicaci\u00f3n con el dispositivo se da de forma m\u00e1s intuitiva, puede ser considerada como una evoluci\u00f3n de la interfaz gr\u00e1fica de usuario y de la Voice User Interface. </p> <p>Los diferentes sensores, c\u00e1maras y micr\u00f3fonos permiten una comunicaci\u00f3n vers\u00e1til, la interfaz de usuario interactiva reacciona a los gestos, a los movimientos y al lenguaje, siendo capaz de reconocer rostros y objetos. </p> </li> </ul>"},{"location":"00intro/03_intro_interfaces/#el-color","title":"El color","text":"<p>El ojo humano solo es capaz de percibir los denominados colores aditivos; a trav\u00e9s de la combinaci\u00f3n de \u00e9stos es posible obtener el resto de los colores, estos son:</p> <ul> <li>Rojo (R - Red) </li> <li>Verde (G - Green)</li> <li>Azul (B - Blue)</li> </ul>"},{"location":"00intro/03_intro_interfaces/#el-sistema-rgb","title":"El sistema RGB","text":"<p>De la misma forma, un ordenador es capaz de obtener la representaci\u00f3n de todos los colores utilizando el sistema RGB (Red Green Blue), indicando la proporci\u00f3n de cada color dentro de dicha combinaci\u00f3n, dando lugar a toda la paleta de colores.</p> <p>Para representar cada color de forma que pueda ser traducido por el ordenador se suelen utilizar 8 bits para codificar cada uno de los colores aditivos, es decir, se establece la proporci\u00f3n de cada color que va a formar parte de los tres. La escala monocrom\u00e1tica de un color tendr\u00e1 256 valores posibles, desde 0 hasta 255.</p> <p>A la hora de representar cada uno de los colores, es posible utilizar tanto el sistema hexadecimal, donde se representan los valores de cada color en una escala de <code>00</code> a <code>FF</code> (0 a 255 en decimal).</p> <p>El n\u00famero de combinaci\u00f3n de colores se calcula multiplicando el n\u00famero m\u00e1ximo de grados en la escala monocrom\u00e1tica de cada color: 256x256x256, obteniendo 16.777.256 colores.</p> <p>Por ejemplo, el color amarillo estar\u00eda formado por:</p> <p></p> Color Valor decimal Valor binario Valor hexadecimal Rojo 255 1111 1111 FF Verde 255 1111 1111 FF Azul 0 0000 0000 00 <p>En hexadecimal quedar\u00eda expresado: <code>#FFFF00</code></p>"},{"location":"00intro/03_intro_interfaces/#matiz-saturacion-y-brillo-hsv","title":"Matiz, saturaci\u00f3n y brillo (HSV)","text":"<p>Adem\u00e1s del grado en la escala monocrom\u00e1tica de cada uno de los colores RGB, los colores representan 3 propiedades que permiten distinguirse unos de otros:</p> <p></p> <ul> <li>Matiz (Hue). Atributo que permite distinguir un color de otro. Los tres matices primarios son los colores aditivos, verde, rojo y azul. El resto de los colores se obtiene mezclando estos tres. El matiz permite definir dos colores como complementarios cuando est\u00e1n uno frente al otro en el c\u00edrculo crom\u00e1tico.</li> <li>Saturaci\u00f3n (Saturation). Este atributo define la intensidad de un color. Pueden relacionarse con el ancho de banda de luz que estamos visualizando, por tanto, queda condicionado por el nivel de gris presente en un color: cuando mayor sea el nivel de gris, menos saturado ser\u00e1 un color, y ser\u00e1 menos intenso.</li> <li>Valor o Brillo (Value, Brightness). Atributo que define la cantidad de luz de un color. Representa lo oscuro (si se le a\u00f1ade negro) o claro (si se le a\u00f1ade blanco) que es un color respecto de su patr\u00f3n, es decir, respecto del color puro sin modificar el brillo. En una composici\u00f3n de colores en dise\u00f1o gr\u00e1fico, cuanto m\u00e1s brillante sea un color, m\u00e1s cerca parece estar.</li> </ul> <p>Estas propiedades nos permiten definir los colores como crom\u00e1ticos, complementarios o cercanos, as\u00ed como definir el contraste de color.</p>"},{"location":"00intro/03_intro_interfaces/#circulo-cromatico","title":"C\u00edrculo crom\u00e1tico","text":"<p>El t\u00e9rmino \"c\u00edrculo crom\u00e1tico\" se refiere a una representaci\u00f3n circular de los colores organizados seg\u00fan su relaci\u00f3n crom\u00e1tica. Es una herramienta utilizada en dise\u00f1o y arte para comprender las relaciones entre colores y crear esquemas de color armoniosos.</p>"},{"location":"00intro/03_intro_interfaces/#armonia-de-color","title":"Armon\u00eda de color","text":"<p>La armon\u00eda de color se refiere a la disposici\u00f3n de colores de manera que resulten agradables a la vista y transmitan una sensaci\u00f3n de equilibrio y orden. En dise\u00f1o y arte, se utilizan diferentes combinaciones de colores para lograr armon\u00eda, tales como:</p> <ul> <li>Colores complementarios: Colores opuestos en el c\u00edrculo crom\u00e1tico que, cuando se usan juntos, crean un contraste fuerte y vibrante.</li> <li>Colores an\u00e1logos: Colores que est\u00e1n uno al lado del otro en el c\u00edrculo crom\u00e1tico y que combinan bien entre s\u00ed, proporcionando una transici\u00f3n suave y coherente.</li> <li>Colores tri\u00e1dicos: Tres colores equidistantes en el c\u00edrculo crom\u00e1tico que forman un tri\u00e1ngulo equil\u00e1tero, proporcionando un equilibrio de colores.</li> <li>Colores monocrom\u00e1ticos: Variaciones de un solo color, utilizando diferentes tonos, matices y saturaciones para crear una paleta cohesiva y equilibrada.</li> </ul> <p></p> <p>La armon\u00eda de color es esencial en el dise\u00f1o de interfaces, ya que influye en la percepci\u00f3n y experiencia del usuario. Un esquema de color bien equilibrado y armonioso puede mejorar la legibilidad, la usabilidad y la est\u00e9tica de una interfaz.</p>"},{"location":"00intro/03_intro_interfaces/#contraste-de-color","title":"Contraste de color","text":"<p>El contraste de color se refiere a la diferencia entre dos colores en t\u00e9rminos de luminosidad y saturaci\u00f3n. Un alto contraste entre colores crea una distinci\u00f3n clara y facilita la legibilidad y visibilidad de la informaci\u00f3n en una interfaz.</p> <p>El contraste de color es importante en el dise\u00f1o de interfaces para garantizar que el contenido sea accesible y f\u00e1cil de leer para todos los usuarios, incluidos aquellos con discapacidades visuales. Se pueden utilizar herramientas de contraste de color para evaluar y ajustar el contraste de color en una interfaz.</p>"},{"location":"00intro/03_intro_interfaces/#psicologia-del-color","title":"Psicolog\u00eda del color","text":"<p>Seg\u00fan la psicolog\u00eda del color, cada uno evoca una emoci\u00f3n o una acci\u00f3n, por lo tanto, a la hora de dise\u00f1ar una interfaz es recomendable elegir unos colores acordes.</p> <p>Por ejemplo:</p> <ul> <li>Rojo: Peligro, Lujuria, Poder, Emoci\u00f3n, Amor, Velocidad, Ira</li> <li>Amarillo: Advertencia, Competencia, Felicidad, Barato, Baja calidad</li> <li>Verde: Buen Gusto, Envidia, Ecol\u00f3gico, Salud, Dinero</li> <li>Azul: Sofisticaci\u00f3n, Competencia, Alta calidad, Corporativo, Fiabilidad</li> <li>Rosa: Autoridad, Sinceridad, Femenino y Coqueto</li> <li>Violeta/Morado: Calidez, Sofisticaci\u00f3n, Poder</li> <li>Naranja: Robustez, Emoci\u00f3n, Atracci\u00f3n, Peligro</li> <li>Marr\u00f3n: Dolor, Tierra, Estabilidad</li> <li>Negro: Felicidad, Sofisticaci\u00f3n, Caro, Miedo</li> <li>Blanco: Pureza, Limpieza, Espacio</li> </ul>"},{"location":"00intro/03_intro_interfaces/#referencias","title":"Referencias","text":"<ul> <li>Garc\u00eda-Miguel, D; Garc\u00eda-Miguel, B; Fern\u00e1ndez, A. Dise\u00f1o de interfaces. Editorial s\u00edntesi. 2021</li> <li>Disseny d\u2019interficies al IOC.</li> </ul>"},{"location":"01js/","title":"1 Javascript","text":"<ul> <li>1.1 Sintaxis b\u00e1sica</li> <li>1.2 Funciones</li> <li>1.3 Objetos <code>{ }</code></li> <li>1.4 Arrays <code>[ ]</code></li> <li>1.5 Callbacks y Promesas</li> <li>1.6 Programaci\u00f3n Orientada a Objetos</li> </ul>"},{"location":"01js/011_actividades/","title":"\u270d\ufe0f Actividades: sintaxis b\u00e1sica","text":""},{"location":"01js/011_actividades/#preparacion-del-entorno","title":"Preparaci\u00f3n del entorno","text":"<p>Acepta la tarea en GitHub Classroom y clona el repositorio en tu m\u00e1quina local.</p> <ul> <li>https://classroom.github.com/a/aH5CUuUX</li> </ul> <p>Realiza las actividades en los ficheros indicados y comprueba que funcionan correctamente.</p> <p>Warning</p> <p>Es importante evitar el uso de generadores de c\u00f3digo autom\u00e1tico para realizar las actividades, puesto que el objetivo es practicar la sintaxis de JavaScript.</p> <p>Si tienes dudas, consulta la documentaci\u00f3n o pide ayuda al profesor.</p> <p>En caso de existir duda ante la copia o el uso de herramientas de generaci\u00f3n de c\u00f3digo autom\u00e1tico, se pedir\u00e1 una explicaci\u00f3n detallada del c\u00f3digo por parte del alumnado implicado. En caso de no poder justificarlo, se considerar\u00e1 copia y se considerar\u00e1 la actividad como no realizada para las partes afectadas.</p>"},{"location":"01js/011_actividades/#actividad-1-media","title":"Actividad 1 - Media","text":"<p>Crea el fichero <code>media.js</code> y escribe en \u00e9l un programa que muestre por consola la media de tres n\u00fameros.</p> <p>Dadas tres variables num\u00e9ricas, escribe un programa que muestre por consola la media de los tres n\u00fameros con dos decimales.</p> <p>Por ejemplo, si los valores son <code>3</code>, <code>5</code> y <code>8</code>, el programa mostrar\u00e1 <code>5.33</code>.</p>"},{"location":"01js/011_actividades/#actividad-2-dni","title":"Actividad 2 - DNI","text":"<p>Crea el fichero <code>dni.js</code> y escribe en \u00e9l un programa que muestre por consola un DNI con formato y validez.</p> <p>Dada una variable de entrada que contiene un DNI (ej: <code>12345678w</code>), escribe un programa que muestre por consola el DNI con el formato <code>12345678-W</code>.</p> <p>Comprueba que tiene el formato correcto tanto de longitud del n\u00famero como de letra.</p> <p>Para comprobar que la letra corresponde a un DNI correcto, se obtiene dividiendo la parte num\u00e9rica entre <code>23</code> y cogiendo de la cadena '<code>TRWAGMYFPDXBNJZSQVHLCKE</code>' la letra correspondiente al resto de la divisi\u00f3n.</p> <p>Por ejemplo, si el resto es <code>0</code> la letra ser\u00e1 la <code>T</code> y si es <code>4</code> ser\u00e1 la <code>G</code>.</p>"},{"location":"01js/011_actividades/#actividad-3","title":"Actividad 3","text":"<p>Crea el fichero <code>act3.js</code> que, partiendo de una variable <code>n</code> con un n\u00famero entero, muestre por consola la figura de ejemplo con <code>n</code> l\u00edneas.</p> <p>Por ejemplo, si <code>n = 10</code>, el programa mostrar\u00e1:</p> <p></p>"},{"location":"01js/011_actividades/#actividad-4","title":"Actividad 4","text":"<p>Crea el fichero <code>act4.js</code> que, partiendo de una variable <code>n</code> con un n\u00famero entero, muestre por consola la figura de ejemplo con <code>n</code> l\u00edneas.</p> <p>Por ejemplo, si <code>n = 10</code>, el programa mostrar\u00e1:</p> <p></p>"},{"location":"01js/011_actividades/#actividad-5","title":"Actividad 5","text":"<p>Crea el fichero <code>act5.js</code> que, partiendo de una variable <code>n</code> con un n\u00famero entero, muestre por consola la figura de ejemplo con <code>n</code> l\u00edneas.</p> <p>Por ejemplo, si <code>n = 10</code>, el programa mostrar\u00e1:</p> <p></p>"},{"location":"01js/011_actividades/#actividad-6","title":"Actividad 6","text":"<p>Crea el fichero <code>act6.js</code> que, partiendo de una variable <code>n</code> con un n\u00famero entero, muestre por consola la figura de ejemplo con <code>n</code> l\u00edneas.</p> <p>Por ejemplo, si <code>n = 10</code>, el programa mostrar\u00e1:</p> <p></p>"},{"location":"01js/011_actividades/#actividad-7","title":"Actividad 7","text":"<p>Crea un fichero <code>horas.js</code>, que dadas dos horas almacenadas en tres variables, <code>horaInicio</code>, <code>horaFin</code> e <code>intervalo</code>, muestre por consola todas las horas que van desde <code>horaInicio</code> hasta <code>horaFin</code> con un intervalo de <code>intervalo</code> minutos.</p> <p><code>horaInicio</code> y <code>horaFin</code> ser\u00e1n cadenas con el formato <code>HH:MM</code> e <code>intervalo</code> ser\u00e1 un n\u00famero entero.</p> <p>La salida se mostrar\u00e1 en una sola l\u00ednea separando las horas por comas.</p> <p>Comprueba que <code>horaInicio</code> y <code>horaFin</code> tienen el formato correcto y que <code>intervalo</code> es un n\u00famero entero positivo, en caso contrario muestra un mensaje de error.</p> <p>Por ejemplo, si <code>horaInicio = 15:00</code>, <code>horaFin = 17:00</code> e <code>intervalo = 15</code>, el programa mostrar\u00e1:</p> <pre><code>15:00, 15:15, 15:30, 15:45, 16:00, 16:15, 16:30, 16:45, 17:00\n</code></pre>"},{"location":"01js/011_actividades/#actividad-8","title":"Actividad 8","text":"<p>Crea un fichero <code>frase.js</code> que, dada una cadena de texto, muestre por consola si las siguientes operaciones:</p> <ul> <li>el n\u00famero de caracteres (incluyendo espacios)</li> <li>el n\u00famero de palabras</li> <li>la frase en may\u00fasculas</li> <li>la frase con la primera letra de cada palabra en may\u00fasculas</li> <li>la frase escrita con las letras al rev\u00e9s</li> <li>la frase escrita con las palabras al rev\u00e9s</li> <li>si es o no un pal\u00edndromo. Una cadena es un pal\u00edndromo si se lee igual de izquierda a derecha que de derecha a izquierda sin tener en cuenta los espacios.</li> </ul> <p>Por ejemplo, si la cadena es <code>Anita lava la tina</code>, el programa mostrar\u00e1:</p> <pre><code>N\u00famero de caracteres: 18\nN\u00famero de palabras: 4\nFrase en may\u00fasculas: ANITA LAVA LA TINA\nFrase con la primera letra de cada palabra en may\u00fasculas: Anita Lava La Tina\nFrase al rev\u00e9s: anit alav al aval atinA\nFrase con las palabras al rev\u00e9s: tina la lava Anita\nEs un pal\u00edndromo\n</code></pre>"},{"location":"01js/011_actividades/#actividad-9","title":"Actividad 9","text":"<p>Crea un fichero <code>password.js</code> que, dada una cadena de texto, muestre por consola si es una contrase\u00f1a segura o no.</p> <p>Una contrase\u00f1a es segura si tiene al menos 8 caracteres, contiene al menos una letra may\u00fascula, una letra min\u00fascula, un n\u00famero y un car\u00e1cter especial '<code>#@/?\u00bf!*+_-&amp;%$</code>' (aunque no se ha visto todav\u00eda, si sabes hacerlo con expresiones regulares, tambi\u00e9n ser\u00e1 v\u00e1lido).</p> <p>Por ejemplo, si la cadena es <code>Abc123$</code>, el programa mostrar\u00e1 <code>La contrase\u00f1a es segura</code>.</p>"},{"location":"01js/011_soluciones_1be0cceec8759dfd307437b38ce2aba6c2eb8175/","title":"\ud83d\udca1 Posibles soluciones a las actividades de sintaxis b\u00e1sica","text":""},{"location":"01js/011_soluciones_1be0cceec8759dfd307437b38ce2aba6c2eb8175/#actividad-1-media","title":"Actividad 1 - Media","text":"<pre><code>let a = 3;\nlet b = 5;\nlet c = 8;\n\nlet media = (a + b + c) / 3;\n\nlet mediaAjustada = media.toFixed(2);\n\nconsole.log(mediaAjustada);\n</code></pre>"},{"location":"01js/011_soluciones_1be0cceec8759dfd307437b38ce2aba6c2eb8175/#actividad-2-dni","title":"Actividad 2 - DNI","text":"<pre><code>let dni = '12345678z';\nconst letras = 'TRWAGMYFPDXBNJZSQVHLCKE';\n\nconsole.log(`dni original: ${dni}`);\n\nlet numero = dni.substring(0, 8);\n\nif (numero.length !== 8) {\n  console.log('DNI incorrecto (longitud)');\n  return;\n}\n\nnumero = parseInt(numero);\n\nif (isNaN(numero) || numero &lt; 0 || numero &gt; 99999999) {\n  console.log('DNI incorrecto (n\u00famero)');\n  return;\n}\n\nlet letra = dni.substring(8).toUpperCase();\n\nif (letras.split('').indexOf(letra) === -1) {\n  console.log('Letra no v\u00e1lida');\n  return;\n}\n\nconsole.log(`DNI formateado: ${numero}-${letra}`);\n\nlet resto = numero % 23;\nlet letraCorrecta = letras[resto];\n\nif (letra === letraCorrecta) {\n  console.log('DNI correcto :)');\n}\nelse {\n  console.log('DNI incorrecto :(');\n  console.log (`La letra correcta para ${numero} es ${letraCorrecta}`);\n}\n</code></pre>"},{"location":"01js/011_soluciones_1be0cceec8759dfd307437b38ce2aba6c2eb8175/#actividad-3-diagonal","title":"Actividad 3 - Diagonal","text":"<pre><code>let n = 10;\n\nfor (let i = 0; i &lt; n; i++) {\n  let linea = '';\n\n  for (let j = 0; j &lt; n; j++) {\n    if (j === i) {\n      linea += '* ';\n    } else {\n      linea += '  ';\n    }\n\n    // alternativa\n    // linea += (j === i) ? '* ' : '  ';\n  }\n\n  console.log(linea);\n}\n</code></pre>"},{"location":"01js/011_soluciones_1be0cceec8759dfd307437b38ce2aba6c2eb8175/#actividad-4-diagonal-inversa","title":"Actividad 4 - Diagonal inversa","text":"<pre><code>let n = 10;\n\nfor (let i = 0; i &lt; n; i++) {\n  let linea = '';\n\n  for (let j = 0; j &lt; n; j++) {\n    if (j === n - i - 1) {\n      linea += '* ';\n    } else {\n      linea += '  ';\n    }\n\n    // alternativa\n    // linea += (j === n - i - 1) ? '* ' : '  ';\n  }\n\n  console.log(linea);\n}\n</code></pre>"},{"location":"01js/011_soluciones_1be0cceec8759dfd307437b38ce2aba6c2eb8175/#actividad-5-cuadrado","title":"Actividad 5 - Cuadrado","text":"<pre><code>let n = 10;\n\nfor (let i = 0; i &lt; n; i++) {\n  let linea = '';\n\n  for (let j = 0; j &lt; n; j++) {\n    if (i === 0 || i === n - 1 || j === 0 || j === n - 1) {\n      linea += '* ';\n    } else {\n      linea += '  ';\n    }\n\n    // alternativa\n    // linea += (i === 0 || i === n - 1 || j === 0 || j === n - 1) ? '* ' : '  ';\n  }\n\n  console.log(linea);\n}\n</code></pre>"},{"location":"01js/011_soluciones_1be0cceec8759dfd307437b38ce2aba6c2eb8175/#actividad-6-triangulo","title":"Actividad 6 - Tri\u00e1ngulo","text":"<pre><code>let n = 10;\n\nfor (let i = 0; i &lt; n; i++) {\n  let linea = '';\n\n  for (let j = 0; j &lt; n; j++) {\n    if (j &gt;= n - i - 1) {\n      linea += '* ';\n    } else {\n      linea += '  ';\n    }\n\n    // alternativa\n    // linea += (j &gt;= n - i - 1) ? '* ' : '  ';\n  }\n\n  console.log(linea);\n}\n</code></pre>"},{"location":"01js/01_sintaxis/","title":"1.1 Sintaxis b\u00e1sica de Javascript","text":""},{"location":"01js/01_sintaxis/#introduccion","title":"Introducci\u00f3n","text":"<p>Javascript, muchas veces abreviado como JS, es un lenguaje de programaci\u00f3n interpretado de alto nivel, usado principalmente en el lado del cliente (navegador web) para mejorar la interactividad de las p\u00e1ginas web. Tambi\u00e9n se usa en el lado del servidor (Node.js) y en aplicaciones de escritorio (Electron).</p> <p>Es un lenguaje orientado a objetos, basado en prototipos, de tipado din\u00e1mico y d\u00e9bil. Javascript tiene una sintaxis similar a C++ y Java.</p>"},{"location":"01js/01_sintaxis/#ecmascript","title":"ECMAScript","text":"<p>ECMAScript, abreviado como ES, es la especificaci\u00f3n del lenguaje de programaci\u00f3n que se basa en Javascript. La \u00faltima versi\u00f3n es la ECMAScript 2024 (ES2024), aunque la m\u00e1s usada es la ECMAScript 2015 (ES6) que introdujo muchas novedades en el lenguaje, como las constantes, let, arrow functions, clases, m\u00f3dulos, etc.</p>"},{"location":"01js/01_sintaxis/#comentarios","title":"Comentarios","text":"<p>Los comentarios en Javascript se pueden hacer de dos formas:</p> <ul> <li><code>//</code>: para comentarios de una l\u00ednea</li> <li><code>/* ... */</code>: para comentarios de varias l\u00edneas</li> </ul> <pre><code>// Esto es un comentario de una l\u00ednea\n\n/* Esto es un comentario de\n   varias l\u00edneas */\n</code></pre>"},{"location":"01js/01_sintaxis/#sentencias","title":"Sentencias","text":"<p>Las sentencias en Javascript terminan con un punto y coma <code>;</code>. Aunque no es obligatorio ponerlo al final de cada sentencia es recomendable hacerlo para evitar errores.</p> <pre><code>let x = 5;  // sentencia\nlet y = 6;  // sentencia\nlet z = x + y;  // sentencia\n</code></pre>"},{"location":"01js/01_sintaxis/#logs","title":"Logs","text":"<p>Para mostrar mensajes en la consola del navegador se usa la funci\u00f3n <code>console.log()</code>.</p> <pre><code>console.log('Hola mundo');\n</code></pre> <p>Existen otras funciones como <code>console.error()</code>, <code>console.warn()</code>, <code>console.info()</code>, <code>console.table()</code>, <code>console.time()</code>, <code>console.timeEnd()</code>, etc.</p> <pre><code>console.time('Tiempo');  // Inicia un temporizador, se le pasa un nombre para identificarlo\nconsole.error('Error');\nconsole.warn('Advertencia');\nconsole.info('Informaci\u00f3n');\nconsole.table(['Manzana', 'Pera', 'Naranja']); // Muestra una tabla con los datos\nconsole.timeEnd('Tiempo');  // Finaliza el temporizador y muestra el tiempo transcurrido\n</code></pre> <p>El resultado de la ejecuci\u00f3n depende de la consola donde se ejecute, y cada tipo de mensaje suele representarse con iconos o colores.</p> Resultado de la ejecuci\u00f3n<pre><code>\u274c Error\n\u26a0\ufe0f Advertencia\nInformaci\u00f3n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 (index) \u2502 Values    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0       \u2502 'Manzana' \u2502\n\u2502 1       \u2502 'Pera'    \u2502\n\u2502 2       \u2502 'Naranja' \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nTiempo: 5.468ms\n</code></pre>"},{"location":"01js/01_sintaxis/#bloques","title":"Bloques","text":"<p>Los bloques de c\u00f3digo se encierran entre llaves <code>{ }</code>. Un bloque puede contener varias sentencias.</p> <pre><code>{\n    let x = 5;\n    let y = 6;\n    let z = x + y;\n}\n</code></pre> <p>Nota</p> <p>En sentencias como <code>if</code>, <code>for</code>, <code>while</code>, etc., se pueden omitir las llaves si s\u00f3lo hay una sentencia en el bloque, aunque es recomendable ponerlas siempre.</p>"},{"location":"01js/01_sintaxis/#variables","title":"Variables","text":"<p>Javascript es un lenguaje con tipado din\u00e1mico. Esto significa que no se indica el tipo de una variable al declararla e incluso puede cambiar su tipo a lo largo de la ejecuci\u00f3n del programa.</p> <p>Esto se conoce como inferencia de tipos, se asigna el tipo de una variable en funci\u00f3n del valor que se le asigna.</p> <p>Ejemplo:</p> <pre><code>let miVariable;          // declara miVariable y como no se asigno un valor valdr\u00e1 undefined\nmiVariable = 'Hola';     // ahora su valor es 'Hola', por tanto contiene una cadena de texto\nmiVariable = 34;         // ahora contiene un n\u00famero\nmiVariable = [3, 45, 2]; // ahora un objeto array\nmiVariable = undefined;  // por \u00faltimo vuelve a valer undefined\n</code></pre> <p>Ni siquiera es obligatorio a declarar una variable antes de usarla, aunque es recomendable para evitar errores.</p> <p>Las variables de declaran con <code>let</code> (lo recomendado desde ES2015), aunque tambi\u00e9n pueden declararse con <code>var</code>. La diferencia es que con <code>let</code> la variable s\u00f3lo existe en el bloque en que se declara mientras que con <code>var</code> la variable es global. Ejemplo:</p> <pre><code>let edad = 25;\n\nif (edad &lt; 18) {\n  let textoLet = 'Eres mayor de edad';\n  var textoVar = 'Eres mayor de edad';\n} else {\n  let textoLet = 'Eres menor de edad';\n  var textoVar = 'Eres menor de edad';\n}\n\nconsole.log(textoLet);  // mostrar\u00e1 undefined porque fuera del if no existe la variable\nconsole.log(textoVar);  // mostrar\u00e1 la cadena 'Eres mayor de edad' porque es global\n</code></pre> <p>Cualquier variable que no se declara dentro de una funci\u00f3n (o si se usa sin declarar) es global. Debemos evitar el uso de variables globales.</p> <p>Se recomienda que los nombres de las variables sigan la sintaxis camelCase (ej.: miPrimeraVariable).</p>"},{"location":"01js/01_sintaxis/#constantes","title":"Constantes","text":"<p>Desde ES2015 tambi\u00e9n se pueden declarar constantes con <code>const</code>. Se les debe dar un valor al declararlas y si intentamos cambiar su valor se producir\u00e1 un error.</p> <p>Se recomienda usar <code>const</code> siempre que sea posible y s\u00f3lo usar <code>let</code> si sabemos que el valor de la variable va a cambiar.</p> <p>Se recomienda que los nombres de las constantes sean en may\u00fasculas y con guiones bajos para separar palabras. Ejemplo:</p> <pre><code>const PI = 3.14159;\nconst MAXIMO_INTENTOS = 3;\n\nPI = 3.14;              // Error: Assignment to constant variable\nMAXIMO_INTENTOS = 5;    // Error: Assignment to constant variable\n</code></pre> <p>Otro uso com\u00fan de las constantes es almacenar objetos o arrays que no van a cambiar. Ejemplo:</p> <pre><code>const colores = ['rojo', 'verde', 'azul'];\nconst persona = {\n    nombre: 'Juan',\n    edad: 25\n};\n</code></pre>"},{"location":"01js/01_sintaxis/#ambito-de-las-variables","title":"\u00c1mbito de las variables","text":"<p>El \u00e1mbito de una variable es la parte del programa donde se puede acceder a ella. En Javascript las variables declaradas con <code>let</code> tienen un \u00e1mbito de bloque. Esto significa que s\u00f3lo se pueden acceder a ellas dentro del bloque en que se declaran.</p> <pre><code>{\n    let x = 5;\n    console.log(x);  // 5\n}\n\nconsole.log(x);  // Error: x is not defined\n</code></pre> <p>Las variables declaradas con <code>var</code> tienen un \u00e1mbito de funci\u00f3n. Esto significa que s\u00f3lo se pueden acceder a ellas dentro de la funci\u00f3n en que se declaran.</p> <pre><code>function miFuncion() {\n    var y = 6;\n    console.log(y);  // 6\n}\n\nconsole.log(y);  // Error: y is not defined\n</code></pre>"},{"location":"01js/01_sintaxis/#hoisting","title":"Hoisting","text":"<p>El hoisting es un comportamiento de Javascript que mueve las declaraciones de variables y funciones al principio del \u00e1mbito en que se encuentran. Esto significa que podemos usar una variable o funci\u00f3n antes de declararla.</p> <pre><code>console.log(miVariable);  // undefined\nvar miVariable = 5;\n</code></pre> <p>Esto es porque Javascript interpreta el c\u00f3digo de la siguiente forma:</p> <pre><code>var miVariable;\nconsole.log(miVariable);\nmiVariable = 5;\n</code></pre> <p>Esto s\u00f3lo ocurre con las variables declaradas con <code>var</code>. Las variables declaradas con <code>let</code> y <code>const</code> no tienen hoisting y si intentamos usarlas antes de declararlas se produce un error.</p> <pre><code>console.log(miVariable);  // Error: Cannot access 'miVariable' before initialization\nlet miVariable = 5;\n</code></pre>"},{"location":"01js/01_sintaxis/#tipos-de-datos-basicos","title":"Tipos de datos b\u00e1sicos","text":"<p>En Javascript ES2015 existen 9 tipos de datos:</p> <ul> <li>Primitivos:<ul> <li>number</li> <li>string</li> <li>boolean</li> <li>undefined</li> <li>null</li> <li>bigint</li> <li>symbol</li> </ul> </li> <li>No primitivos:<ul> <li>Object (Array, Function, Date, Map, Set, etc.)</li> </ul> </li> </ul> <p>Los primitivos son inmutables, es decir, no se pueden modificar. Si se modifica una variable que contiene un valor primitivo se crea una nueva variable con el nuevo valor.</p> <p>Para saber de qu\u00e9 tipo es el valor de una variable tenemos el operador <code>typeof</code>. Ej.:</p> <ul> <li><code>typeof 3</code> devuelve number</li> <li><code>typeof 'Hola'</code> devuelve string</li> </ul> <p>Existen dos valores especiales:</p> <ul> <li>undefined: es lo que vale una variable a la que no se ha asignado ning\u00fan valor.</li> <li>null: es un tipo de valor especial que podemos asignar a una variable. Es como un objeto vac\u00edo (<code>typeof null</code> devuelve object)</li> </ul> <p>Tambi\u00e9n hay otros valores especiales relacionados con operaciones con n\u00fameros:</p> <ul> <li>NaN (Not a Number): indica que el resultado de la operaci\u00f3n no puede ser convertido a un n\u00famero (ej. <code>'Hola' * 2</code>, aunque <code>'2' * 2</code> dar\u00eda <code>4</code> ya que se convierte la cadena <code>'2'</code> al n\u00famero <code>2</code>)</li> <li>Infinity y -Infinity: indica que el resultado es demasiado grande o demasiado peque\u00f1o (ej. <code>1 / 0</code> o <code>-1 / 0</code>)</li> </ul>"},{"location":"01js/01_sintaxis/#casting-de-variables","title":"Casting de variables","text":"<p>Como hemos dicho las variables pueden contener cualquier tipo de valor y, en las operaciones, Javascript al ser d\u00e9bilmente tipado, realiza autom\u00e1ticamente las conversiones necesarias para, si es posible, realizar la operaci\u00f3n. Por ejemplo:</p> <ul> <li><code>'4' / 2</code> devuelve <code>2</code> (convierte <code>'4'</code> en <code>4</code> y realiza la operaci\u00f3n)</li> <li><code>'23' - null</code> devuelve <code>23</code> (<code>23 - 0</code>)</li> <li><code>'23' - undefined</code> devuelve <code>NaN</code> (no puede convertir <code>undefined</code> a nada as\u00ed que no puede hacer la operaci\u00f3n)</li> <li><code>'23' * true</code> devuelve <code>23</code> (<code>23 * 1</code>)</li> <li><code>'23' * 'Hello'</code> devuelve <code>NaN</code> (no puede convertir <code>'Hello'</code>)</li> <li><code>23 + 'Hello'</code> devuelve <code>'23Hello'</code> (<code>+</code> es el operador de concatenaci\u00f3n as\u00ed que convierte <code>23</code> a <code>'23'</code> y los concatena)</li> <li><code>23 + '23'</code> devuelve <code>'2323'</code> (convierte el n\u00famero <code>23</code> a string, no al rev\u00e9s)</li> </ul> <p>Adem\u00e1s comentar que en Javascript todo son objetos por lo que todo tiene m\u00e9todos y propiedades. Veamos brevemente los tipos de datos b\u00e1sicos.</p>"},{"location":"01js/01_sintaxis/#number","title":"Number","text":"<p>S\u00f3lo hay un tipo de n\u00famero, no existen enteros y decimales. El tipo de dato para cualquier n\u00famero es number. El car\u00e1cter para la coma decimal es el . (como en ingl\u00e9s, as\u00ed que <code>23,12</code> debemos escribirlo como <code>23.12</code>).</p> <ul> <li> <p>Operadores aritm\u00e9ticos:</p> <ul> <li><code>+</code> suma.</li> <li><code>-</code> resta.</li> <li><code>*</code> multiplicaci\u00f3n.</li> <li><code>/</code> divisi\u00f3n.</li> <li><code>%</code> m\u00f3dulo (resto de la divisi\u00f3n).</li> <li><code>**</code> potencia.</li> </ul> </li> <li> <p>Operadores unarios:</p> <ul> <li><code>++</code> incremento.</li> <li><code>--</code> decremento.</li> </ul> </li> </ul> <p>Se pueden usar los operadores aritm\u00e9ticos junto al operador de asignaci\u00f3n <code>=</code>:</p> <ul> <li><code>+=</code> suma y asignaci\u00f3n.</li> <li><code>-=</code> resta y asignaci\u00f3n.</li> <li><code>*=</code> multiplicaci\u00f3n y asignaci\u00f3n.</li> <li><code>/=</code> divisi\u00f3n y asignaci\u00f3n.</li> <li><code>%=</code> m\u00f3dulo y asignaci\u00f3n.</li> </ul> <p>Algunos m\u00e9todos \u00fatiles de los n\u00fameros son:</p> <ul> <li> <p><code>.toFixed(num)</code>: redondea el n\u00famero a los decimales indicados.</p> <p>Ej.: <code>23.2376.toFixed(2)</code> devuelve <code>23.24</code></p> </li> <li> <p><code>.toLocaleString()</code>: devuelve el n\u00famero convertido al formato local.</p> <p>Ej.: <code>23.76.toLocaleString()</code> devuelve <code>\"23,76\"</code> (convierte el punto decimal en coma)</p> </li> </ul> <p>Se puede forzar la conversi\u00f3n de una cadena de texto a n\u00famero con la funci\u00f3n <code>Number(valor)</code>. Ejemplo <code>Number(\"23.12\")</code> devuelve <code>23.12</code></p> <p>Otras funciones \u00fatiles son:</p> <ul> <li><code>isNaN(valor)</code>: nos dice si el valor pasado es un n\u00famero (<code>false</code>) o no (<code>true</code>).</li> <li><code>isFinite(valor)</code>: devuelve <code>true</code> si el valor es finito (no es <code>Infinity</code> ni <code>-Infinity</code>). </li> <li> <p><code>parseInt(valor)</code>: convierte el valor pasado a un n\u00famero entero. Siempre que comience por un n\u00famero la conversi\u00f3n se podr\u00e1 hacer. Ej.:     <pre><code>parseInt(3.65)      // Devuelve 3\nparseInt('3.65')    // Devuelve 3\nparseInt('3 manzanas')    // Devuelve 3\nparseInt('tres')        // Devuelve NaN\n</code></pre></p> </li> <li> <p><code>parseFloat(valor)</code>: como la anterior pero conserva los decimales.</p> </li> </ul> <p>Precisi\u00f3n</p> <p>al sumar floats podemos tener problemas de precisi\u00f3n. Por ejemplo:</p> <pre><code>console.log(0.1 + 0.2)    // imprime 0.30000000000000004\n</code></pre> <p>Para evitarlo se pueden redondear los resultados (<code>(0.1 * 10 + 0.2 * 10) / 10</code>).</p>"},{"location":"01js/01_sintaxis/#string","title":"String","text":"<p>Las cadenas de texto van entre comillas simples o dobles, es indiferente. Podemos escapar un car\u00e0cter con <code>\\</code> (ej. <code>'Hola \\'Mundo\\''</code> devuelve <code>Hola 'Mundo'</code>).</p> <p>Para forzar la conversi\u00f3n a cadena se usa la funci\u00f3n <code>String(value)</code> (ej. <code>String(23)</code> devuelve <code>'23'</code>)</p> <p>El operador de concatenaci\u00f3n de cadenas es <code>+</code>.</p> <p>Algunos m\u00e9todos y propiedades de las cadenas son:</p> <ul> <li> <p><code>.length</code>: propiedad que almacena la longitud de la cadena, es decir, el n\u00famero de caracteres que contiene.</p> <pre><code>'Hola mundo'.length // devuelve 10\n</code></pre> </li> <li> <p><code>.at(index)</code>: devuelve el car\u00e1cter en la posici\u00f3n indicada (puede ser negativa).</p> <pre><code>'Hola mundo'.at(-2) // devuelve 'd'\n</code></pre> </li> <li> <p><code>.charAt(position)</code>: devuelve el car\u00e1cter en la posici\u00f3n indicada, si la posici\u00f3n no existe devuelve <code>''</code> (cadena vac\u00eda).</p> <pre><code>'Hola mundo'.charAt(2) // devuelve 'l'\n// OJO: Si la posici\u00f3n no existe devuelve ''\n</code></pre> </li> <li> <p><code>[]</code>: se puede acceder a un car\u00e1cter como si fuera un array. Funciona igual que <code>charAt</code> pero devuelve <code>undefined</code> si no existe.</p> <pre><code>'Hola mundo'[2] // devuelve 'l'\n// OJO: Si la posici\u00f3n no existe devuelve undefined\n</code></pre> </li> <li> <p><code>.indexOf(character)</code>: devuelve la posici\u00f3n de la primera aparici\u00f3n del car\u00e1cter indicado. Si no se encuentra devuelve <code>-1</code>.</p> <pre><code>'Hola mundo'.indexOf('l') // devuelve 2\n</code></pre> </li> <li> <p><code>.lastIndexOf(character)</code>: devuelve \u00faltima la posici\u00f3n de car\u00e1cter indicado. Si no se encuentra devuelve <code>-1</code>.</p> <pre><code>'Hola mundo'.lastIndexOf('o') // devuelve 9\n</code></pre> </li> <li> <p><code>.substring(from [, to])</code>: devuelve la subcadena desde la posici\u00f3n <code>from</code> hasta la posici\u00f3n <code>to</code> (sin incluirla). Si no se indica <code>to</code> devuelve hasta el final.</p> <pre><code>'Hola mundo'.substring(1,3) // devuelve 'ol'\n'Hola mundo'.substring(2) // devuelve 'la mundo'\n</code></pre> </li> <li> <p><code>.substr(from [, length])</code>: devuelve la subcadena desde la posici\u00f3n <code>from</code> y, de manera opcional, la longitud indicada, si no se indica devuelve hasta el final.</p> <pre><code>'Hola mundo'.substr(2,4) // devuelve 'la m'\n'Hola mundo'.substr(2) // devuelve 'la mundo'\n</code></pre> <p>Obsoleto (deprecated)</p> <p>Este m\u00e9todo est\u00e1 deprecado y no se recomienda su uso. Mas informaci\u00f3n</p> </li> <li> <p><code>.replace(pattern, replacement)</code>: reemplaza la primera aparici\u00f3n de <code>pattern</code> (un patr\u00f3n indicado) por <code>replacement</code> (el texto que lo reemplaza). Si se quiere reemplazar todas las apariciones se debe usar una expresi\u00f3n regular.</p> <pre><code>'Hola mundo'.replace('Hola', 'Adi\u00f3s') // devuelve 'Adi\u00f3s mundo'\n</code></pre> <p>Si se quiere reemplazar todas las apariciones se debe usar una expresi\u00f3n regular.</p> <pre><code>'Hola mundo'.replace(/o/g, 'O') // devuelve 'HOla mundO'\n</code></pre> <p>Expresiones regulares</p> <p>Las expresiones regulares son patrones que se utilizan para hacer coincidir combinaciones de caracteres en cadenas. Se pueden usar para validar, buscar y reemplazar texto. Se definen entre barras <code>/.../</code>.</p> <p>M\u00e1s informaci\u00f3n</p> </li> <li> <p><code>.toLocaleLowerCase()</code>: devuelve la cadena en min\u00fasculas.</p> <pre><code>'Hola mundo'.toLocaleLowerCase() // devuelve 'hola mundo'\n</code></pre> </li> <li> <p><code>.toLocaleUpperCase()</code>: devuelve la cadena en may\u00fasculas.</p> <pre><code>'Hola mundo'.toLocaleUpperCase() // devuelve 'HOLA MUNDO'\n</code></pre> </li> <li> <p><code>.localeCompare(string)</code>: retorna un n\u00famero que indica si la cadena a que se aplica el m\u00e9todo es anterior, posterior o igual a la cadena pasada como argumento.  <code>-1</code> si es anterior, <code>1</code> si es posterior y <code>0</code> si son iguales. Tiene en cuenta caracteres locales como acentos <code>\u00f1</code>, <code>\u00e7</code>, <code>\u00f3</code>, <code>\u00e0</code>, <code>\u00fc</code>, etc.</p> </li> </ul> <p>\u00datil para ordenar cadenas de texto alfab\u00e9ticamente.</p> <pre><code>```js\n'Hola'.localeCompare('Hola') // devuelve 0\n'Hola'.localeCompare('Adi\u00f3s') // devuelve 1\n'Hola'.localeCompare('Mundo') // devuelve -1\n```\n</code></pre> <ul> <li><code>.trim(string)</code>: elimina los espacios en blanco al principio y al final de la cadena. Los caracteres intermedios no se ven afectados.</li> </ul> <p>Se consideran caracteres en blanco: espacios, tabuladores, saltos de l\u00ednea, etc.</p> <pre><code>```js\n'   Hola mundo   '.trim() // devuelve 'Hola mundo'\n```\n</code></pre> <ul> <li> <p><code>.startsWith(string)</code>: devuelve <code>true</code> si la cadena comienza con el texto indicado.</p> <pre><code>'Hola mundo'.startsWith('Hol') // devuelve true\n</code></pre> </li> <li> <p><code>.endsWith(string)</code>: devuelve <code>true</code> si la cadena termina con el texto indicado.</p> <pre><code>'Hola mundo'.endsWith('Hol') // devuelve false\n</code></pre> </li> <li> <p><code>.includes(string)</code>: devuelve <code>true</code> si la cadena contiene el texto indicado.</p> <pre><code>'Hola mundo'.includes('mun') // devuelve true\n</code></pre> </li> <li> <p><code>.repeat(times)</code>: repite la cadena el n\u00famero de veces indicado.</p> <pre><code>'Hola mundo'.repeat(3) // devuelve 'Hola mundoHola mundoHola mundo'\n</code></pre> </li> <li> <p><code>.split(separator)</code>: divide la cadena en un array de subcadenas, usando el separador indicado, y devuelve el array resultante.</p> <pre><code>'Hola mundo'.split(' ') // devuelve ['Hola', 'mundo']\n</code></pre> <p>Si se le pasa como separador una cadena vac\u00eda (<code>''</code>), devuelve un array con cada car\u00e1cter de la cadena.</p> <pre><code>'Hola mundo'.split('') // devuelve ['H', 'o', 'l', 'a', ' ', 'm', 'u', 'n', 'd', 'o']\n</code></pre> </li> </ul> <p>Podemos probar los diferentes m\u00e9todos en la p\u00e1gina de w3schools.</p>"},{"location":"01js/01_sintaxis/#template-literals","title":"Template literals","text":"<p>Desde ES2015 tambi\u00e9n podemos poner una cadena entre <code>`</code> (acento grave) y en ese caso podemos poner dentro variables y expresiones que ser\u00e1n evaluadas al ponerlas dentro de <code>${ }</code>. Tambi\u00e9n se respetan los saltos de l\u00ednea, tabuladores, etc que haya dentro. Ejemplo:</p> <pre><code>let edad=25;\n\nconsole.log(\n`El usuario tiene:\n\n${edad} a\u00f1os`)\n</code></pre> <p>Mostrar\u00e1 en la consola:</p> <p>El usuario tiene:</p> <p>25 a\u00f1os</p>"},{"location":"01js/01_sintaxis/#boolean","title":"Boolean","text":"<p>Los valores booleanos son <code>true</code> y <code>false</code>. Para convertir algo a booleano se usar Boolean(valor) aunque tambi\u00e9n puede hacerse con la doble negaci\u00f3n (<code>!!</code>). Cualquier valor se evaluar\u00e1 a <code>true</code> excepto <code>0</code>, <code>NaN</code>, <code>null</code>, <code>undefined</code> o una cadena vac\u00eda (<code>''</code>) que se evaluar\u00e1n a <code>false</code>.</p> <p>Los operadores l\u00f3gicos son <code>!</code> (negaci\u00f3n), <code>&amp;&amp;</code> (and), <code>||</code> (or).</p> <p>Para comparar valores tenemos <code>==</code> y <code>===</code>. La triple igualdad devuelve <code>true</code> si son igual valor y del mismo tipo. Como Javascript hace conversiones de tipos autom\u00e1ticas, conviene usar la <code>===</code> para evitar cosas como:</p> <ul> <li><code>'3' == 3</code> true</li> <li><code>3 == 3.0</code> true</li> <li><code>0 == false</code> true</li> <li><code>'' == false</code> true</li> <li><code>' ' == false</code> true</li> <li><code>[] == false</code> true</li> <li><code>null == false</code> false</li> <li><code>undefined == false</code> false</li> <li><code>undefined == null</code> true</li> </ul> <p>Tambi\u00e9n existen dos operadores de diferente: <code>!=</code> y <code>!==</code> que se comportan de forma similar a los anteriores.</p> <p>Los operadores relacionales son <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>. Cuando se compara un n\u00famero y una cadena \u00e9sta se convierte a n\u00famero y no al rev\u00e9s (<code>23 &gt; '5'</code> devuelve true, aunque <code>'23' &lt; '5'</code> devuelve false) </p>"},{"location":"01js/01_sintaxis/#control-de-flujo","title":"Control de flujo","text":""},{"location":"01js/01_sintaxis/#if","title":"<code>if</code>","text":"<p>El if es como en la mayor\u00eda de lenguajes. Puede tener asociado un else y pueden concatenarse varias condiciones con else if.</p> <pre><code>if (condicion) {\n    ...\n} else if (condicion2) {\n    ...\n} else if (condicion3) {\n    ...\n} else {\n    ...\n}\n</code></pre> <p>Ejemplo:</p> <pre><code>if (edad &lt; 18) {\n    console.log('Es menor de edad');\n} else if (edad &gt; 65) {\n    console.log('Jubilaci\u00f3n');\n} else {\n    console.log('Edad correcta');\n}\n</code></pre>"},{"location":"01js/01_sintaxis/#operador-ternario","title":"Operador ternario","text":"<p>Es una forma abreviada de hacer un <code>if</code>. Se compone de la condici\u00f3n, seguida de un signo de interrogaci\u00f3n <code>?</code>, seguida de la expresi\u00f3n que se ejecutar\u00e1 si la condici\u00f3n es <code>true</code>, seguida de dos puntos <code>:</code> y la expresi\u00f3n que se ejecutar\u00e1 si la condici\u00f3n es <code>false</code>.</p> <p>Sintaxis:</p> <pre><code>(condicion) ? expresionTrue : expresionFalse;\n</code></pre> <p>Ejemplo:</p> <pre><code>let esMayorDeEdad = (edad&gt;18) ? \"mayor\" : \"menor\";\n</code></pre>"},{"location":"01js/01_sintaxis/#switch","title":"<code>switch</code>","text":"<p>El <code>switch</code> es una forma de simplificar un <code>if</code> cuando se tienen muchas condiciones. Se eval\u00faa una expresi\u00f3n y se ejecuta el bloque de c\u00f3digo que corresponda al valor de la expresi\u00f3n.</p> <p>Hay que poner <code>break</code> al final de cada bloque para que no contin\u00fae evaluando las siguientes condiciones. Si no se pone <code>break</code> se ejecutar\u00e1n todas las sentencias que haya debajo de la condici\u00f3n que se cumpla.</p> <pre><code>switch(colorLetra) {\n    case 'blanco':\n    case 'amarillo':    // Ambos colores entran aqu\u00ed\n        colorFondo = 'azul';\n        break;\n    case 'azul':\n        colorFondo = 'amarillo';\n        break;\n    default:            // Para cualquier otro valor\n        colorFondo = 'negro';\n}\n</code></pre> <p>Javascript permite que los case en lugar de evaluar valores pueda evaluar condiciones l\u00f3gicas.</p> <pre><code>switch (true) {\n    case age &lt; 18:\n        console.log('Eres muy joven para entrar');\n        break;\n    case age &lt; 65:\n        console.log('Puedes entrar');\n        break;\n    default:\n        console.log('Eres muy mayor para entrar');\n}\n</code></pre>"},{"location":"01js/01_sintaxis/#bucles","title":"Bucles","text":""},{"location":"01js/01_sintaxis/#while","title":"while","text":"<p>Realiza el bloque de operaciones mientras se cumpla la condici\u00f3n indicada. Se ejecuta 0 o m\u00e1s veces.</p> <p>Sintaxis:</p> <pre><code>while (condicion) {\n    // sentencias\n}\n</code></pre> <p>Ejemplo:</p> <pre><code>var value = 1;\nwhile (value &lt;= 5) { // Imprime 1 2 3 4 5\n    console.log(value++);\n}\n</code></pre>"},{"location":"01js/01_sintaxis/#do-while","title":"do .. while","text":"<p>Igual que while pero se ejecuta, al menos, 1 o m\u00e1s veces.</p> <p>Sintaxis:</p> <pre><code>do {\n    // sentencias\n} while (condicion)\n</code></pre> <p>Ejemplo:</p> <pre><code>var value = 1;\ndo { // Imprime 1 2 3 4 5\n    console.log(value++);\n} while (value &lt;= 5);\n</code></pre>"},{"location":"01js/01_sintaxis/#for","title":"for","text":"<p>La forma t\u00edpica de utilizar un bucle <code>for</code>, es creando una variable contador que controla las veces que se ejecuta bucle:</p> <p>Sintaxis:</p> <pre><code>for (inicializaci\u00f3n; condici\u00f3n; incremento) {\n    // sentencias\n}\n</code></pre> <p>Ejemplo:</p> <pre><code>let datos = [5, 23, 12, 85]\nlet sumaDatos = 0;\n\nfor (let i = 0; i &lt; datos.length; i++) {\n    sumaDatos += datos[i];\n}  \n// El valor de sumaDatos ser\u00e1 125\n</code></pre>"},{"location":"01js/01_sintaxis/#for-in","title":"for .. in","text":"<p>El bucle se ejecuta una vez para cada elemento del un array (o propiedad de un objeto) y se crea una variable contador que toma como valores la posici\u00f3n del elemento en el array.</p> <p>Sintaxis:</p> <pre><code>for (let contador in array) {\n    // sentencias\n}\n</code></pre> <p>Ejemplo:</p> <pre><code>let datos = [5, 23, 12, 85]\nlet sumaDatos = 0;\n\nfor (let indice in datos) {\n    sumaDatos += datos[indice];     // los valores que toma indice son 0, 1, 2, 3\n}  \n// El valor de sumaDatos ser\u00e1 125\n</code></pre> <p>Tambi\u00e9n sirve para recorrer las propiedades de un objeto:</p> <pre><code>let profe = {\n    nom: 'Juan',\n    ape1: 'Pla',\n    ape2: 'Ruiz'\n}\n\nlet nombre = '';\n\nfor (var campo in profe) {\n   nombre += profe.campo + ' '; // o profe[campo];\n}  \n// El valor de nombre ser\u00e1 'Juan Pla Ruiz'\n</code></pre>"},{"location":"01js/01_sintaxis/#for-of","title":"for .. of","text":"<p>Es similar al <code>for .. in</code> pero la variable contador en vez de tomar como valor cada \u00edndice toma cada elemento. Es nuevo en ES2015:</p> <p>Sintaxis:</p> <pre><code>for (let valor of array) {\n    // sentencias\n}\n</code></pre> <p>Ejemplo:</p> <pre><code>let datos = [5, 23, 12, 85]\nlet sumaDatos = 0;\n\nfor (let valor of datos) {\n    sumaDatos += valor;       // los valores que toma valor son 5, 23, 12, 85\n}  \n// El valor de sumaDatos ser\u00e1 125\n</code></pre> <p>Tambi\u00e9n sirve para recorrer los caracteres de una cadena de texto:</p> <pre><code>let cadena = 'Hola';\n\nfor (let letra of cadena) {\n    console.log(letra);     // los valores de letra son 'H', 'o', 'l', 'a'\n}  \n</code></pre>"},{"location":"01js/01_sintaxis/#buenas-practicas","title":"Buenas pr\u00e1cticas","text":"<p>Javascript  permite hacer muchas cosas que otros lenguajes no, por lo que se debe tener especial cuidado para no cometer errores de los que suele avisar.</p>"},{"location":"01js/01_sintaxis/#use-strict","title":"'use strict'","text":"<p>Si ponemos siempre esta sentencia al principio de nuestro c\u00f3digo el int\u00e9rprete nos avisar\u00e1 si usamos una variable sin declarar (muchas veces por equivocarnos al escribir su nombre), principalmente se evitan errores de este tipo:</p> <pre><code>'use strict';\nlet x = 3;\ny = 4;  // Error: y is not defined\n</code></pre>"},{"location":"01js/01_sintaxis/#variables_1","title":"Variables","text":"<p>Algunas de las pr\u00e1cticas que deber\u00edamos seguir respecto a las variables son:</p> <ul> <li>Elegir un buen nombre es fundamental. Evitar abreviaturas o nombres sin significado (<code>a</code>, <code>b</code>, <code>c</code>, etc.)</li> <li>Evitar en lo posible variables globales.</li> <li>Usar let para declarar variables y const para constantes.</li> <li>Declarar todas las variables al principio.</li> <li>Inicializar las variables al declararlas.</li> <li>Evitar conversiones de tipo autom\u00e1ticas.</li> <li>Usar la notaci\u00f3n camelCase para los nombres de las variables.</li> <li>Utilizar nombres en ingl\u00e9s siempre que sea posible.</li> </ul> <p>Tambi\u00e9n es conveniente, por motivos de eficiencia no usar objetos <code>Number</code>, <code>String</code> o <code>Boolean</code> sino los tipos primitivos (no usar <code>let numero = new Number(5)</code> sino <code>let numero = 5</code>) y lo mismo al crear arrays, objetos o expresiones regulares (no usar <code>let miArray = new Array()</code> sino <code>let miArray = []</code>).</p>"},{"location":"01js/01_sintaxis/#constantes_1","title":"Constantes","text":"<p>Se puede aplicar lo visto en el apartado anterior a las constantes, excepto en el nombre que se recomienda que sea en may\u00fasculas y con guiones bajos para separar palabras. Ejemplo:</p> <pre><code>const PI = 3.14159;\nconst MAXIMO_INTENTOS = 3;\n</code></pre>"},{"location":"01js/01_sintaxis/#otras","title":"Otras","text":"<p>Algunas reglas m\u00e1s que se deben seguir son:</p> <ul> <li> <p>Ser coherentes a la hora de escribir c\u00f3digo: por ejemplo podemos poner (recomendado) o no espacios antes y despu\u00e9s del <code>=</code> en una asignaci\u00f3n pero debemos hacerlo siempre igual. Existen muchas gu\u00edas de estilo como por ejemplo:</p> <ul> <li>Google.</li> <li>Idiomatic.</li> <li>Airbnb.</li> </ul> <p>Para obligarnos a seguir las reglas podemos usar alguna herramienta linter.</p> </li> <li> <p>Es conveniente para mejorar la legibilidad de nuestro c\u00f3digo separar las l\u00edneas de m\u00e1s de 80 caracteres.</p> </li> <li>Usar <code>===</code> en las comparaciones.</li> <li>Dar un valor por defecto a las variables.</li> <li>Comentar el c\u00f3digo cuando sea necesario, pero mejor que sea lo suficientemente claro como para no necesitar comentarios.</li> <li>No mezclar espacios y tabuladores para la indentaci\u00f3n.</li> <li>Evitar c\u00f3digo muerto (c\u00f3digo que no se ejecuta) o duplicado.</li> </ul>"},{"location":"01js/01_sintaxis/#clean-code","title":"Clean Code","text":"<p>Estas y otras muchas recomendaciones se recogen el el libro Clean Code de Robert C. Martin y en muchos otros libros y art\u00edculos. Aqu\u00ed ten\u00e9is un peque\u00f1o resumen traducido al castellano: - https://github.com/devictoribero/clean-code-javascript</p>"},{"location":"01js/02_funciones/","title":"1.2 Funciones","text":"<p>Al igual que en otros lenguajes de programaci\u00f3n, en Javascript las funciones son bloques de c\u00f3digo reutilizable que se pueden llamar para realizar una tarea espec\u00edfica. Permiten dividir el c\u00f3digo en partes m\u00e1s peque\u00f1as y f\u00e1ciles de manejar, lo que facilita la lectura, el mantenimiento y la depuraci\u00f3n del c\u00f3digo.</p> <p>Debemos tener en cuenta que las funciones pueden recibir par\u00e1metros de entrada y devolver valores de salida.</p> <p>Al ser un lenguaje de tipado din\u00e1mico, no es necesario especificar el tipo de los par\u00e1metros o el tipo de retorno, por lo que se pueden pasar diferentes tipos de datos a las funciones, lo que las hace muy flexibles pero tambi\u00e9n puede llevar a errores si no se manejan adecuadamente.</p> <p>Se pueden definir funciones de distintas maneras.</p>"},{"location":"01js/02_funciones/#declaracion-de-funcion","title":"Declaraci\u00f3n de funci\u00f3n","text":"<p>Se define la funci\u00f3n con la palabra clave <code>function</code>, seguida del nombre de la funci\u00f3n y par\u00e9ntesis. Dentro de los par\u00e9ntesis se pueden incluir par\u00e1metros.</p> Declaraci\u00f3n de funci\u00f3n<pre><code>function nombreFuncion(parametro1, parametro2) {\n    // C\u00f3digo a ejecutar\n}\n</code></pre>"},{"location":"01js/02_funciones/#expresion-de-funcion","title":"Expresi\u00f3n de funci\u00f3n","text":"<p>Se define la funci\u00f3n como una expresi\u00f3n, que puede ser an\u00f3nima o nombrada.</p> Expresi\u00f3n de funci\u00f3n<pre><code>const nombreFuncion = function(parametro1, parametro2) {\n    // C\u00f3digo a ejecutar\n};\n</code></pre>"},{"location":"01js/02_funciones/#funciones-flecha","title":"Funciones flecha <code>() =&gt; {}</code>","text":"<p>Son una forma m\u00e1s concisa de escribir funciones en Javascript, introducidas en ES2015. Se definen utilizando la sintaxis de flecha <code>=&gt;</code>.</p> <p>Tambi\u00e9n son conocidas como arrow functions, funciones an\u00f3nimas o funciones lambda.</p> Funci\u00f3n flecha<pre><code>const nombreFuncion = (parametro1, parametro2) =&gt; {\n    // C\u00f3digo a ejecutar\n};\n</code></pre> <p>Si la funci\u00f3n solo contiene una l\u00ednea de c\u00f3digo, se puede omitir el bloque <code>{ }</code> y la palabra clave <code>return</code>.</p> Funci\u00f3n flecha abreviada<pre><code>const nombreFuncion = (parametro1, parametro2) =&gt; resultado;\n</code></pre> <p>Adem\u00e1s, si la funci\u00f3n s\u00f3lo tiene un par\u00e1metro, se pueden omitir los par\u00e9ntesis.</p> Funci\u00f3n flecha abreviada con un solo par\u00e1metro<pre><code>const nombreFuncion = parametro =&gt; resultado;\n</code></pre>"},{"location":"01js/02_funciones/#comparacion-de-declaracion-de-funciones","title":"Comparaci\u00f3n de declaraci\u00f3n de funciones","text":"<p>En los siguientes ejemplos se muestran diferentes formas de declarar una funci\u00f3n que suma dos n\u00fameros. Todas las formas son equivalentes y devuelven el mismo resultado.</p> Declaraci\u00f3n de funci\u00f3n<pre><code>function sumar(a, b) {\n    return a + b;\n}\n\n// uso\nsumar(5, 3); // Devuelve: 8\n</code></pre> Expresi\u00f3n de funci\u00f3n<pre><code>const sumar = function(a, b) {\n    return a + b;\n};\n\n// uso\nsumar(5, 3); // Devuelve: 8\n</code></pre> Funci\u00f3n flecha<pre><code>const sumar = (a, b) =&gt; {\n  return a + b;\n};\n\n// uso\nsumar(5, 3); // Devuelve: 8\n</code></pre> Funci\u00f3n flecha abreviada. Esta forma es v\u00e1lida si la funci\u00f3n solo tiene una l\u00ednea de c\u00f3digo<pre><code>const sumar = (a, b) =&gt; a + b;\n\n// uso\nsumar(5, 3); // Devuelve: 8\n</code></pre> Funci\u00f3n flecha abreviada con un solo par\u00e1metro<pre><code>const incrementar = a =&gt; a + 1;\n\n// uso\nincrementar(5); // Devuelve: 6\n</code></pre>"},{"location":"01js/02_funciones/#llamar-a-una-funcion","title":"Llamar a una funci\u00f3n","text":"<p>Para ejecutar una funci\u00f3n, se utiliza su nombre seguido de par\u00e9ntesis. Si la funci\u00f3n tiene par\u00e1metros, se deben pasar los argumentos correspondientes.</p> Llamada a una funci\u00f3n<pre><code>nombreFuncion(arg1, arg2);\n</code></pre>"},{"location":"01js/02_funciones/#parametros-y-argumentos","title":"Par\u00e1metros y argumentos","text":"<p>Los par\u00e1metros son variables que se definen en la declaraci\u00f3n de la funci\u00f3n, mientras que los argumentos son los valores que se pasan a la funci\u00f3n al momento de llamarla.</p> Ejemplo de par\u00e1metros y argumentos<pre><code>function saludar(nombre) {   // par\u00e1metro: nombre\n    console.log(`Hola, ${nombre}!`);\n}\n\nsaludar('Juan'); // argumento: 'Juan'\n</code></pre> <p>Si no se pasan argumentos, los par\u00e1metros tendr\u00e1n el valor <code>undefined</code>.</p>"},{"location":"01js/02_funciones/#acceso-a-los-parametros","title":"Acceso a los par\u00e1metros","text":"<p>Dentro de la funci\u00f3n, se puede acceder a los par\u00e1metros como si fueran variables locales, pero tambi\u00e9n se puede utilizar el array <code>arguments</code> para acceder a todos los argumentos pasados a la funci\u00f3n.</p> Ejemplo de acceso a los argumentos<pre><code>function mostrarArgumentos() {\n    console.log(arguments.length);\n    console.log(arguments);\n}\n\nmostrarArgumentos(1, 2, 3); // Salida: 3, [1, 2, 3]\n</code></pre>"},{"location":"01js/02_funciones/#parametros-por-defecto","title":"Par\u00e1metros por defecto","text":"<p>Se pueden establecer valores por defecto para los par\u00e1metros en caso de que no se pasen argumentos al llamar a la funci\u00f3n.</p> Ejemplo de par\u00e1metros por defecto<pre><code>function saludar(nombre = 'invitado') {\n    console.log(`Hola, ${nombre}!`);\n}\n\nsaludar();      // Hola, invitado!\nsaludar('Ana'); // Hola, Ana!\n</code></pre>"},{"location":"01js/02_funciones/#retorno-de-valores","title":"Retorno de valores","text":"<p>Las funciones pueden devolver valores utilizando la palabra clave <code>return</code>. Cuando se encuentra un <code>return</code>, la ejecuci\u00f3n de la funci\u00f3n se detiene y se devuelve el valor especificado.</p> Ejemplo de retorno de valores<pre><code>function sumar(a, b) {\n    return a + b;\n}\n\nconsole.log(sumar(5, 3)); // Salida: 8\n</code></pre> Ejemplo de uso del retorno<pre><code>function saludar(nombre) {\n    return `Hola, ${nombre}!`;\n}\n\nlet saludo = saludar('Juan');\n\nconsole.log(saludo); // Salida: Hola, Juan!\n</code></pre> Ejemplo de retorno de valores<pre><code>function calcularAreaRectangulo(base, altura) {\n    return base * altura;\n}\n\nconst area = calcularAreaRectangulo(5, 10);\n\nconsole.log(area); // Salida: 50\n</code></pre>"},{"location":"01js/02_funciones/#funciones-como-parametros","title":"Funciones como par\u00e1metros","text":"<p>Las funciones tambi\u00e9n pueden ser pasadas como argumentos a otras funciones. Esto permite crear funciones m\u00e1s flexibles y reutilizables.</p> Ejemplo de funciones como par\u00e1metros<pre><code>function operar(a, b, operacion) {\n    return operacion(a, b);\n}\n\nfunction sumar(x, y) {\n    return x + y;\n}\n\nfunction restar(x, y) {\n    return x - y;\n}\n\nconsole.log(operar(5, 3, sumar)); // Salida: 8\nconsole.log(operar(5, 3, restar)); // Salida: 2\n</code></pre>"},{"location":"01js/02_funciones/#funciones-anonimas","title":"Funciones an\u00f3nimas","text":"<p>Las funciones an\u00f3nimas son funciones que no tienen un nombre. Se utilizan com\u00fanmente como argumentos de otras funciones o en expresiones de funci\u00f3n.</p> Ejemplo de funci\u00f3n an\u00f3nima<pre><code>// setTimeout() ejecuta la funci\u00f3n despu\u00e9s de un cierto tiempo\n// se le pasa una funci\u00f3n an\u00f3nima como primer argumento\n// y el tiempo en milisegundos como segundo argumento\n\nsetTimeout(function() {\n    console.log('Hola despu\u00e9s de 2 segundos');\n}, 2000);\n</code></pre> Ejemplo de funci\u00f3n an\u00f3nima con funci\u00f3n flecha<pre><code>setTimeout(\n    () =&gt; console.log('Hola despu\u00e9s de 2 segundos'),\n    2000);\n</code></pre>"},{"location":"01js/02_funciones/#funciones-recursivas","title":"Funciones recursivas","text":"<p>Las funciones recursivas son aquellas que se llaman a s\u00ed mismas. Se utilizan para resolver problemas que pueden ser divididos en subproblemas m\u00e1s peque\u00f1os.</p> Ejemplo de funci\u00f3n recursiva<pre><code>function factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5)); // Salida: 120\n</code></pre> <p>Como se mencion\u00f3 anteriormente, las funciones flecha son una forma m\u00e1s concisa de escribir funciones en Javascript. A continuaci\u00f3n, se muestra el ejemplo anterior utilizando una funci\u00f3n flecha. Aunque en este ejemplo puede resultar menos legible.</p> Ejemplo de funci\u00f3n recursiva abreviada<pre><code>const factorial = n =&gt; n === 0 ? 1 : n * factorial(n - 1);\n\nconsole.log(factorial(5)); // Salida: 120\n</code></pre> <p>Recursi\u00f3n</p> <p>Se recomienda tener cuidado con las funciones recursivas, ya que pueden llevar a un desbordamiento de pila si no se manejan adecuadamente. Por lo que es buena pr\u00e1ctica evitar la recursi\u00f3n, y si es posible, buscar una soluci\u00f3n iterativa.</p>"},{"location":"01js/02_funciones/#alcance-de-las-funciones","title":"Alcance de las funciones","text":"<p>El alcance de una funci\u00f3n se refiere a la visibilidad de las variables dentro de la funci\u00f3n. Las variables definidas dentro de una funci\u00f3n son locales y no son accesibles fuera de ella.</p> Ejemplo de alcance de funciones<pre><code>function ejemplo() {\n    let x = 10; // Variable local\n    console.log(x);\n}\n\nejemplo(); // Salida: 10\nconsole.log(x); // Error: x is not defined\n</code></pre>"},{"location":"01js/02_funciones/#funciones-de-orden-superior","title":"Funciones de orden superior","text":"<p>Las funciones de orden superior son aquellas que pueden recibir otras funciones como argumentos o devolver funciones como resultado. Esto permite crear patrones de programaci\u00f3n m\u00e1s avanzados.</p> Ejemplo de funci\u00f3n de orden superior<pre><code>function crearMultiplicador(factor) {\n    return function(x) {\n        return x * factor;\n    };\n}\n\nconst multiplicarPor2 = crearMultiplicador(2);\nconsole.log(multiplicarPor2(5)); // Salida: 10\n\nconst multiplicarPor3 = crearMultiplicador(3);\nconsole.log(multiplicarPor3(5)); // Salida: 15\n</code></pre>"},{"location":"01js/03_objetos/","title":"1.3 Objetos <code>{ }</code>","text":"<p>Em Javascript un objeto es una colecci\u00f3n de propiedades, donde cada propiedad es una asociaci\u00f3n entre una clave (nombre) y un valor. Los objetos son una de las estructuras de datos m\u00e1s importantes en Javascript y se utilizan para almacenar informaci\u00f3n relacionada.</p>"},{"location":"01js/03_objetos/#creacion-de-objetos","title":"Creaci\u00f3n de objetos","text":"<p>Existen varias formas de crear objetos en Javascript:</p>"},{"location":"01js/03_objetos/#notacion-de-objeto-literal","title":"Notaci\u00f3n de objeto literal","text":"<p>La forma m\u00e1s sencilla de crear un objeto es utilizando la notaci\u00f3n de objeto literal.</p> Ejemplo de objeto literal<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30,\n    ciudad: 'Madrid'\n};\n</code></pre> <p>Otra forma de crear un objeto para agregar propiedades despu\u00e9s es:</p> Ejemplo de constructor de objetos<pre><code>let persona = {};\npersona.nombre = 'Juan';\npersona.edad = 30;\npersona.ciudad = 'Madrid';\n</code></pre>"},{"location":"01js/03_objetos/#constructor-de-objetos","title":"Constructor de objetos","text":"<p>Tambi\u00e9n puedes crear objetos utilizando la funci\u00f3n constructora <code>Object()</code>.</p> Ejemplo de constructor de objetos<pre><code>let persona = new Object();\npersona.nombre = 'Juan';\npersona.edad = 30;\npersona.ciudad = 'Madrid';\n</code></pre>"},{"location":"01js/03_objetos/#constructor-de-funciones","title":"Constructor de funciones","text":"<p>Puedes definir un constructor de funciones para crear m\u00faltiples objetos con la misma estructura.</p> Ejemplo de constructor de funciones<pre><code>function Persona(nombre, edad, ciudad) {\n    this.nombre = nombre;\n    this.edad = edad;\n    this.ciudad = ciudad;\n}\n\nlet persona1 = new Persona('Juan', 30, 'Madrid');\nlet persona2 = new Persona('Ana', 25, 'Barcelona');\n</code></pre>"},{"location":"01js/03_objetos/#propiedades-de-objetos","title":"Propiedades de objetos","text":"<p>Las propiedades de un objeto son pares clave-valor, donde la clave es una cadena y el valor puede ser cualquier tipo de dato.</p>"},{"location":"01js/03_objetos/#acceso-a-propiedades","title":"Acceso a propiedades","text":"<p>Puedes acceder a las propiedades de un objeto utilizando la notaci\u00f3n de punto o la notaci\u00f3n de corchetes. La notaci\u00f3n de corchetes es \u00fatil cuando la clave es una variable o una cadena que no es un identificador v\u00e1lido.</p> Acceso a propiedades<pre><code>console.log(persona.nombre); // Notaci\u00f3n de punto\n\nconsole.log(persona['edad']); // Notaci\u00f3n de corchetes\n\nlet clave = 'ciudad';\nconsole.log(persona[clave]); // Acceso con variable\n</code></pre>"},{"location":"01js/03_objetos/#modificacion-de-propiedades","title":"Modificaci\u00f3n de propiedades","text":"<p>Puedes modificar las propiedades de un objeto de la misma manera que accedes a ellas.</p> Modificaci\u00f3n de propiedades<pre><code>persona.edad = 31; // Modificaci\u00f3n con notaci\u00f3n de punto\npersona['ciudad'] = 'Valencia'; // Modificaci\u00f3n con notaci\u00f3n de corchetes\n</code></pre>"},{"location":"01js/03_objetos/#eliminacion-de-propiedades","title":"Eliminaci\u00f3n de propiedades","text":"<p>Puedes eliminar propiedades de un objeto utilizando la palabra clave <code>delete</code>. Esto elimina la propiedad y su valor asociado.</p> Eliminaci\u00f3n de propiedades<pre><code>delete persona.edad; // Eliminar propiedad 'edad'\n</code></pre>"},{"location":"01js/03_objetos/#metodos","title":"M\u00e9todos","text":"<p>Los objetos tambi\u00e9n pueden tener m\u00e9todos, propiedades que contienen funciones.</p> M\u00e9todos de objetos<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30,\n    saludar: function() {\n        console.log(`Hola, mi nombre es ${this.nombre}`);\n    }\n};\n\npersona.saludar(); // Salida: Hola, mi nombre es Juan\n</code></pre>"},{"location":"01js/03_objetos/#ejemplo-completo","title":"Ejemplo completo","text":"Ejemplo completo de objeto<pre><code>function Persona(nombre, edad, ciudad) {\n    this.nombre = nombre;\n    this.edad = edad;\n    this.ciudad = ciudad;\n    this.saludar = function() {\n        console.log(`Hola, mi nombre es ${this.nombre}`);\n    };\n}\n\nlet persona1 = new Persona('Juan', 30, 'Madrid');\nlet persona2 = new Persona('Ana', 25, 'Barcelona');\n\npersona1.saludar(); // Hola, mi nombre es Juan\npersona2.saludar(); // Hola, mi nombre es Ana\n\npersona1.edad = 31; // Modificar propiedad\nconsole.log(persona1.edad); // 31\n\ndelete persona2.ciudad; // Eliminar propiedad\nconsole.log(persona2.ciudad); // undefined\n</code></pre>"},{"location":"01js/03_objetos/#tostring-y-valueof","title":".toString() y .valueOf()","text":"<p>Existen m\u00e9todos predefinidos como <code>.toString()</code> y <code>.valueOf()</code>, que se utilizan para convertir un objeto a una cadena o a un valor primitivo, respectivamente.</p> Ejemplo de .toString()<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30,\n    toString: function() {\n        return `${this.nombre}, ${this.edad} a\u00f1os`;\n    }\n};\n\nconsole.log(persona.toString()); // Juan, 30 a\u00f1os\n</code></pre> Ejemplo de .valueOf()<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30,\n    valueOf: function() {\n        return this.edad;\n    }\n};\n\nconsole.log(persona.valueOf()); // 30\n</code></pre>"},{"location":"01js/03_objetos/#destructuracion-de-objetos","title":"Destructuraci\u00f3n de objetos","text":"<p>La destructuraci\u00f3n de objetos es una forma de extraer valores de un objeto y asignarlos a variables.</p> Ejemplo de destructuraci\u00f3n<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30,\n    ciudad: 'Madrid'\n};\n\nlet { nombre, edad } = persona; // Destructuraci\u00f3n, asigna nombre y edad a variables\n\nconsole.log(nombre); // Juan\nconsole.log(edad); // 30\n</code></pre> <p>Tambi\u00e9n puedes asignar un valor predeterminado en caso de que la propiedad no exista o renombrar la variable.</p> <ul> <li>El valor predeterminado se asigna si la propiedad no est\u00e1 definida en el objeto.</li> <li>Renombrar la variable se hace con la sintaxis <code>nombre: nuevoNombre</code>.</li> </ul> Ejemplo de destructuraci\u00f3n con renombrado y valor predeterminado<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30,\n    ciudad: 'Madrid'\n};\n\nlet { nombre: name, edad, pais = 'Espa\u00f1a' } = persona;\n\nconsole.log(name); // Juan\nconsole.log(pais); // Espa\u00f1a\n</code></pre>"},{"location":"01js/03_objetos/#reestructuracion-de-objetos","title":"Reestructuraci\u00f3n de objetos","text":"<p>La reestructuraci\u00f3n de objetos es el proceso de crear un nuevo objeto a partir de las propiedades de un objeto existente. Esto se puede hacer utilizando el operador de propagaci\u00f3n (<code>...</code>).</p> Ejemplo de reestructuraci\u00f3n<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30,\n    ciudad: 'Madrid'\n};\n\nlet usuario = {\n    ...persona,         // Reestructuraci\u00f3n, copia las propiedades de persona\n    pais: 'Espa\u00f1a',\n    ocupacion: 'Desarrollador'\n};\n</code></pre>"},{"location":"01js/03_objetos/#estructuras-anidadas","title":"Estructuras anidadas","text":"<p>Los objetos pueden contener otros objetos, lo que permite crear estructuras de datos m\u00e1s complejas.</p> Ejemplo de objeto anidado<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30,\n    direccion: {\n        ciudad: 'Madrid',\n        codigoPostal: '28001'\n    }\n};\n\nconsole.log(persona.direccion.ciudad); // Salida: Madrid\n</code></pre>"},{"location":"01js/03_objetos/#serializacion-de-objetos","title":"Serializaci\u00f3n de objetos","text":"<p>La serializaci\u00f3n es el proceso de convertir un objeto en una cadena de texto, lo que permite almacenar o transmitir el objeto. En JavaScript, se puede usar <code>JSON.stringify(objeto)</code> para serializar un objeto y <code>JSON.parse(texto)</code> para deserializarlo.</p> <p>Parsear</p> <p>En lenguaje coloquial, \"parsear\" o \"parseo\" (del ingl\u00e9s parse) significa deserializar, es decir, convertir una cadena de texto en un objeto.</p> Ejemplo de serializaci\u00f3n<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30\n};\n\nlet personaString = JSON.stringify(persona); // Serializar\n// personaString = '{\"nombre\":\"Juan\",\"edad\":30}'\n\nlet personaDeserializada = JSON.parse(personaString); // Deserializar\n// personaDeserializada = {\n//    nombre: 'Juan',\n//    edad: 30\n// }\n</code></pre>"},{"location":"01js/03_objetos/#clonacion-de-objetos","title":"Clonaci\u00f3n de objetos","text":"<p>En Javascript los objetos se pasan por referencia, lo que significa que si se asigna un objeto a otra variable y se modifica, el objeto original tambi\u00e9n se ver\u00e1 afectado. Lo mismo ocurre si se pasa un objeto como argumento a una funci\u00f3n. Para evitar esto, se puede hacer una copia del objeto.</p> <p>Se puden hacer dos tipos de clonaci\u00f3n: superficial y profunda.</p>"},{"location":"01js/03_objetos/#clonacion-superficial","title":"Clonaci\u00f3n superficial","text":"<p>La clonaci\u00f3n superficial copia solo el primer nivel de propiedades del objeto y no copia los objetos anidados. Por lo que es \u00fatil para objetos simples con propiedades primitivas (n\u00fameros, cadenas, booleanos).</p> <p>Para hacer una clonaci\u00f3n superficial de un objeto, se puede usar el operador de propagaci\u00f3n (<code>...</code>) o el m\u00e9todo <code>Object.assign()</code>.</p> Ejemplo de clonaci\u00f3n superficial<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30\n};\n\nlet copia = { ...persona }; // Copia con operador de propagaci\u00f3n\nlet copia2 = Object.assign({}, persona); // Copia con Object.assign()\n\ncopia.nombre = 'Ana'; // Modificar copia\nconsole.log(persona.nombre); // Juan (no se modifica el objeto original)\n</code></pre>"},{"location":"01js/03_objetos/#clonacion-profunda","title":"Clonaci\u00f3n profunda","text":"<p>La clonaci\u00f3n profunda copia todos los niveles de propiedades de un objeto, incluidos los objetos anidados. Para hacer una clonaci\u00f3n profunda, se puede usar <code>structuredClone()</code> o <code>JSON.parse(JSON.stringify(objeto))</code>.</p> Ejemplo de clonaci\u00f3n profunda<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30,\n    direccion: {\n        ciudad: 'Madrid',\n        codigoPostal: '28001'\n    }\n};\n\nlet copiaProfunda = JSON.parse(JSON.stringify(persona)); // Clonaci\u00f3n profunda\n\ncopiaProfunda.direccion.ciudad = 'Barcelona'; // Modificar copia profunda\nconsole.log(persona.direccion.ciudad); // Madrid (no se modifica el objeto original)\n</code></pre>"},{"location":"01js/03_objetos/#iterar-sobre-objetos","title":"Iterar sobre objetos","text":"<p>Existen varios m\u00e9todos para iterar sobre las propiedades de un objeto.</p>"},{"location":"01js/03_objetos/#forin","title":"for...in","text":"<p>El bucle <code>for...in</code> permite recorrer todas las propiedades enumerables de un objeto.</p> Ejemplo de for...in<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30,\n    ciudad: 'Madrid'\n};\n\nfor (let propiedad in persona) {\n    console.log(`${propiedad}: ${persona[propiedad]}`);\n}\n\n// nombre: Juan\n// edad: 30\n// ciudad: Madrid\n</code></pre>"},{"location":"01js/03_objetos/#objectkeys","title":"Object.keys()","text":"<p><code>Object.keys()</code> devuelve un array con las claves de un objeto, que se puede usar con <code>forEach()</code> o <code>for...of</code>.</p> Ejemplo de Object.keys()<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30,\n    ciudad: 'Madrid'\n};\n\nObject.keys(persona).forEach(propiedad =&gt; {\n    console.log(`${propiedad}: ${persona[propiedad]}`);\n});\n\n// nombre: Juan\n// edad: 30\n// ciudad: Madrid\n</code></pre>"},{"location":"01js/03_objetos/#objectvalues","title":"Object.values()","text":"<p><code>Object.values()</code> devuelve un array con los valores de un objeto.</p> Ejemplo de Object.values()<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30,\n    ciudad: 'Madrid'\n};\n\nObject.values(persona).forEach(valor =&gt; {\n    console.log(valor);\n});\n\n// Juan\n// 30\n// Madrid\n</code></pre>"},{"location":"01js/03_objetos/#objectentries","title":"Object.entries()","text":"<p><code>Object.entries()</code> devuelve un array de pares clave-valor, que se puede usar para iterar sobre las propiedades de un objeto.</p> Ejemplo de Object.entries()<pre><code>let persona = {\n    nombre: 'Juan',\n    edad: 30,\n    ciudad: 'Madrid'\n};\n\nObject.entries(persona).forEach(([clave, valor]) =&gt; {\n    console.log(`${clave}: ${valor}`);\n});\n\n// nombre: Juan\n// edad: 30\n// ciudad: Madrid\n</code></pre>"},{"location":"01js/03_objetos/#objectfromentriesarray","title":"Object.fromEntries(array)","text":"<p><code>Object.fromEntries()</code> permite crear un objeto a partir de un array de pares clave-valor.</p> Ejemplo de Object.fromEntries()<pre><code>let array = [['nombre', 'Juan'], ['edad', 30], ['ciudad', 'Madrid']];\nlet persona = Object.fromEntries(array);\n\nconsole.log(persona);\n// { nombre: 'Juan', edad: 30, ciudad: 'Madrid' }\n</code></pre>"},{"location":"01js/04_arrays/","title":"1.4 Arrays <code>[ ]</code>","text":""},{"location":"01js/04_arrays/#introduccion","title":"Introducci\u00f3n","text":"<p>En Javascript un array es un objeto que permite almacenar una colecci\u00f3n de datos. Los arrays son din\u00e1micos, es decir, su tama\u00f1o puede cambiar en cualquier momento y pueden contener elementos de diferentes tipos (n\u00fameros, cadenas, objetos, etc.). </p> <p>Se recomienda crearlos usando notaci\u00f3n JSON (corchetes) en vez de como instancias del objeto Array.</p> Ejemplo de creaci\u00f3n de arrays<pre><code>let a = []\nlet b = [2,4,6]\n</code></pre> <p>aunque tambi\u00e9n podemos crearlos como instancias del objeto Array (NO recomendado):</p> Ejemplo de creaci\u00f3n de arrays<pre><code>let a = new Array()        // a = []\nlet b = new Array(2,4,6)   // b = [2, 4, 6]\n</code></pre> <p>Sus elementos pueden ser de cualquier tipo, incluso podemos tener elementos de tipos distintos en un mismo array. Si no est\u00e1 definido un elemento su valor ser\u00e1 undefined.</p> Ejemplo de arrays con diferentes tipos<pre><code>let a = ['Lunes', 'Martes', 2, 4, 6]\n\nconsole.log(a[0])   // imprime 'Lunes'\nconsole.log(a[4])   // imprime 6\n\na[7] = 'Juan'       // a = ['Lunes', 'Martes', 2, 4, 6, , , 'Juan']\n\nconsole.log(a[7])   // imprime 'Juan'\nconsole.log(a[6])   // imprime undefined\nconsole.log(a[10])  // imprime undefined\n</code></pre> <p>Como hemos visto, acceder a un elemento que no existe no provoca un error, devuelve <code>undefined</code>, pero s\u00ed lo provoca acceder a un elemento de algo que no es un array.</p> <p>Operador <code>?.</code></p> <p>En ES2020 (ES11) se ha incluido el operador <code>?.</code> para evitar tener que comprobar nosotros que sea un array:</p> <pre><code>console.log(alumnos?.[0])\n// si alumnos es un array y tiene un elemento en la posici\u00f3n 0, muestra el elemento\n// y si no muestra undefined\n</code></pre>"},{"location":"01js/04_arrays/#arrays-de-objetos","title":"Arrays de objetos","text":"<p>Es habitual almacenar datos en arrays en forma de objetos (clave: valor).</p> Ejemplo de array de objetos<pre><code>let alumnos = [\n  {\n    id: 1,\n    name: 'Marc Peris',\n    course: '2nDAW',\n    age: 21\n  },\n  {\n    id: 2,\n    name: 'J\u00falia Tortosa',\n    course: '2nDAW',\n    age: 23\n  },\n]\n</code></pre>"},{"location":"01js/04_arrays/#operaciones-con-arrays","title":"Operaciones con Arrays","text":"<p>Vamos a ver los principales m\u00e9todos y propiedades de los arrays.</p>"},{"location":"01js/04_arrays/#arrayisarray","title":"<code>Array.isArray()</code>","text":"<p>Es una funci\u00f3n que devuelve <code>true</code> si el par\u00e1metro pasado es un array y <code>false</code> si no lo es.</p> Ejemplo de Array.isArray()<pre><code>let a = [2, 4, 6]\nlet b = 'Hola'\nconsole.log(Array.isArray(a))   // imprime true\nconsole.log(Array.isArray(b))   // imprime false\n</code></pre>"},{"location":"01js/04_arrays/#length","title":"<code>length</code>","text":"<p>Esta propiedad devuelve la longitud de un array.</p> Ejemplo de length<pre><code>let a = ['Lunes', 'Martes', 2, 4, 6]\nconsole.log(a.length)  // imprime 5\n</code></pre> <p>Podemos reducir el tama\u00f1o de un array cambiando esta propiedad.</p> Ejemplo de cambio de length<pre><code>a.length = 3  // ahora a = ['Lunes', 'Martes', 2]\n</code></pre>"},{"location":"01js/04_arrays/#fill","title":"<code>fill()</code>","text":"<p>Rellena todos los elementos de un array el valor pasado como par\u00e1metro. Tambi\u00e9n se puede especificar el \u00edndice de inicio y fin.</p> Ejemplo de fill<pre><code>let a = [2, 4, 6, 1]\na.fill(0)         // a = [0, 0, 0, 0]\n\na = [2, 4, 6, 1]\na.fill(0, 1)      // a = [2, 0, 0, 0]\n\na = [2, 4, 6, 1]\na.fill(0, 1, 3)   // a = [2, 0, 0, 1]\n\na = [2, 4, 6, 1]\na.fill(0, -2)     // a = [2, 4, 0, 0]\n</code></pre>"},{"location":"01js/04_arrays/#anadir-elementos-push-y-unshift","title":"A\u00f1adir elementos <code>push()</code> y <code>unshift()</code>","text":"<p>Se pueden a\u00f1adir elementos al final de un array con <code>push</code> o al principio con <code>unshift</code>. Ambos m\u00e9todos devuelven la nueva longitud del array.</p> Ejemplo de a\u00f1adir elementos<pre><code>let a = ['Lunes', 'Martes', 2, 4, 6]\na.push('Juan')   // ahora a = ['Lunes', 'Martes', 2, 4, 6, 'Juan']\na.unshift(7)     // ahora a = [7, 'Lunes', 'Martes', 2, 4, 6, 'Juan']\n</code></pre>"},{"location":"01js/04_arrays/#eliminar-elementos-pop-y-shift","title":"Eliminar elementos <code>pop()</code> y <code>shift()</code>","text":"<p>Se puede borrar el elemento del final de un array con <code>pop</code> o el del principio con <code>shift</code>. Ambos m\u00e9todos devuelven el elemento que ha sido eliminado.</p> Ejemplo de eliminar elementos<pre><code>let a = ['Lunes', 'Martes', 2, 4, 6]\nlet ultimo = a.pop()         // ahora a = ['Lunes', 'Martes', 2, 4] y ultimo = 6\nlet primero = a.shift()      // ahora a = ['Martes', 2, 4] y primero = 'Lunes'\n</code></pre>"},{"location":"01js/04_arrays/#splice","title":"<code>splice()</code>","text":"<p>Permite eliminar elementos de cualquier posici\u00f3n del array y/o insertar otros en su lugar. Devuelve un array con los elementos eliminados.</p> Sintaxis de splice<pre><code>Array.splice(inicio, cantidad de elementos a extraer, 1\u00ba elemento a insertar, 2\u00ba elemento a insertar, 3\u00ba...)\n</code></pre> Ejemplo de splice<pre><code>let a = ['Lunes', 'Martes', 2, 4, 6]\nlet borrado = a.splice(1, 3)       // a = ['Lunes', 6] y borrado = ['Martes', 2, 4]\n\na = ['Lunes', 'Martes', 2, 4, 6]\nborrado = a.splice(1, 0, 45, 56)   // a = ['Lunes', 45, 56, 'Martes', 2, 4, 6] y borrado = []\n\na = ['Lunes', 'Martes', 2, 4, 6]\nborrado = a.splice(1, 3, 45, 56)   // a = ['Lunes', 45, 56, 6] y borrado = ['Martes', 2, 4]\n</code></pre>"},{"location":"01js/04_arrays/#slice","title":"<code>slice()</code>","text":"<p>Devuelve un subarray con los elementos indicados pero sin modificar el array original (ser\u00eda como hacer un <code>substr</code> pero de un array en lugar de una cadena).</p> Sintaxis de slice<pre><code>Array.slice(posicion, num. de elementos a devolver)\n</code></pre> Ejemplo de slice<pre><code>let a = ['Lunes', 'Martes', 2, 4, 6]\nlet subArray = a.slice(1, 3)       // ahora a = ['Lunes', 'Martes', 2, 4, 6] y subArray = ['Martes', 2, 4]\n</code></pre> <p>Es muy \u00fatil para hacer una copia de un array:</p> <pre><code>let a = [2, 4, 6]\nlet copiaDeA = a.slice()       // ahora ambos arrays contienen lo mismo pero son diferentes arrays\n</code></pre>"},{"location":"01js/04_arrays/#tostring-y-join","title":"<code>toString()</code> y <code>join()</code>","text":"<p>Cada objeto (y los arrays son un tipo de objeto) tienen definido el m\u00e9todo <code>.toString()</code> que lo convierte en una cadena. Este m\u00e9todo es llamado autom\u00e1ticamente cuando, por ejemplo, queremos mostrar un array por la consola. En realidad <code>console.log(a)</code> ejecuta <code>console.log(a.toString())</code>. En el caso de los arrays esta funci\u00f3n devuelve una cadena con los elementos del array dentro de corchetes y separados por coma.</p> <p>Adem\u00e1s podemos convertir los elementos de un array a una cadena con <code>.join()</code> especificando el car\u00e1cter separador de los elementos. Si no se especifica, el separador por defecto es la coma (<code>,</code>).</p> Ejemplo de join<pre><code>let a = ['Lunes', 'Martes', 2, 4, 6]\nlet cadena = a.join('-')       // cadena = 'Lunes-Martes-2-4-6'\ncadena = a.join()              // cadena = 'Lunes,Martes,2,4,6'\n</code></pre> <p>Este m\u00e9todo es el contrario del <code>.split()</code> que convierte una cadena en un array.</p> Ejemplo de split<pre><code>let notas = '5-3.9-6-9.75-7.5-3'\nlet arrayNotas = notas.split('-')        // arrayNotas = [5, 3.9, 6, 9.75, 7.5, 3]\nlet cadena = 'Que tal est\u00e1s'\nlet arrayPalabras = cadena.split(' ')    // arrayPalabras = ['Que`, 'tal', 'est\u00e1s']\nlet arrayLetras = cadena.split('')       // arrayLetras = ['Q','u','e`,' ','t',a',l',' ','e',s',t',\u00e1',s']\n</code></pre>"},{"location":"01js/04_arrays/#sort","title":"<code>sort()</code>","text":"<p>Ordena los elementos del array. Modifica el array original y la referencia del array modificado.</p> Ejemplo de sort<pre><code>let a = ['hola','adios','Bien','Mal',2,5,13,45]\nlet b = a.sort()       // b = [13, 2, 45, 5, \"Bien\", \"Mal\", \"adios\", \"hola\"]\n</code></pre> <p>Tambi\u00e9n se puede pasar como par\u00e1metro una funci\u00f3n que le decida c\u00f3mo ordenar los elementos. La funci\u00f3n recibe dos par\u00e1metros que son los elementos a comparar y devuelve un n\u00famero que indica c\u00f3mo se deben ordenar los elementos:</p> <ul> <li>Si la funci\u00f3n devuelve un n\u00famero negativo, el primer elemento se coloca antes que el segundo.</li> <li>Si la funci\u00f3n devuelve un n\u00famero positivo, el segundo elemento se coloca antes que el primero.</li> <li>Si la funci\u00f3n devuelve 0, no se cambia el orden.</li> </ul> Ejemplo de sort con funci\u00f3n<pre><code>let a = ['hola','adios','Bien','Mal'];\nlet test = a.sort(function(elem1, elem2) {\n  if (elem1.toLocaleLowerCase() &lt; elem2.toLocaleLowerCase())\n    return -1\n  if (elem1.toLocaleLowerCase() &gt; elem2.toLocaleLowerCase())\n    return 1\n  return 0\n});       // b = [\"adios\", \"Bien\", \"hola\", \"Mal\"]\n</code></pre> <p>Como m\u00e1s se utiliza esta funci\u00f3n es para ordenar arrays de objetos. Por ejemplo si tenemos un objeto <code>alumno</code> con los campos <code>name</code> y <code>age</code>, para ordenar un array de objetos <code>alumno</code> por su edad haremos:</p> Ejemplo de sort con objetos<pre><code>let alumnos = [\n  { id: 1, name: 'Javier', age: 21 },\n  { id: 2, name: 'J\u00falia', age: 23 },\n  { id: 3, name: 'Marc', age: 20 }\n]\n\nlet alumnosOrdenado = alumnos.sort(function(alumno1, alumno2) {\n  return alumno1.age - alumno2.age\n})\n\nconsole.log(alumnosOrdenado)\n\n// let alumnos = [\n//   { id: 3, name: 'Marc', age: 20 }\n//   { id: 1, name: 'Javier', age: 21 },\n//   { id: 2, name: 'J\u00falia', age: 23 },\n// ]\n</code></pre> <p>Otra forma de hacerlo es usando arrow functions.</p> Ejemplo de sort con arrow function<pre><code>let alumnosOrdenado = alumnos.sort((alumno1, alumno2)  =&gt; alumno1.age - alumno2.age)\n</code></pre> <p>Si lo que queremos es ordenar por un campo de texto debemos usar la funci\u00f3n toLocaleCompare.</p> Ejemplo de sort con toLocaleCompare<pre><code>let alumnos = [\n  { id: 1, name: 'Javier', age: 21 },\n  { id: 2, name: 'J\u00falia', age: 23 },\n  { id: 3, name: 'Marc', age: 20 }\n]\n\nlet alumnosOrdenado = alumnos.sort((alumno1, alumno2)  =&gt; alumno1.name.localeCompare(alumno2.name))\n\nconsole.log(alumnosOrdenado)\n\n// alumnosOrdenado = [\n//   { id: 3, name: 'Marc', age: 20 },\n//   { id: 1, name: 'Javier', age: 21 },\n//   { id: 2, name: 'J\u00falia', age: 23 }\n// ]\n</code></pre>"},{"location":"01js/04_arrays/#concat","title":"<code>concat()</code>","text":"<p>Permite unir dos o m\u00e1s arrays. Devuelve un nuevo array.</p> Ejemplo de concat<pre><code>let a = [2, 4, 6]\nlet b = ['a', 'b', 'c']\nlet c = a.concat(b)       // c = [2, 4, 6, 'a', 'b', 'c']\n</code></pre>"},{"location":"01js/04_arrays/#reverse","title":"<code>reverse()</code>","text":"<p>Invierte el orden de los elementos de un array. Modifica el array original y devuelve el array modificado.</p> Ejemplo de reverse<pre><code>let a = [2, 4, 6]\nlet b = a.reverse()       // b = [6, 4, 2]\n</code></pre>"},{"location":"01js/04_arrays/#toreversed","title":"<code>toReversed()</code>","text":"<p>Es similar a <code>reverse()</code>, pero no modifica el array original, sino que devuelve un nuevo array invertido.</p>"},{"location":"01js/04_arrays/#indexof","title":"<code>indexOf()</code>","text":"<p>devuelve la primera posici\u00f3n del elemento pasado como par\u00e1metro o <code>-1</code> si no se encuentra en el array.</p>"},{"location":"01js/04_arrays/#lastindexof","title":"<code>lastIndexOf()</code>","text":"<p>devuelve la \u00faltima posici\u00f3n del elemento pasado como par\u00e1metro o <code>-1</code> si no se encuentra en el array.</p>"},{"location":"01js/04_arrays/#includes","title":"<code>includes()</code>","text":"<p>Devuelve <code>true</code> si el elemento pasado como par\u00e1metro se encuentra en el array o <code>false</code> si no</p> Ejemplo de includes<pre><code>let a = [2, 4, 6]\nconsole.log(a.includes(4))   // imprime true\nconsole.log(a.includes(5))   // imprime false\n</code></pre>"},{"location":"01js/04_arrays/#foreach","title":"<code>forEach()</code>","text":"<p>Podemos iterar por los elementos de un array usando el m\u00e9todo <code>forEach</code>. De forma opcional, podemos llevar un seguimiento del \u00edndice al que est\u00e1 accediendo en cada momento, e incluso recibir el array como tercer par\u00e1metro.</p> <p>Es importante recalcar que si se modifican los elementos de un array en un <code>foreach</code> los cambios no se guardan en el array, es decir, no podemos modificar el propio array dentro de un <code>foreach</code>.</p> Ejemplo de forEach() simple<pre><code>let a = [2, 4, 6]\na.forEach(function(elemento) {\n  console.log(elemento)\n})\n</code></pre> Ejemplo de forEach() en forma de arrow function<pre><code>let a = [2, 4, 6]\na.forEach((elemento) =&gt; console.log(elemento))\n</code></pre> Ejemplo de forEach() con \u00edndice<pre><code>let a = ['Lunes', 'Martes', 2, 4, 6]\na.forEach((elemento, indice) =&gt; {\n  console.log(`Elemento en la posici\u00f3n ${indice}: ${elemento}`)\n})\n</code></pre> <p>El par\u00e1metro array es opcional, pero puede ser \u00fatil si queremos acceder a otros elementos del array sobre el que estamos iterando.</p> Ejemplo de forEach() con array<pre><code>let a = [2, 4, 6]\na.forEach((elemento, indice, array) =&gt; {\n  console.log(`Elemento en la posici\u00f3n ${indice}: ${elemento}`)\n  console.log(`Siguiente elemento: ${array[indice + 1]}`)\n\n  array[indice] = elemento * 2 // esto no modifica el array original\n})\n</code></pre>"},{"location":"01js/04_arrays/#find","title":"<code>find()</code>","text":"<p>Devuelve el primer elemento que cumple con la condici\u00f3n especificada en la funci\u00f3n de prueba, o <code>undefined</code> si no se encuentra ninguno.</p> Ejemplo de find<pre><code>let alumnos = [\n  { id: 1, name: 'Marc', age: 21 },\n  { id: 2, name: 'J\u00falia', age: 23 },\n  { id: 3, name: 'Javier', age: 20 }\n]\n\nlet alumno = alumnos.find(alumno =&gt; alumno.age &lt; 22) // devuelve { id: 1, name: 'Marc', age: 21 }\n</code></pre>"},{"location":"01js/04_arrays/#filter","title":"<code>filter()</code>","text":"<p>Devuelve un nuevo array con todos los elementos que cumplen la condici\u00f3n especificada en la funci\u00f3n de prueba.</p> Ejemplo de filter()<pre><code>let alumnos = [\n  { id: 1, name: 'Marc', age: 21 },\n  { id: 2, name: 'J\u00falia', age: 23 },\n  { id: 3, name: 'Javier', age: 20 }\n]\n\nlet alumnosMenores = alumnos.filter(alumno =&gt; alumno.age &lt; 22) // devuelve [{ id: 1, name: 'Marc', age: 21 }, { id: 3, name: 'Javier', age: 20 }]\n</code></pre>"},{"location":"01js/04_arrays/#every","title":"<code>every()</code>","text":"<p>Devuelve <code>true</code> si todos los elementos del array cumplen con la condici\u00f3n especificada en la funci\u00f3n de prueba, o <code>false</code> si al menos uno no la cumple.</p> Ejemplo de every()<pre><code>let alumnos = [\n  { id: 1, name: 'Marc', age: 21 },\n  { id: 2, name: 'J\u00falia', age: 23 },\n  { id: 3, name: 'Javier', age: 20 }\n]\n\nlet todosMayores = alumnos.every(alumno =&gt; alumno.age &gt;= 18) // devuelve true\n</code></pre>"},{"location":"01js/04_arrays/#some","title":"<code>some()</code>","text":"<p>Devuelve <code>true</code> si al menos un elemento del array cumple con la condici\u00f3n especificada en la funci\u00f3n de prueba, o <code>false</code> si ninguno la cumple.</p> Ejemplo de some()<pre><code>let precios = [10, 20, 30]\n\nlet hayPreciosAltos = precios.some(precio =&gt; precio &gt; 25) // devuelve true\n</code></pre>"},{"location":"01js/04_arrays/#map","title":"<code>map()</code>","text":"<p>Devuelve un nuevo array con los resultados de la funci\u00f3n aplicada a cada elemento del array original.</p> Ejemplo de map()<pre><code>let precios = [10, 20, 30]\n\nlet preciosConIVA = precios.map(precio =&gt; precio * 1.21) // devuelve [12.1, 24.2, 36.3]\n</code></pre>"},{"location":"01js/04_arrays/#reduce","title":"<code>reduce()</code>","text":"<p>Ejecuta una funci\u00f3n reductora sobre cada elemento del array, devolviendo como resultado un \u00fanico valor.</p> <p>Tiene dos par\u00e1metros:</p> <ul> <li>Funci\u00f3n reductora: recibe cuatro par\u00e1metros: el acumulador, el elemento actual, el \u00edndice y el array.</li> <li>Valor inicial del acumulador (opcional).</li> </ul> Sintaxis de reduce<pre><code>arr.reduce(callback(acumulador, valorActual[, \u00edndice[, array]])[, valorInicial])\n</code></pre> Ejemplo de reduce<pre><code>let precios = [10, 20, 30]\nlet valorInicial = 0\n\nlet total = precios.reduce(\n  (acumulador, precio) =&gt; acumulador + precio,  // funci\u00f3n reductora (primer par\u00e1metro)\n  valorInicial)                                 // valor inicial del acumulador (segundo par\u00e1metro)\n\n// total = 60\n</code></pre> <pre><code>let notas = [5, 3.9, 6, 9.75, 7.5, 3]\n\nlet media = notas.reduce((acumulador, nota, index, array) =&gt; acumulador + nota / array.length, 0)\n// media = 5.858333333333333\n</code></pre>"},{"location":"01js/04_arrays/#reduceright","title":"<code>reduceRight()</code>","text":"<p>Es similar a <code>reduce()</code>, pero itera sobre el array de derecha a izquierda.</p> Ejemplo de reduceRight<pre><code>let precios = [10, 20, 30]\n\nlet total = precios.reduceRight((acumulador, precio) =&gt; acumulador + precio, 0) // devuelve 60\n</code></pre>"},{"location":"01js/04_arrays/#spread","title":"spread","text":"<p>El operador spread (<code>...</code>) se utiliza para expandir un array en sus elementos. Se puede usar para crear un nuevo array o para pasar los elementos de un array como argumentos de una funci\u00f3n.</p> Ejemplo de spread como argumentos de una funci\u00f3n<pre><code>let a = [2, 4, 6]\n\nfunction suma(a, b, c) {\n  return a + b + c\n}\n\nlet resultado = suma(...a)  // resultado = 12\n</code></pre> <p>Tambi\u00e9n se puede usar para clonar o concatenar arrays.</p> Ejemplo de spread para clonar arrays y concatenarlos<pre><code>let a = [2, 4, 6]\nlet b = [...a]            // clon de a, b = [2, 4, 6]\nlet c = [8, ...b, 15]     // c = [2, 4, 6, 8, 10]\n\nlet d = [...a, ...c]      // d = [2, 4, 6, 8, 2, 4, 6, 15]\n</code></pre>"},{"location":"01js/04_arrays/#rest","title":"rest","text":"<p>El operador rest (<code>...</code>) hace la operaci\u00f3n contraria al spread, es decir, recoge los par\u00e1metros de una funci\u00f3n en un array.</p> Ejemplo de rest<pre><code>function suma(...numeros) {\n  let total = 0\n  for (let i = 0; i &lt; numeros.length; i++) {\n    total += numeros[i]\n  }\n  return total\n}\n\nlet resultado = suma(2, 4, 6)  // resultado = 12\n</code></pre>"},{"location":"01js/05_callbacks_promesas/","title":"1.5 Callbacks y promesas","text":""},{"location":"01js/05_callbacks_promesas/#callbacks","title":"Callbacks","text":"<p>Este concepto es fundamental para dotar a Node.js (y a Javascript en general) de un comportamiento as\u00edncrono.</p> <p>Por \"comportamiento as\u00edncrono\" se entiende que, se llama a una funci\u00f3n, y se le deja indicado lo que tiene que hacer cuando termine, y mientras tanto el programa contin\u00faa ejecut\u00e1ndose.</p> <p>Un ejemplo lo tenemos con la funci\u00f3n <code>setTimeout()</code> de Javascript. A esta funci\u00f3n le podemos indicar una funci\u00f3n a la que llamar, y un tiempo (en milisegundos) que esperar antes de llamarla. Ejecutada la l\u00ednea de la llamada a setTimeout, el programa sigue su curso y cuando el tiempo expira, se llama a la funci\u00f3n callback indicada.</p> <p>En el siguiente ejemplo, se muestra c\u00f3mo se ejecuta el c\u00f3digo de forma secuencial, pero la funci\u00f3n <code>callback()</code> se ejecuta despu\u00e9s de 2 segundos:</p> callback.js<pre><code>function callback() {\n  console.log(\"callback() llamado\")\n}\n\nsetTimeout(callback, 2000)\nconsole.log(\"Fin?\")\n</code></pre> <p>Si ejecutamos el ejemplo, veremos que el primer mensaje que aparece es el de \"<code>Fin?</code>\", y pasados dos segundos, aparece el mensaje de \"<code>callback() llamado</code>\". Es decir, hemos llamado a <code>setTimeout</code> y el programa ha seguido su curso despu\u00e9s, ha escrito \"<code>Fin?</code>\" en la consola y, una vez ha pasado el tiempo estipulado, se ha llamado al callback para hacer su trabajo. Utilizaremos callbacks ampliamente durante este curso. De forma especial para procesar el resultado de algunas promesas que emplearemos (se ver\u00e1n a continuaci\u00f3n), o el tratamiento de algunas peticiones de servicios.</p>"},{"location":"01js/05_callbacks_promesas/#promesas","title":"Promesas","text":"<p>Las promesas son un mecanismo para resolver el problema de asincron\u00eda de una forma mucho m\u00e1s elegante y pr\u00e1ctica que utilizando funciones callback directamente.</p> <p>Concurrencia</p> <p>Los int\u00e9rpretes de Javascript suelen ser mono-hilo, es decir, s\u00f3lo pueden ejecutar una tarea a la vez. Por lo que simulan el trabajo en paralelo mediante la concurrencia, alternando la ejecuci\u00f3n de tareas.</p> <p>Las promesas pueden tener varios estados:</p> <ul> <li><code>pending</code>. (Pendiente) Estado inicial de la promesa, antes de ser resuelta o rechazada.</li> <li><code>fulfilled</code>. (Resuelta) La promesa se cumple con \u00e9xito y se resuelve.</li> <li><code>rejected</code>. (Rechazada) La promesa falla y se rechaza.</li> </ul> <p>Con estas sencillas bases, podemos entender el funcionamiento de una promesa en Javascript. Antes de empezar, tambi\u00e9n debemos tener claro que las promesas son objetos, y podemos crearlas y consumirlas.</p> <ul> <li>Crearlas: preparar una funci\u00f3n para que use promesas y se puedan consumir.</li> <li>Consumirlas: utilizar las promesas que hemos creado.</li> </ul> <p>Las promesas en Javascript se representan a trav\u00e9s del objeto <code>Promise</code>, y cada promesa estar\u00e1 en un estado concreto: <code>pending</code>, <code>fulfilled</code> o <code>rejected</code>. Adem\u00e1s, cada promesa tiene los siguientes m\u00e9todos, que podremos utilizar para trabajar con ellas:</p> <ul> <li><code>.then(resolve)</code>: ejecuta la funci\u00f3n callback <code>resolve</code> cuando la promesa se cumple.</li> <li><code>.catch(reject)</code>: ejecuta la funci\u00f3n callback <code>reject</code> cuando la promesa se rechaza.</li> <li><code>.then(resolve, reject)</code>: M\u00e9todo equivalente a los dos anteriores contenido en un solo m\u00e9todo.</li> <li><code>.finally()</code>: ejecuta la funci\u00f3n callback <code>finally</code> cuando la promesa se cumple o si se rechaza.</li> </ul>"},{"location":"01js/05_callbacks_promesas/#consumir-promesas","title":"Consumir promesas","text":"<p>La forma general de consumir una promesa es utilizando el <code>.then()</code> con un s\u00f3lo par\u00e1metro, puesto que muchas veces lo \u00fanico que nos interesa es realizar una acci\u00f3n cuando la promesa se cumpla:</p> Ejemplo de promesa<pre><code>let promesa = new Promise(resolve =&gt; \n  setTimeout(\n    () =&gt; resolve('\u00a1Promesa cumplida!'),\n    2000\n  )\n);\n\npromesa.then(mensaje =&gt; {\n  console.log(mensaje)\n})\n</code></pre> <p>Lo que vemos en el ejemplo anterior es que se crea una promesa que se cumple a los 2 segundos, y cuando se cumple, se ejecuta la funci\u00f3n callback que muestra el mensaje por consola.</p> <p>Para tratar el caso de que la promesa se rechace, se utiliza el m\u00e9todo <code>.catch()</code>:</p> Ejemplo de promesa rechazada<pre><code>let promesa = new Promise((resolve, reject) =&gt; \n  setTimeout(\n    () =&gt; reject('\u00a1Promesa rechazada!'),\n    2000\n  )\n);\n\npromesa\n  .then(mensaje =&gt; console.log(`Promise Resolved: ${mensaje}`))\n  .catch(error =&gt; console.error(`Promise Rejected: ${error}`))\n\n// Promise Rejected: \u00a1Promesa rechazada!\n</code></pre> <p>Observa como hemos indentado los m\u00e9todos <code>.then()</code> y <code>.catch()</code>, ya que se suele hacer as\u00ed para que sea mucho m\u00e1s legible. Adem\u00e1s, se pueden encadenar varios <code>.then()</code> si se siguen generando promesas y se devuelven con un return:</p> Encadenar promesas<pre><code>let promesa = new Promise(resolve =&gt; \n  setTimeout(\n    () =&gt; resolve('\u00a1Promesa cumplida!'),\n    2000\n  )\n);\n\npromesa\n  .then(mensaje =&gt; {\n    console.log(`Promise Resolved: ${mensaje}`);\n    return '\u00a1Segunda promesa!';\n  })\n  .then(mensaje =&gt; {\n    console.log(`Promise Resolved: ${mensaje}`);\n    return '\u00a1Tercera promesa!';\n  })\n  .then(mensaje =&gt; console.log(`Promise Resolved: ${mensaje}`))\n  .catch(error =&gt; console.error(`Promise Rejected: ${error}`))\n</code></pre> <p>Se a\u00f1ade el m\u00e9todo <code>.finally()</code> para a\u00f1adir una funci\u00f3n de retorno (callback function) que se ejecutar\u00e1 tanto si la promesa se cumple o se rechaza, lo que nos ahorrar\u00e1 tener que repetir la funci\u00f3n en el <code>.then()</code> como en el <code>.catch()</code>.</p>"},{"location":"01js/05_callbacks_promesas/#codigo-asincrono","title":"C\u00f3digo as\u00edncrono","text":"<p>Algo muy importante, pero que quiz\u00e1s hemos pasado por alto es que el c\u00f3digo que ejecutamos en el interior de un <code>.then()</code> es c\u00f3digo as\u00edncrono no bloqueante:</p> <ul> <li>As\u00edncrono: Porque no se ejecuta inmediatamente, sino cuando la promesa se cumple.</li> <li>No bloqueante: Porque mientras espera ser ejecutado, no bloquea el resto del programa.</li> </ul> <p>Cuando llegamos a un <code>.then()</code>, el sistema no se bloquea, sino que deja la funci\u00f3n en estado <code>pending</code> hasta que se cumpla la promesa, pero mientras, continua procesando el resto del programa.</p> <p>Observa el siguiente ejemplo:</p> C\u00f3digo as\u00edncrono<pre><code>let promesa = new Promise(resolve =&gt; \n  setTimeout(\n    () =&gt; console.log('1. C\u00f3digo as\u00edncrono'),\n    2000\n  )\n);\n\npromesa.then();\n\nconsole.log(\"2. C\u00f3digo s\u00edncrono\")\n</code></pre> <p>Aunque el <code>console.log(\"C\u00f3digo as\u00edncrono\")</code> aparezca unas l\u00edneas antes del <code>console.log(\"C\u00f3digo s\u00edncrono\")</code>, se mostrar\u00e1 m\u00e1s tarde. Esto ocurre porque el <code>console.log()</code> del interior del <code>.then()</code> no ocurre inmediatamente, y al no ser bloqueante, se continua con el resto del programa hasta que se ejecute, que lo retomar\u00e1.</p>"},{"location":"01js/05_callbacks_promesas/#crear-promesas","title":"Crear promesas","text":"<p>Ya hemos visto algunos ejemplos de c\u00f3mo consumir promesas, donde se ve\u00eda c\u00f3mo se creaban y se consum\u00edan. Ahora vamos a ver c\u00f3mo se crean.</p> <p>Para crear una promesa se utiliza el objeto <code>Promise</code>, de la siguiente forma <code>new Promise((resolve, reject) =&gt; { })</code> se le pasa por par\u00e1metro una funci\u00f3n an\u00f3nima con dos par\u00e1metros de callback:</p> <ul> <li><code>resolve</code>. Lo utilizaremos cuando se cumpla la promesa.</li> <li><code>reject</code>. Lo utilizaremos cuando se rechace la promesa.</li> </ul> <p>Ejemplo de creaci\u00f3n de una promesa:</p> Crear promesa<pre><code>/**\n * Ejemplo donde se va llenando un array con n\u00fameros aleatorios\n * simulando lanzamientos de un dado de 6 caras.\n * \n * Si aparece un 6 se rechaza la promesa.\n * Si se termina el bucle se resuelve la promesa.\n * \n * @param {number} iterations - N\u00famero de iteraciones a realizar.\n * @returns {Promise} Promesa que se resuelve si no aparece un 6.\n */\nconst throwDices = (iterations) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    const numbers = [];\n\n    for (let i = 0; i &lt; iterations; i++) {\n      const number = 1 + Math.floor(Math.random() * 6);\n      numbers.push(number);\n      if (number === 6) {\n        reject({\n          error: true,\n          value: numbers,\n          message: 'Se ha sacado un 6\"'\n        });\n        break\n      }\n    }\n\n    resolve({\n      error: false,\n      value: numbers\n    });\n  })  // new Promise\n} // throwDices\n</code></pre> <p>Como se puede observar, la funci\u00f3n <code>throwDices()</code> devuelve una promesa que se rechaza si en alg\u00fan momento se saca un <code>6</code>, y se resuelve si se termina el bucle.</p> Consumir promesa<pre><code>throwDices(10)\n  .then(result =&gt; console.log(`Tiradas correctas: ${result.value}`))\n  .catch(err =&gt; console.error(`Error: ${err.value} - ${err.message}`))\n</code></pre> <p>Imagina el caso de que cada lanzamiento del dado (la parte donde genera el n\u00famero aleatorio) fuera un proceso m\u00e1s costoso que tardara un tiempo considerable, como una petici\u00f3n a un servidor, o una operaci\u00f3n de c\u00e1lculo muy pesada. En ese caso, el c\u00f3digo ser\u00eda bloqueante y la mejor opci\u00f3n ser\u00eda realizarlo de forma as\u00edncrona, controlada por promesas.</p>"},{"location":"01js/05_callbacks_promesas/#ejemplo-de-promesa-con-fetch","title":"Ejemplo de promesa con <code>fetch()</code>","text":"<p>En el siguiente ejemplo, se muestra c\u00f3mo se puede utilizar una promesa para realizar una petici\u00f3n a un servidor y obtener los datos de un fichero JSON.</p> <p>Utiliza fetch para realizar una petici\u00f3n a un servidor y obtener los datos de un fichero JSON. Si la petici\u00f3n se realiza correctamente, se muestra el contenido del fichero JSON. Si no, se muestra un mensaje de error.</p> <p>Se utiliza <code>performance.now()</code> para medir el tiempo que tarda en terminar la promesa.</p> promise.js<pre><code>const CATFACT_ENDPOINT = 'https://catfact.ninja/fact'\n\nconsole.log(`Esperando respuesta de ${CATFACT_ENDPOINT}...\\n`)\n\nconst startTime = performance.now();\n\nfetch(CATFACT_ENDPOINT)\n  .then((response) =&gt; response.json() )\n  .then((data) =&gt; {\n    console.log(JSON.stringify(data, null, 2) + '\\n')\n    console.log(`FACT: ${data.fact}`);\n  })\n  .catch((error) =&gt; console.error(error))\n  .finally(() =&gt; {\n    const endTime = performance.now()\n    console.log(`\\nTiempo total de ejecuci\u00f3n: ${endTime - startTime} ms`)\n  })\n</code></pre>"},{"location":"01js/05_callbacks_promesas/#asyncawait","title":"Async/Await","text":"<p>El uso de promesas es muy \u00fatil, pero a veces puede resultar complicado de leer y entender, especialmente cuando se encadenan muchas promesas. Para facilitar la lectura y escritura de c\u00f3digo as\u00edncrono, se introdujo en ECMAScript 2017 la sintaxis <code>async/await</code>.</p> <p>Con <code>async</code>/<code>await</code> seguimos manejando promesas, sin embargo, hay ciertos cambios importantes:</p> <ul> <li>El c\u00f3digo se vuelve m\u00e1s legible, ya que se parece m\u00e1s a c\u00f3digo s\u00edncrono.</li> <li>Se puede utilizar <code>try</code>/<code>catch</code> para gestionar los errores de una forma m\u00e1s c\u00f3moda.</li> <li>Se puede utilizar <code>await</code> para esperar a que se cumpla una promesa, y as\u00ed evitar el uso de <code>.then()</code>.</li> </ul> <p>La palabra clave <code>await</code> se utiliza para esperar a que se cumpla una promesa, y as\u00ed evitar el uso de <code>.then()</code>.</p> <p>La palabra clave <code>async</code> se utiliza para definir una funci\u00f3n as\u00edncrona, que devolver\u00e1 una promesa.</p> <pre><code>async function fetchUsers() {\n  const response = fetch('https://jsonplaceholder.typicode.com/users')\n  const data = await response\n  const json = await data.json()\n  console.log(json)\n}\n\nfetchUsers()  // no bloqueante\n\nconsole.log('Fin')\n</code></pre> <p>Lo que hace <code>await</code> (dentro de la funci\u00f3n) es detener la ejecuci\u00f3n y no continuar. Se espera a que se resuelva la promesa, y hasta que no lo haga, no continua.</p> <p><code>await</code> s\u00f3lo se puede utilizar dentro de una funci\u00f3n <code>async</code>, y si se utiliza fuera de ella, se producir\u00e1 un error.</p> <pre><code>Uncaught SyntaxError: await is only valid in async functions and the top level bodies of modules\n</code></pre> <p>Vamos a analizar un poco m\u00e1s en detalle c\u00f3mo se comportan las funciones <code>async</code> y <code>await</code>. En primer lugar, vamos a ver c\u00f3mo se comportan las funciones s\u00edncronas y as\u00edncronas:</p> <pre><code>function sincrona() { return 42 }\nasync function asincrona() { return 42 }\n\nconsole.log(sincrona())   // 42\nconsole.log(asincrona())  // Promise { 42 }\n</code></pre> <p>En el caso de la funci\u00f3n <code>sincrona()</code> devuelve el valor, sin embargo, en el caso de la funci\u00f3n <code>asincrona()</code> devuelve una promesa que se ha cumplido inmediatamente, con el valor <code>42</code>.</p> <p>Si queremos reescribirlas como arrow function, se definir\u00eda como vemos a continuaci\u00f3n, colocando el <code>async</code> justo antes de los par\u00e1metros de la arrow function:</p> <pre><code>const sincrona = () =&gt; 42\nconst asincrona = async () =&gt; 42\n</code></pre>"},{"location":"01js/05_callbacks_promesas/#awaitasync-then","title":"Await/Async + .then()","text":"<p>En algunos casos, como al usar un <code>fetch()</code>, donde tenemos que manejar dos promesas, es posible que nos interese utilizar <code>.then()</code> para la primera promesa y <code>await</code> para la segunda. De esta forma podemos manejarlo todo directamente, sin tener que guardarlo en constantes o variables temporales que no utilizaremos sino una sola vez:</p> <pre><code>const USERS_ENDPOINT = 'https://jsonplaceholder.typicode.com/users'\n\nasync function requestFirstUser(url) {\n  const response = await fetch(url).then(response =&gt; response)  \n  const user = await response.json()\n  return user[0]\n}\n\nrequestFirstUser(USERS_ENDPOINT)\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.error(error))\n</code></pre> <p>En este caso, observa que se utiliza <code>.then()</code> para recibir la respuesta de la petici\u00f3n, pero <code>await</code> para esperar a que se resuelva la promesa y obtener los datos en formato JSON.</p>"},{"location":"01js/05_callbacks_promesas/#asincronia-en-asyncawait","title":"Asincron\u00eda en async/await","text":"<p>Volvamos al ejemplo de las tiradas de dados. La funci\u00f3n <code>throwDices()</code> realiza 10 lanzamientos de un dado de 6 caras y nos devuelve los resultados obtenidos o detiene la tarea si se obtiene un <code>6</code>. La implementaci\u00f3n de la funci\u00f3n sufre algunos cambios, simplific\u00e1ndose considerablemente.</p> <ul> <li>En primer lugar, a\u00f1adimos la palabra clave <code>async</code> antes de los par\u00e1metros de la arrow function.</li> <li>En segundo lugar, desaparece cualquier menci\u00f3n a promesas, se devuelven directamente los objetos, ya que al ser una funci\u00f3n <code>async</code> se devolver\u00e1 todo envuelto en una Promise.</li> </ul> <p>Nombrar funciones as\u00edncronas</p> <p>Es una buena pr\u00e1ctica nombrar las funciones as\u00edncronas con el sufijo <code>Async</code>, para que sea m\u00e1s f\u00e1cil identificarlas.</p> Crear promesa con async/await<pre><code>const throwDicesAsync = async (iterations) =&gt; {\n  const numbers = [];\n\n  for (let i = 0; i &lt; iterations; i++) {\n    const number = 1 + Math.floor(Math.random() * 6)\n    numbers.push(number);\n    if (number === 6) {\n      return {\n        error: true,\n        value: numbers,\n        message: \"Se ha sacado un 6\"\n      };\n    }\n  }\n\n  return {\n    error: false,\n    value: numbers\n  };\n}\n</code></pre> <p>Pero donde se introducen cambios considerables es en la forma de consumir la promesa, pues no podemos utilizar <code>await</code> fuera de una funci\u00f3n <code>async</code>:</p> Consumir promesa con async/await<pre><code>const resultado = await throwDicesAsync(10)\n\n// SyntaxError: await is only valid in async functions and the top level bodies of modules\n</code></pre> <p>Observa que el <code>await</code> se utiliza dentro de una funci\u00f3n <code>async</code>, por lo que la funci\u00f3n que lo contenga debe ser as\u00edncrona:</p> Consumir promesa con async/await<pre><code>async function consumeAsync() {\n  const result = await throwDices(10)\n  if (!result.error) {\n      console.log(`Tiradas correctas: ${result.value}`)\n  } else {\n      console.error(`Error: ${result.value} - ${result.message}`)\n  }\n}\n\nconsumeAsync()\n</code></pre> <p>En este caso, la funci\u00f3n <code>throwDicesAsync()</code> es as\u00edncrona, y por tanto, puede utilizar <code>await</code> para esperar a que se cumpla la promesa.</p>"},{"location":"01js/05_callbacks_promesas/#manejo-de-errores","title":"Manejo de errores","text":"<p>Tanto en las promesas como en las funciones <code>async</code>/<code>await</code>, se pueden manejar los errores <code>catch()</code>.</p> <p>En el siguiente ejemplo, se muestra c\u00f3mo se manejan los errores en una promesa y en una funci\u00f3n <code>async</code>:</p> Manejo de errores<pre><code>const throwDicesPromise = (iterations) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    const numbers = []\n\n    for (let i = 0; i &lt; iterations; i++) {\n      const number = Math.floor(Math.random() * 6) + 1\n      numbers.push(number)\n\n      if (number === 6) {\n        reject(\"Se ha sacado un 6\")\n      }\n    }\n\n    resolve(numbers)\n  })\n}\n\nconst throwDicesAsync = async (iterations) =&gt; {\n    const numbers = []\n\n    for (let i = 0; i &lt; iterations; i++) {\n      const number = Math.floor(Math.random() * 6) + 1\n      numbers.push(number)\n\n      if (number === 6) {\n        throw new Error('Se ha sacado un 6')\n      }\n    }\n\n    return numbers\n}\n\nthrowDicesPromise(5)\n  .then((data) =&gt; console.log(`Tiradas correctas ${data}`))\n  .catch((error) =&gt; console.error(`${error}`))\n\nthrowDicesAsync(5)\n  .then((data) =&gt; console.log(`Tiradas correctas ${data}`))\n  .catch((error) =&gt; console.error(`${error}`))\n</code></pre> <p>Se puede observar que el manejo de errores es muy similar en ambos casos, y se realiza con el m\u00e9todo <code>.catch()</code> tanto si se rechaza la promesa como si se lanza un error.</p>"},{"location":"01js/061_actividades/","title":"\u270d\ufe0f Actividades: Programaci\u00f3n as\u00edncrona y orientada a objetos","text":"<p>Acepta la tarea en GitHub Classroom y clona el repositorio en tu m\u00e1quina local.</p> <ul> <li>https://classroom.github.com/a/m96NT8Fj</li> </ul> <p>Realiza las actividades en los ficheros indicados y comprueba que funcionan correctamente.</p> <p>Warning</p> <p>Es importante evitar el uso de generadores de c\u00f3digo autom\u00e1tico para realizar las actividades.</p> <p>Si tienes dudas, consulta la documentaci\u00f3n o pide ayuda al profesor.</p> <p>En caso de existir duda ante la copia o el uso de herramientas de generaci\u00f3n de c\u00f3digo autom\u00e1tico, se pedir\u00e1 una explicaci\u00f3n detallada del c\u00f3digo por parte del alumnado implicado. En caso de no poder justificarlo, se considerar\u00e1 copia y se considerar\u00e1 la actividad como no realizada para las partes afectadas.</p> <p>Commit</p> <p>Intenta hacer un commit por cada actividad.</p>"},{"location":"01js/061_actividades/#actividad-1","title":"Actividad 1","text":"<p>Dentro del script <code>async.js</code>, crea una promesa <code>twoSecondsPromise</code> que se resuelva a los entre aleatoriamente entre 0 y 2 segundos, simulando una petici\u00f3n a un servidor. La promesa debe devolver un mensaje de \u00e9xito si se resuelve en menos de 1 segundo, y un mensaje de error en caso contrario.</p> <p>Consume la promesa y muestra el mensaje de \u00e9xito o error por consola seg\u00fan corresponda.</p>"},{"location":"01js/061_actividades/#actividad-2","title":"Actividad 2","text":"<p>Dentro del script <code>async.js</code>, crea la funci\u00f3n as\u00edncrona <code>callbackAsync</code> que har\u00e1 uso que la promesa anterior y reciba una funci\u00f3n callback como par\u00e1metro, y se ejecute cuando se resuelva la promesa.</p> <p>La funci\u00f3n callback imprimir\u00e1 por consola el mensaje <code>La promesa se ha resuelto</code> si la promesa se resuelve.</p> <p>Consume la funci\u00f3n <code>callbackAsync</code> y muestra por consola el mensaje de \u00e9xito o error seg\u00fan corresponda.</p>"},{"location":"01js/061_actividades/#actividad-3","title":"Actividad 3","text":"<p>Dentro del script <code>async.js</code>, crea una promesa <code>weatherPromise</code> que realice una petici\u00f3n <code>fetch()</code> a la url <code>https://wttr.in/Valencia?format=j1</code> y devuelva el objeto JSON obtenido.</p> <p>Consume la funci\u00f3n <code>weatherPromise</code> y muestra por consola el objeto JSON obtenido. Lo puedes formatear con <code>JSON.stringify(jsonData, null, 2)</code> para que sea m\u00e1s legible, donde <code>jsonData</code> es el objeto JSON obtenido.</p>"},{"location":"01js/061_actividades/#actividad-4","title":"Actividad 4","text":"<p>Dentro del script <code>async.js</code>, crea una funci\u00f3n as\u00edncrona <code>currentWeatherAsync</code> que consuma la promesa anterior y muestre por consola la ciudad, descripci\u00f3n del estado actual (Clear, Cloudy, Light rain, ...), temperatura actual en grados Celsius, la sensaci\u00f3n t\u00e9rmica y la velocidad del viento en km/h.</p> <p>El mensaje debe ser algo similar a:</p> <pre><code>Ciudad: Valencia\nEstado: Clear\nTemperatura: 23\u00b0C\nSensaci\u00f3n t\u00e9rmica: 25\u00b0C\nViento: 6 km/h\n</code></pre> <p>Debes analizar el objeto JSON obtenido y extraer los datos necesarios del ejercicio anterior.</p> <p>Consume la funci\u00f3n <code>currentWeatherAsync</code>, muestra por consola los datos obtenidos y trata los errores que puedan surgir.</p>"},{"location":"01js/061_actividades/#actividad-5","title":"Actividad 5","text":"<p>Dentro del script <code>async.js</code>, crea la funci\u00f3n as\u00edncrona <code>weatherAsync</code> que reciba un nombre de ciudad (<code>city</code>) como par\u00e1metro y devuelva un nuevo objeto con la ciudad, estado, temperatura, sensaci\u00f3n t\u00e9rmica y velocidad del viento.</p> <p>La funci\u00f3n debe realizar una petici\u00f3n <code>fetch()</code> a la url <code>https://wttr.in/${city}?format=j1</code> y devolver el objeto JSON obtenido.</p> <p>Consume la funci\u00f3n <code>weatherAsync</code> con la ciudad de tu elecci\u00f3n y muestra por consola los datos obtenidos.</p> Ejemplo de objeto devuelto<pre><code>{\n  city: \"Berlin\",\n  state: \"Overcast\",\n  temperature: 10,\n  feelslike: 9,\n  wind: 8\n}\n</code></pre>"},{"location":"01js/061_actividades/#actividad-6","title":"Actividad 6","text":"<p>Dentro del script <code>poo.js</code>, crea las clases <code>Product</code> y <code>Store</code> tal y como se describen a continuaci\u00f3n.</p>"},{"location":"01js/061_actividades/#clase-product","title":"Clase <code>Product</code>:","text":"<p>La clase <code>Product</code> representa un producto de una tienda. Cada producto tiene un c\u00f3digo, un nombre, un precio y un n\u00famero de unidades.</p> <p>Propiedades:</p> <ul> <li><code>cod</code>: Privada. C\u00f3digo num\u00e9rico identificativo del producto.</li> <li><code>name</code>: Nombre del producto.</li> <li><code>price</code>: Privada. Precio unitario del producto.</li> <li><code>units</code>: N\u00famero de unidades del producto.</li> </ul> <p>Constructor:</p> <ul> <li>Recibe el c\u00f3digo, nombre, precio y unidades del producto.</li> <li>Si no recibe unidades su n\u00famero por defecto ser\u00e1 <code>1</code>.</li> </ul> <p>M\u00e9todos:</p> <ul> <li><code>getter</code> de <code>cod</code>.</li> <li> <p><code>getter</code> y <code>setter</code> de <code>price</code>.</p> </li> <li> <p><code>changeUnits</code><code>(units)</code> : Recibe la cantidad a cambiar (positiva o negativa) e incrementa o decrementa las unidades en la cantidad recibida.</p> <ul> <li>Devuelve la cantidad de unidades actualizada.</li> <li>No se debe permitir que las unidades sean menores de <code>0</code>.</li> </ul> </li> <li><code>getImport</code><code>()</code> : Devuelve el importe total del producto (su precio multiplicado por el n\u00ba de unidades).</li> <li> <p><code>getDescription</code><code>()</code> : Mostrar\u00e1 su descripci\u00f3n, sus unidades entre par\u00e9ntesis, su precio y el importe total. </p> <p>Por ejemplo: <code>TV Samsung MP45 (5): 235,95 \u20ac/u =&gt; 1179,75 \u20ac</code></p> </li> </ul>"},{"location":"01js/061_actividades/#clase-store","title":"Clase <code>Store</code>","text":"<p>La clase <code>Store</code> representa un almac\u00e9n de productos. Cada almac\u00e9n tiene un c\u00f3digo y un array de productos.</p> <p>Propiedades:</p> <ul> <li><code>id</code>: Privada. C\u00f3digo num\u00e9rico que nos pasan al crear el almac\u00e9n.</li> <li><code>products</code>. Privada. Array de <code>Product</code> que al crearlo estar\u00e1 vac\u00edo.</li> </ul> <p>Constructor:</p> <ul> <li>Recibe el c\u00f3digo del almac\u00e9n y lo guarda en la propiedad <code>id</code>.<ul> <li>Comprueba que el c\u00f3digo es un n\u00famero positivo. Si no lo es lanza un error.</li> </ul> </li> </ul> <p>M\u00e9todos:</p> <ul> <li><code>getter</code> de <code>id</code> : Devuelve el c\u00f3digo del almac\u00e9n.</li> <li><code>getter</code> de <code>products</code> : Devuelve el array de productos.</li> <li><code>findProduct</code><code>(cod)</code> : Recibe un c\u00f3digo de producto y devuelve el producto que tiene dicho c\u00f3digo o <code>null</code> si ese c\u00f3digo no existe en el almac\u00e9n.</li> <li><code>addProduct</code><code>(cod, units, nombre, precio)</code>: Recibe como par\u00e1metro el c\u00f3digo y unidades a a\u00f1adir y, opcionalmente, el nombre y precio (si se trata de un producto nuevo) y lo a\u00f1ade al almac\u00e9n.<ul> <li>Las unidades a a\u00f1adir pueden ser negativas.</li> <li>Si existe el c\u00f3digo suma al producto las unidades indicadas.</li> <li>Si no existe crea un nuevo producto en el array.<ul> <li>En caso de nuevo producto, si no se recibe el nombre o el precio se lanzar\u00e1 un error.</li> </ul> </li> </ul> </li> <li><code>delProduct</code><code>(cod, units)</code>: recibe como par\u00e1metro el c\u00f3digo y las unidades a quitar de un producto y lo resta del almac\u00e9n.<ul> <li>Si el producto no existe lanza un error.</li> <li>Si las unidades a quitar son mayores, lanza un aviso pero quita las unidades que pueda (no puede quedar con unidades negativas).</li> </ul> </li> <li><code>totalImport</code><code>()</code>: Devuelve el valor total de los productos del almac\u00e9n.</li> <li><code>orderByDescrip()</code>: devuelve el array de productos ordenado por el nombre.</li> <li><code>orderByUnits()</code>: devuelve el array de productos ordenado por unidades descendente.</li> <li><code>orderByPrice()</code>: devuelve el array de productos ordenado por precio unitario ascendente.</li> <li><code>lowStock()</code>: devuelve un array con los productos que tienen menos de 5 unidades en stock ordenados por unidades descendente.</li> <li><code>toString()</code>: Devuelve un string con el c\u00f3digo del almac\u00e9n y el n\u00famero de productos que tiene.</li> <li><code>valueOf()</code>: Devuelve el <code>id</code> del almac\u00e9n.</li> </ul>"},{"location":"01js/061_actividades/#ejemplo-de-uso","title":"Ejemplo de uso:","text":"<pre><code>let almacen = new Store(1);\n\nalmacen.addProduct(1, 4, 'TV Samsung MP45', 345.95);\nalmacen.addProduct(2, 4, 'Port\u00e1til Acer Travelmate 200', 245.95);\nalmacen.addProduct(3, 15, 'Impresora Epson LX-455', 45.95);\nalmacen.addProduct(4, 25, 'USB Kingston 16GB', 5.95);\nalmacen.addProduct(5, 10, 'USB Kingston 32GB', 9.95);\nalmacen.addProduct(6, 5, 'USB Kingston 64GB', 15.95);\n\nconsole.log('LISTADO DEL ALMAC\u00c9N');\nalmacen.orderByDescrip().forEach( prod =&gt; console.log(prod.getDescription()) );\n\nalmacen.addProduct(5, 15, 'USB Kingston 64GB', 15.95);\nalmacen.delProduct(3, 11);\nalmacen.delProduct(3, 7);\nalmacen.addProduct(1, 9);\n\nconsole.log('LISTADO DEL ALMAC\u00c9N ACTUALIZADO');\nalmacen.orderByDescrip().forEach( prod =&gt; console.log(prod.getDescription()) );\n\nconsole.log('IMPORTE TOTAL DEL ALMAC\u00c9N')\nconsole.log(almacen.totalImport())\n\nconsole.log('ORDENADO POR UNIDADES')\nalmacen.orderByUnits().forEach( prod =&gt; console.log(prod.getDescription()) )\n\nconsole.log('ORDENADO POR PRECIO')\nalmacen.orderByPrice().forEach( prod =&gt; console.log(prod.getDescription()) )\n\nconsole.log('PRODUCTOS CON STOCK BAJO')\nalmacen.lowStock().forEach( prod =&gt; console.log(prod.getDescription()) )\n</code></pre>"},{"location":"01js/061_actividades/#actividad-7","title":"Actividad 7","text":"<p>Dentro del script <code>poo.js</code>, crea la clase <code>Offer</code> que extienda la clase <code>Product</code> de la actividad anterior.</p> <p>Propiedades:</p> <ul> <li><code>discount</code> : descuento que se aplica al producto</li> <li><code>dateIni</code> : fecha de inicio de la oferta</li> <li><code>dateEnd</code> : fecha de fin de la oferta</li> </ul> <p>A\u00f1ade los siguientes m\u00e9todos:</p> <ul> <li><code>getImport</code><code>()</code> : Devuelve el importe total del producto con el descuento aplicado.</li> <li><code>getDescription</code><code>()</code> : Mostrar\u00e1 su descripci\u00f3n, sus unidades entre par\u00e9ntesis, su precio, el descuento aplicado, el precio con el descuento y las fechas de inicio y fin de la oferta. Por ejemplo: _Por ejemplo: <code>PS5 Pro (5): 799.99 \u20ac/u (-10%) =&gt; 719.99 \u20ac (21/11/2024 - 30/11/2024)</code></li> </ul> <p>Ejemplo de uso:</p> <pre><code>console.log('OFERTAS');\n\nlet oferta = new Offer(6, 'PS5 Pro', 799.99, 100, 10, '21/11/2024', '30/11/2024');\nconsole.log(oferta.getDescription());\nconsole.log(oferta.getImport());\n\nlet oferta2 = new Offer(7, 'Nintendo Switch 2', 399.95, 200, 15, '10/10/2024', '25/10/2024');\nconsole.log(oferta2.getDescription());\nconsole.log(oferta2.getImport());\n</code></pre> <p>Comprueba que se muestra correctamente la descripci\u00f3n del producto con el descuento aplicado.</p> <pre><code>OFERTAS\nPS5 Pro (100): 799.99 \u20ac/u (-10%) =&gt; 719.99 \u20ac (21/11/2024 - 30/11/2024)\n71999.0\nNintendo Switch 2 (200): 399.95 \u20ac/u (-15%) =&gt; 339.96 \u20ac (10/10/2024 - 25/10/2024)\n67992.0\n</code></pre>"},{"location":"01js/061_actividades/#actividad-8","title":"Actividad 8","text":"<p>Dentro del script <code>poo.js</code>, crea la clase <code>FilterProducts</code>. Esta clase tendr\u00e1 un array de productos con los que se va a trabajar.</p> <p>Propiedades:</p> <ul> <li><code>products</code> : Array de productos.</li> </ul> <p>Constructor:</p> <ul> <li>Recibe un array de productos y lo guarda en la propiedad <code>products</code>.</li> </ul> <p>M\u00e9todos:</p> <ul> <li><code>toString</code><code>()</code> : Devuelve un string con la descripci\u00f3n de todos los productos del array. Un producto por l\u00ednea.</li> <li><code>filterByPrice</code><code>(min, max)</code> : Recibe dos valores num\u00e9ricos que representan el precio m\u00ednimo y m\u00e1ximo.<ul> <li><code>min</code> por defecto ser\u00e1 <code>0</code>.</li> <li><code>max</code> por defecto ser\u00e1 <code>Infinity</code>.</li> <li>Devuelve un nuevo objeto <code>FilterProducts</code> con los productos cuyo precio est\u00e1 entre esos valores.</li> </ul> </li> <li><code>filterByUnits</code><code>(min, max)</code> : Recibe dos valores num\u00e9ricos que representan el n\u00famero m\u00ednimo y m\u00e1ximo de unidades.<ul> <li><code>min</code> por defecto ser\u00e1 <code>0</code>.</li> <li><code>max</code> por defecto ser\u00e1 <code>Infinity</code>.</li> <li>Devuelve un nuevo objeto <code>FilterProducts</code> con los productos cuyo n\u00famero de unidades est\u00e1 entre esos valores.</li> </ul> </li> <li><code>filterByDescription</code><code>(text)</code> : Recibe un texto y devuelve un nuevo objeto <code>FilterProducts</code> con los productos cuya descripci\u00f3n contiene ese texto (sin distinguir may\u00fasculas y min\u00fasculas).<ul> <li><code>text</code> por defecto ser\u00e1 <code>''</code>.</li> <li>Devuelve un nuevo objeto <code>FilterProducts</code> con los productos cuya descripci\u00f3n contiene ese texto.</li> </ul> </li> <li><code>sortByName</code><code>()</code>: Devuelve un nuevo objeto <code>FilterProducts</code> con los productos ordenados por nombre, sin distinguir may\u00fasculas y min\u00fasculas.</li> <li><code>sortByPrice</code><code>()</code>: Devuelve un nuevo objeto <code>FilterProducts</code> con los productos ordenados por precio.</li> <li><code>sortByUnits</code><code>()</code>: Devuelve un nuevo objeto <code>FilterProducts</code> con los productos ordenados por unidades.</li> </ul> <p>Comprueba que se muestran correctamente los productos filtrados.</p> <pre><code>let filtroPrecio = new FilterProducts(almacen.products);\n\n\nconsole.log('FILTRADO POR PRECIO');\n// Filtramos los productos cuyo precio est\u00e1 entre 10 y 50 \u20ac\nlet filtradoPrecio = filtroPrecio.filterByPrice(10, 50);\nconsole.log(filtradoPrecio.toString());\n\nconsole.log('FILTRADO POR UNIDADES');\n// Filtramos los productos cuyas unidades est\u00e1n entre 5 y 20\nlet filtradoUnidades = filtroPrecio.filterByUnits(5, 20);\nconsole.log(filtradoUnidades.toString());\n\nconsole.log('FILTRADO POR DESCRIPCI\u00d3N');\n// Filtramos los productos cuya descripci\u00f3n contiene 'TV'\nlet filtradoDescrip = filtroPrecio.filterByDescription('king');\nconsole.log(filtradoDescrip.toString());\n\nconsole.log('ORDENADO POR NOMBRE');\n// Ordenamos los productos por nombre\nlet ordenadoNombre = filtroPrecio.sortByName();\nconsole.log(ordenadoNombre.toString());\n\n// Combina varios filtros y ordenaciones\nconsole.log('FILTRADO Y ORDENADO');\n// Filtramos los productos cuyo precio est\u00e1 entre 10 y 50 \u20ac y sus unidades entre 5 y 20, ordenados por precio\nlet combinacion = filtroPrecio.filterByPrice(10, 50).filterByUnits(5, 20).sortByPrice();\nconsole.log(combinacion.toString());\n\n// De esta forma se pueden encadenar varios m\u00e9todos\n// para hacer varias operaciones consecutivas\n// de filtrado y ordenaci\u00f3n sobre el array de productos.\n//\n// En aplicaciones reales se suelen hacer varias operaciones de este tipo\n// seg\u00fan las preferencias del usuario.\n</code></pre>"},{"location":"01js/062_example/","title":"\u270d\ufe0f Ejercicio de refuerzo sobre programaci\u00f3n as\u00edncrona y orientada a objetos","text":""},{"location":"01js/062_example/#1-promesa-con-retraso-personalizado","title":"1: Promesa con Retraso Personalizado","text":"<p>Crea una promesa llamada <code>delayedPromise</code> que se resuelva despu\u00e9s de un tiempo definido por el usuario (en milisegundos) y devuelva un mensaje que diga \"<code>Operaci\u00f3n completada</code>\". Si se resuelve en menos de <code>500 ms</code>, el mensaje debe ser \"<code>Operaci\u00f3n r\u00e1pida</code>\", y si tarda m\u00e1s, se debe rechazar la promesa con el mensaje \"<code>Operaci\u00f3n lenta</code>\".</p> <p>Objetivo: Comprender el manejo b\u00e1sico de promesas con diferentes condiciones de resoluci\u00f3n.</p>"},{"location":"01js/062_example/#3-funcion-asincrona-con-manejo-de-errores","title":"3: Funci\u00f3n As\u00edncrona con Manejo de Errores","text":"<p>Desarrolla la funci\u00f3n as\u00edncrona <code>handlePromise</code> que usar\u00e1 <code>delayedPromise</code> y recibir\u00e1 un callback. Si la promesa se resuelve exitosamente, ejecuta el callback, que imprimir\u00e1 \"<code>La promesa se ha resuelto con \u00e9xito</code>\". Si ocurre un error, imprime \"<code>Error en la promesa</code>\".</p> <p>Objetivo: Aprender a manejar errores en promesas y funciones as\u00edncronas.</p>"},{"location":"01js/062_example/#3-obtener-informacion-de-un-usuario","title":"3: Obtener Informaci\u00f3n de un Usuario","text":"<p>Crea una promesa <code>userPromise</code> que haga una solicitud <code>fetch()</code> a la API de un servicio p\u00fablico, como <code>https://jsonplaceholder.typicode.com/users/1</code>, y devuelva el objeto JSON del usuario. Consume la promesa y muestra el objeto JSON en la consola, utilizando <code>JSON.stringify(jsonData, null, 2)</code>.</p> <p>Objetivo: Familiarizarse con la obtenci\u00f3n de datos de una API utilizando <code>fetch</code>.</p>"},{"location":"01js/062_example/#4-funcion-asincrona-para-mostrar-informacion-del-usuario","title":"4: Funci\u00f3n As\u00edncrona para Mostrar Informaci\u00f3n del Usuario","text":"<p>Desarrolla la funci\u00f3n as\u00edncrona <code>displayUserInfo</code> que consuma <code>userPromise</code>. Esta funci\u00f3n debe extraer y mostrar en consola el nombre del usuario, su correo electr\u00f3nico y su direcci\u00f3n.</p> <p>Formato de salida esperado: <pre><code>Nombre: Leanne Graham\nCorreo: Sincere@april.biz\nDirecci\u00f3n: 26, Gilbert Avenue\n</code></pre></p> <p>Objetivo: Aprender a manipular y mostrar datos obtenidos de una API.</p>"},{"location":"01js/062_example/#5-funcion-asincrona-para-buscar-posts-y-comentarios-de-un-usuario","title":"5: Funci\u00f3n As\u00edncrona para Buscar Posts y Comentarios de un Usuario","text":"<p>Crea una funci\u00f3n as\u00edncrona <code>getUserPosts</code> que reciba el ID de un usuario y devuelva un objeto con los posts y comentarios de ese usuario. Utiliza las APIs <code>https://jsonplaceholder.typicode.com/posts?userId=${user_id}&amp;_limit=2</code> y <code>https://jsonplaceholder.typicode.com/posts/${postId}/comments?&amp;_limit=2</code> para obtener los datos. Se limita a 2 posts y 2 comentarios por post para simplificar la salida.</p> <p>Esta es una tarea m\u00e1s compleja que implica la gesti\u00f3n de m\u00faltiples promesas y la combinaci\u00f3n de datos de diferentes fuentes. No se pueden obtener los comentarios, primero se deben obtener los posts y luego los comentarios de cada post.</p> <p>Formato de salida esperado: <pre><code>Posts de Leanne Graham:\n1. sunt aut facere repellat provident occaecati excepturi optio reprehenderit\n   \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n\n    Comentario: id labore ex et quam laborum\n    Comentario: quia et suscipit\n\n2. qui est esse\n   \"est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\"\n\n    Comentario: est natus enim nihil est dolore omnis voluptatem numquam\n    Comentario: omnis nemo voluptatem est\n</code></pre></p> <p>Posts de Ervin Howell:</p> <p>Objetivo: Practicar la manipulaci\u00f3n de m\u00faltiples promesas y la combinaci\u00f3n de datos de diferentes fuentes.</p>"},{"location":"01js/062_example/#6-clases-de-estudiante-y-escuela","title":"6: Clases de Estudiante y Escuela","text":"<p>En el script <code>poo.js</code>, crea las clases <code>Student</code> y <code>School</code> seg\u00fan las especificaciones dadas:</p>"},{"location":"01js/062_example/#clase-student","title":"Clase <code>Student</code>","text":"<ul> <li>Propiedades: <code>id</code>, <code>name</code>, <code>grades</code></li> <li>M\u00e9todos: <code>addGrade()</code>, <code>getAverage()</code>, <code>getDescription()</code></li> </ul>"},{"location":"01js/062_example/#clase-school","title":"Clase <code>School</code>","text":"<ul> <li>Propiedades: <code>name</code>, <code>students</code></li> <li>M\u00e9todos: <code>addStudent()</code>, <code>getAllStudents()</code>, <code>getStudentById()</code></li> </ul> <p>Ejemplo de uso: <pre><code>let school = new School(\"Greenwood High\");\nschool.addStudent(1, \"Alice\");\nschool.addStudent(2, \"Bob\");\nconsole.log(school.getAllStudents());\n</code></pre></p> <p>Objetivo: Comprender la estructura de clases y la manipulaci\u00f3n de objetos en JavaScript.</p>"},{"location":"01js/062_example/#7-clase-de-estudiante-con-descuento","title":"7: Clase de Estudiante con Descuento","text":"<p>Crea la clase <code>ScholarshipStudent</code> que extienda de <code>Student</code>. Esta clase debe incluir una propiedad para el porcentaje de descuento en las tasas escolares. A\u00f1ade m\u00e9todos para calcular el importe a pagar despu\u00e9s de aplicar el descuento y mostrar la descripci\u00f3n del estudiante con el descuento.</p> <p>Ejemplo de uso: <pre><code>let scholarshipStudent = new ScholarshipStudent(3, \"Charlie\", 20);\nconsole.log(scholarshipStudent.getDescription());\nconsole.log(\"Total a pagar: $\" + scholarshipStudent.calculateTuition());\n</code></pre></p> <p>Objetivo: Aprender sobre herencia en programaci\u00f3n orientada a objetos y c\u00f3mo a\u00f1adir funcionalidad espec\u00edfica.</p>"},{"location":"01js/062_example/#8-filtros-de-estudiantes","title":"8: Filtros de Estudiantes","text":"<p>Desarrolla la clase <code>FilterStudents</code> que tenga m\u00e9todos para filtrar y ordenar estudiantes basados en sus calificaciones. Implementa m\u00e9todos para devolver una descripci\u00f3n de los estudiantes filtrados.</p> <p>Ejemplo de uso: <pre><code>let filterStudents = new FilterStudents(school.getAllStudents());\nlet filteredStudents = filterStudents.filterByGrade(75, 100);\nconsole.log(filteredStudents.toString());\n</code></pre></p> <p>Objetivo: Implementar funcionalidades avanzadas de filtrado y ordenaci\u00f3n de datos.</p>"},{"location":"01js/06_poo/","title":"1.6 Programaci\u00f3n Orientada a Objetos","text":""},{"location":"01js/06_poo/#introduccion","title":"Introducci\u00f3n","text":"<p>Desde ES2015 la POO en Javascript es similar a como se hace en otros lenguajes:</p> Ejemplo de clase en ES2015<pre><code>class Alumno {\n    constructor(nombre, apellidos, edad) {\n        this.nombre = nombre\n        this.apellidos = apellidos\n        this.edad = edad\n    }\n\n    getInfo() {\n        return `El alumno ${this.nombre} ${this.apellidos} tiene ${this.edad} a\u00f1os`\n    }\n}\n\nlet alumno = new Alumno('Carlos', 'P\u00e9rez Ortiz', 19)\n\nconsole.log(alumno.getInfo())\n// imprime 'El alumno Carlos P\u00e9rez Ort\u00edz tiene 19 a\u00f1os'\n</code></pre>"},{"location":"01js/06_poo/#this","title":"this","text":"<p>Dentro de una funci\u00f3n se crea un nuevo contexto y la <code>this</code> pasa a hacer referencia a dicho contexto. Si en el ejemplo anterior hici\u00e9ramos algo como esto:</p> <pre><code>class Alumno {\n    ...\n    getInfo() {\n        function nomAlum() {\n            return this.nombre + ' ' + this.apellidos\n            // Aqu\u00ed this no es el objeto Alumno\n        }\n\n        return 'El alumno ' + nomAlum() + ' tiene ' + this.edad + ' a\u00f1os'\n    }\n}\n</code></pre> <p>Este c\u00f3digo fallar\u00eda porque dentro de la funci\u00f3n <code>nomAlum</code> la variable <code>this</code> ya no hace referencia al objeto <code>Alumno</code> sino al contexto de la funci\u00f3n. Este ejemplo no tiene mucho sentido pero es com\u00fan en callbacks de eventos. </p> <p>Si debemos llamar a una funci\u00f3n dentro de un m\u00e9todo (o de un callback) tenemos varias formas de pasarle el valor de <code>this</code>:</p> <ul> <li> <p>Usando una arrow function que no crea un nuevo contexto por lo que <code>this</code> conserva su valor:</p> <pre><code>    getInfo() {\n        let nomAlum = () =&gt; this.nombre + ' ' + this.apellidos\n\n        return 'El alumno ' + nomAlum() + ' tiene ' + this.edad + ' a\u00f1os'\n    }\n</code></pre> </li> <li> <p>Pas\u00e1ndole <code>this</code> como par\u00e1metro a la funci\u00f3n:</p> <pre><code>    getInfo() {\n        function nomAlum(alumno) {\n            return alumno.nombre + ' ' + alumno.apellidos\n        }\n\n        return 'El alumno ' + nomAlum(this) +' tiene ' + this.edad + ' a\u00f1os'\n    }\n</code></pre> </li> <li> <p>Guardando el valor en otra variable (como <code>that</code>):</p> <pre><code>    getInfo() {\n        let that = this;\n\n        function nomAlum() {\n            return that.nombre + ' ' + that.apellidos\n            // Aqu\u00ed this no es el objeto Alumno\n        }\n\n        return 'El alumno ' + nomAlum() +' tiene ' + this.edad + ' a\u00f1os'\n    }\n</code></pre> </li> <li> <p>Haciendo un bind de this en eventos:</p> <pre><code>    getInfo() {\n        function nomAlum() {\n            return this.nombre + ' ' + this.apellidos\n            // Aqu\u00ed this no es el objeto Alumno\n        }\n\n        return 'El alumno ' + nomAlum.bind(this)() +' tiene ' + this.edad + ' a\u00f1os'\n    }\n</code></pre> </li> </ul>"},{"location":"01js/06_poo/#herencia","title":"Herencia","text":"<p>Una clase puede heredar de otra utilizando la palabra reservada extends y heredar\u00e1 todas sus propiedades y m\u00e9todos. Podemos sobrescribirlos en la clase hija. Seguimos pudiendo llamar a los m\u00e9todos de la clase padre utilizando la palabra reservada <code>super</code>, es lo que haremos si creamos un constructor en la clase hija.</p> Ejemplo de herencia<pre><code>class AlumnInf extends Alumno {\n\n  constructor (nombre, apellidos, edad, ciclo) {\n    super(nombre, apellidos, edad)\n    this.ciclo = ciclo\n  }\n\n  getInfo() {\n    return `${super.getInfo()} y estudia el Grado ${this.getGradoMedio() ? 'Medio' : 'Superior'} de ${this.ciclo}`\n  }\n\n  getGradoMedio() {\n    return this.ciclo.toUpperCase === 'SMX'\n  }\n}\n\nlet alumnoInf = new AlumnInf('Carlos', 'P\u00e9rez Ortiz', 19, 'DAM')\nconsole.log(alumnoInf.getInfo())\n// imprime 'El alumno Carlos P\u00e9rez Ort\u00edz tiene 19 a\u00f1os y estudia el Grado Superior de DAM'\n</code></pre>"},{"location":"01js/06_poo/#metodos-estaticos","title":"M\u00e9todos est\u00e1ticos","text":"<p>Desde ES2015 podemos declarar m\u00e9todos est\u00e1ticos, pero no propiedades est\u00e1ticas. Estos m\u00e9todos se llaman directamente utilizando el nombre de la clase y no tienen acceso al objeto <code>this</code> (ya que no hay objeto instanciado).</p> <pre><code>class User {\n    ...\n    static getRoles() {\n        return [\"user\", \"guest\", \"admin\"]\n    }\n}\n\nconsole.log(User.getRoles())\n// [\"user\", \"guest\", \"admin\"]\n\nlet user = new User(\"john\")\nconsole.log(user.getRoles())\n// Uncaught TypeError: user.getRoles is not a function\n</code></pre>"},{"location":"01js/06_poo/#metodo-tostring","title":"M\u00e9todo toString()","text":"<p>Al convertir un objeto a string (por ejemplo al concatenarlo con un String) se llama al m\u00e9todo .toString() del mismo, que por defecto devuelve la cadena <code>[object Object]</code>. Podemos sobrecargar este m\u00e9todo para que devuelva lo que queramos:</p> <pre><code>class Alumno {\n    ...\n    toString() {\n        return this.apellidos + ', ' + this.nombre\n    }\n}\n\nlet alumno = new Alumno('Carlos', 'P\u00e9rez Ortiz', 19);\n\nconsole.log(alumno.toString()) // 'P\u00e9rez Ortiz, Carlos'\nconsole.log(alumno) // Alumno { nombre: 'Carlos', apellidos: 'P\u00e9rez Ortiz', edad: 19 }\nconsole.log(alumno + '') // 'P\u00e9rez Ortiz, Carlos'\nconsole.log(`${alumno}`) // 'P\u00e9rez Ortiz, Carlos'\n</code></pre> <p>Este m\u00e9todo tambi\u00e9n es el que se usar\u00e1 si queremos ordenar una array de objetos (recordad que <code>.sort()</code> ordena alfab\u00e9ticamente para lo que llama al m\u00e9todo <code>.toString()</code> del objeto a ordenar). Por ejemplo, tenemos el array de alumnos <code>misAlumnos</code> que queremos ordenar alfab\u00e9ticamente. Si la clase <code>Alumno</code> no tiene un m\u00e9todo <code>toString</code> habr\u00eda que hacer como vimos los contenidos acerca de arrays:</p> <pre><code>misAlumnos.sort(function(alum1, alum2) {\n  return alum1.apellidos.localeCompare(alum2.apellidos)\n});\n</code></pre> <p>Pero con el m\u00e9todo <code>toString()</code> que hemos definido antes podemos hacer directamente:</p> <pre><code>misAlumnos.sort() \n</code></pre> <p>Para ordenar por otro crit\u00e9rio distinto de <code>toString()</code> debemos indicarlo:</p> <pre><code>misAlumnos.sort(function(alum1, alum2) {\n    return alum1.edad - alum2.edad\n})\n</code></pre>"},{"location":"01js/06_poo/#metodo-valueof","title":"M\u00e9todo valueOf()","text":"<p>Al comparar objetos (con <code>&gt;</code>, <code>&lt;</code>, <code>==</code>, <code>===</code>, etc.) se usa el valor devuelto por el m\u00e9todo <code>.toString()</code> pero si definimos un m\u00e9todo <code>.valueOf()</code> ser\u00e1 este el que se usar\u00e1 en comparaciones:</p> <pre><code>class Alumno {\n    ...\n    valueOf() {\n        return this.edad\n    }\n}\n\nlet alumno1 = new Alumno('Carlos', 'P\u00e9rez Ortiz', 19)\nlet alumno2 = new Alumno('Ana', 'Abad Tudela', 23)\nconsole.log(alumno1 &lt; alumno2)     // imprime true ya que 19 &lt; 23\n</code></pre>"},{"location":"01js/06_poo/#propiedades-privadas","title":"Propiedades privadas","text":"<p>En ES2019 se a\u00f1adi\u00f3 el hastag <code>#</code> para declarar variables privadas en las clases. Estas variables solo son accesibles desde la clase en la que se declaran.</p> <p>Tambi\u00e9n se pueden definir getters y setters para acceder a estas variables privadas.</p> Ejemplo de clase con propiedades privadas getters y setters<pre><code>class Alumno {\n    // propiedad privada\n    #dni\n\n    constructor(nombre, apellidos, edad, dni) {\n        this.nombre = nombre\n        this.apellidos = apellidos\n        this.edad = edad\n        this.#dni = dni\n    }\n\n    // se define un getter para acceder a la variable privada\n    get dni() {\n        return this.#dni\n    }\n\n    // se define un setter para modificar la variable privada\n    set dni(dni) {\n      if (this.#validateDni(dni)) {\n        this.#dni = dni\n      }\n      else {\n        throw new Error('DNI no v\u00e1lido')\n      }\n    }\n\n    // m\u00e9todo privado\n    #validateDni(dni) {\n        // c\u00f3digo para validar el DNI ...\n        return true\n    }\n}\n\nlet alumno = new Alumno('Carlos', 'P\u00e9rez Ortiz', 19, '12345678A')\n\n// no se puede acceder a la propiedad privada\nconsole.log(alumno.#dni) // Uncaught SyntaxError: Private field '#dni' must be declared in an enclosing class\n\n// uso del getter\nconsole.log(alumno.dni) // imprime '12345678A'\n\n// uso del setter\nalumno.dni = '87654321B' // cambia el DNI\n</code></pre>"},{"location":"02nodejs/","title":"2 NodeJS","text":"<ul> <li>2.1 M\u00f3dulos</li> <li>2.2 Eventos</li> <li>2.3 Servidores y ficheros</li> </ul>"},{"location":"02nodejs/01_modules/","title":"2.1 M\u00f3dulos en Node.js","text":""},{"location":"02nodejs/01_modules/#introduccion","title":"Introducci\u00f3n","text":"<p>Node.js es un framework altamente modularizado. Esto significa que est\u00e1 compuesto por numerosos m\u00f3dulos, librer\u00edas o paquetes (usaremos estos t\u00e9rminos de manera intercambiable). Esta estructura permite que solo agreguemos a nuestros proyectos los m\u00f3dulos que realmente necesitamos.</p> <p>El n\u00facleo de Node.js incorpora algunas librer\u00edas de uso habitual. Por ejemplo:</p> <ul> <li><code>http</code> y <code>https</code>, para hacer que nuestra aplicaci\u00f3n se comporte como un servidor web, o como un servidor web seguro o cifrado, respectivamente.</li> <li><code>fs</code> para acceder al sistema de archivos</li> <li><code>utils</code>, con algunas funciones de utilidad, tales como formato de cadenas de texto.</li> </ul> <p>Para ver la lista detallada de m\u00f3dulos podemos consultar https://nodejs.org/api/, donde aparecen todos los m\u00f3dulos incorporados en el n\u00facleo de Node.js.</p>"},{"location":"02nodejs/01_modules/#modulos-del-nucleo-de-nodejs","title":"M\u00f3dulos del n\u00facleo de Node.js","text":"<p>Para utilizar cualquier m\u00f3dulo (propio de Node.js o hecho por terceras partes) en una aplicaci\u00f3n es necesario incluirlo en nuestro c\u00f3digo con la instrucci\u00f3n <code>require</code>. Recibe como par\u00e1metro el nombre del m\u00f3dulo a a\u00f1adir, como una cadena de texto.</p> <p>Por ejemplo, vamos a crear un archivo llamado <code>listado.js</code>. En \u00e9l vamos a hacer un peque\u00f1o programa que utilice el m\u00f3dulo <code>fs</code> incorporado en el n\u00facleo de Node.js para obtener un listado de todos los archivos y subcarpetas de una carpeta determinada:</p> listado.js<pre><code>const\u00a0fs\u00a0=\u00a0require('fs')\nconst PATH =\u00a0'C:/\\Program\u00a0Files'\n\nfs.readdirSync(PATH).forEach(fichero =&gt; {\n    console.log(fichero)\n})\n</code></pre> <p>Si ejecutamos este programa en el terminal (recordemos que podemos usar el terminal integrado de Visual Studio Code), obtendremos el listado de la carpeta indicada:</p> <p></p>"},{"location":"02nodejs/01_modules/#utilizar-modulos-propios","title":"Utilizar m\u00f3dulos propios","text":"<p>Cuando estamos haciendo un proyecto mediano o grande es conveniente descomponer nuestra aplicaci\u00f3n en diferentes m\u00f3dulos.</p> <p>Para hacer esto podemos crear un archivo para cada m\u00f3dulo, y en cada uno de ellos definir las funciones y variables que necesitemos. Para poder utilizar estas funciones y variables en otros m\u00f3dulos, es necesario exportarlas. Para ello, Node.js nos proporciona un objeto llamado <code>module.exports</code>.</p> <p>Por ejemplo, dentro de una misma carpeta creamos dos ficheros: <code>utilidades.js</code> y <code>principal.js</code> dentro de la misma carpeta. El fichero utilidades contendr\u00e1:</p> utilidades.js<pre><code>// c\u00f3digo\u00a0independiente,\u00a0si\u00a0es\u00a0necesario\nconsole.log('Entrando\u00a0en\u00a0utilidades.js')\n\n//funciones\nlet\u00a0sumar\u00a0=\u00a0(num1,\u00a0num2)\u00a0=&gt;\u00a0num1\u00a0+\u00a0num2\nlet\u00a0restar\u00a0=\u00a0(num1,\u00a0num2)\u00a0=&gt;\u00a0num1\u00a0-\u00a0num2\n\n//para\u00a0exportar\u00a0funciones\u00a0es\u00a0necesario\u00a0decirlo\u00a0expl\u00edcitamente\nmodule.exports\u00a0=\u00a0{\n\u00a0\u00a0\u00a0\u00a0sumar:\u00a0sumar,\n\u00a0\u00a0\u00a0\u00a0restar:\u00a0restar\n}\n</code></pre> <p>Y el fichero principal:</p> principal.js<pre><code>//para\u00a0usar\u00a0un\u00a0m\u00f3dulo\u00a0es\u00a0necesario\u00a0un\u00a0require:\nconst\u00a0utilidades\u00a0=\u00a0require('./utilidades')\n\n//Ahora\u00a0podemos\u00a0usar\u00a0las\u00a0funciones\u00a0definidas\u00a0en\u00a0el\u00a0m\u00f3dulo:\nconsole.log(utilidades.sumar(3,\u00a02))\nconsole.log(utilidades.restar(3,\u00a02))\n</code></pre> <p>Si ejecutamos el fichero principal, obtendremos la suma y la resta de los dos n\u00fameros:</p> <pre><code>&gt; node principal.js\nEntrando en utilidades.js\n5\n1\n</code></pre> <p>El objeto <code>module.exports</code> admite tanto funciones como atributos o propiedades. Por ejemplo, podr\u00edamos definir una propiedad para almacenar el valor del n\u00famero \"pi\":</p> utilidades.js<pre><code>module.exports\u00a0=\u00a0{\n\u00a0\u00a0\u00a0\u00a0pi:\u00a03.1416,\n\u00a0\u00a0\u00a0\u00a0sumar:\u00a0sumar,\n\u00a0\u00a0\u00a0\u00a0restar:\u00a0restar\n}\n</code></pre> <p>El ejemplo anterior funcionar\u00e1 siempre que ejecutemos la aplicaci\u00f3n NodeJS desde su misma carpeta.</p> <pre><code>C:\\ProyectosNode\\Pruebas\\PruebasRequire&gt; node principal.js\n</code></pre> <p>Pero si estamos en otra carpeta y ejecutamos la aplicaci\u00f3n desde all\u00ed, no funcionar\u00e1:</p> <pre><code>C:\\OtraCarpeta&gt; node C:\\ProyectosNode\\Pruebas\\PruebasRequire\\principal.js\n</code></pre> <p>Entonces <code>require</code> har\u00e1 referencia a la carpeta desde donde estamos ejecutando, y no encontrar\u00e1 el archivo <code>utilidades.js</code>, en este caso. Para evitar este problema, podemos emplear la propiedad <code>__dirname</code>, que hace referencia a la carpeta del m\u00f3dulo que se est\u00e1 ejecutando (<code>principal.js</code>, en este caso):</p> principal.js<pre><code>const utilidades = require(__dirname + '/utilidades')\n</code></pre>"},{"location":"02nodejs/01_modules/#modulos-de-terceros-npm","title":"M\u00f3dulos de terceros. NPM","text":"<p>npm (Node Package Manager) es un gestor de paquetes para Javascript, y se instala conjuntamente con Node.js. Podemos comprobar si lo tenemos instalado y cu\u00e1l es su versi\u00f3n con el siguiente comando:</p> <pre><code>npm -v\n</code></pre> <p>Aunque tambi\u00e9n nos servir\u00e1 el comando <code>npm --version</code>.</p> <p>Inicialmente, <code>npm</code> se pens\u00f3 como un gestor para poder instalar m\u00f3dulos en las aplicaciones Node.js, pero se ha convertido en mucho m\u00e1s que eso, y a trav\u00e9s de \u00e9l podemos tambi\u00e9n descargar e instalar en nuestras aplicaciones otros m\u00f3dulos o librer\u00edas que no tienen que ver con Node.js, como por ejemplo jQuery.</p> <p>El registro de librer\u00edas o m\u00f3dulos gestionado por NPM est\u00e1 en la web https://www.npmjs.com/. En esta web podemos buscar m\u00f3dulos, ver su documentaci\u00f3n y ver ejemplos de uso.</p>"},{"location":"02nodejs/01_modules/#instalar-modulos-locales-a-un-proyecto","title":"Instalar m\u00f3dulos locales a un proyecto","text":"<p>La configuraci\u00f3n b\u00e1sica de los proyectos Node.js se almacena en un archivo JSON llamado \"<code>package.json</code>\". Este archivo se puede crear directamente desde l\u00ednea de comandos:</p> <pre><code>npm init\n</code></pre> <p>Se iniciar\u00e1 un asistente en el terminal para que demos valor a cada atributo de la configuraci\u00f3n. Lo m\u00e1s t\u00edpico es rellenar el nombre del proyecto, la versi\u00f3n, el autor y poco m\u00e1s. Muchas opciones tienen valores por defecto puestos entre par\u00e9ntesis, por lo que si pulsamos <code>Intro</code> se asignar\u00e1 dicho valor sin m\u00e1s.</p> <p>Para instalar un m\u00f3dulo externo en un proyecto determinado, debemos abrir un terminal y situarnos en la carpeta del proyecto. Despu\u00e9s, escribimos el siguiente comando:</p> <pre><code>npm install nombre_modulo\n</code></pre> <p>Vamos a probar con un m\u00f3dulo sencillo y muy utilizado (tiene millones de descargas semanalmente), ya que contiene una serie de utilidades para facilitarnos el desarrollo de nuestros proyectos. Se trata del m\u00f3dulo \"<code>lodash</code>\", que pod\u00e9is consultar en la web citada anteriormente https://www.npmjs.com/package/lodash. Para instalarlo en nuestro proyecto, ejecutamos el siguiente comando:</p> <pre><code>npm install lodash\n</code></pre> <p>Tras ejecutar el comando anterior, se habr\u00e1 a\u00f1adido el nuevo m\u00f3dulo en una subcarpeta \"<code>node_modules/</code>\" dentro de nuestro proyecto.</p> <p>Adem\u00e1s se modifica el archivo \"<code>package.json</code>\" de configuraci\u00f3n con el nuevo m\u00f3dulo incluido en el bloque de dependencias:</p> package.json<pre><code>\"dependencies\": {\n    \"lodash\": \"^4.17.21\"\n}\n</code></pre> <p>Para poder utilizar el nuevo m\u00f3dulo, procederemos de la misma forma que para utilizar m\u00f3dulos predefinidos de Node: emplearemos la instrucci\u00f3n <code>require</code> con el nombre original del m\u00f3dulo, por ejemplo:</p> <pre><code>const _ = require('lodash')\n\nconsole.log(_.difference([1, 2, 3], [1]))\n</code></pre> <p>Si ejecutamos este ejemplo desde el terminal, obtendremos lo siguiente:</p> <pre><code>&gt; node principal.js\n[ 2, 3 ]\n</code></pre> <p>Si decidimos subir nuestro proyecto a alg\u00fan repositorio en Internet como Github o similares, o dejar que alguien se lo descargue para modificarlo despu\u00e9s o simplemente para copiar el proyecto en otra carpeta, no es buena idea subir la carpeta \"<code>node_modules/</code>\", ya que puede llegar a ser muy grande. Por lo tanto, lo recomendable es no compartir la carpeta \"<code>node_modules/</code>\", y no es ning\u00fan problema hacer eso, ya que gracias al archivo \"<code>package.json</code>\" siempre podemos ejecutar el comando:</p> <pre><code>npm install\n</code></pre> <p>Este comando leer\u00e1 el archivo \"<code>package.json</code>\" y descargar\u00e1 todos los m\u00f3dulos que se encuentren en \u00e9l, creando la carpeta \"<code>node_modules/</code>\" y descargando en ella todos los m\u00f3dulos necesarios.</p> <p>Para desinstalar un m\u00f3dulo (y eliminarlo del archivo \"<code>package.json</code>\", si existe), escribimos el comando siguiente:</p> <pre><code>npm uninstall nombre_modulo\n</code></pre>"},{"location":"02nodejs/01_modules/#instalar-modulos-globales-al-sistema","title":"Instalar m\u00f3dulos globales al sistema","text":"<p>Para cierto tipo de m\u00f3dulos, aquellos que se ejecutan desde terminal como Nodemon un watcher de Node.js, eslint para comprobaci\u00f3n de c\u00f3digo Javascript, Gulp para automatizaci\u00f3n de tareas, TypeScript para trabajar con este lenguaje, JSHint para comprobaci\u00f3n de sintaxis Javascript, etc., es conveniente instalarlos de forma global en el sistema para poder usarlos en cualquier proyecto.</p> <p>La forma de hacer esto es similar a la instalaci\u00f3n de un m\u00f3dulo en un proyecto concreto, a\u00f1adiendo alg\u00fan par\u00e1metro adicional, y con la diferencia de que, en este caso, no es necesario un archivo \"<code>package.json</code>\" para gestionar los m\u00f3dulos y dependencias, ya que no son m\u00f3dulos de un proyecto, sino del sistema. La sintaxis general del comando es:</p> <pre><code>npm install -g nombre_modulo\n</code></pre> <p>donde la opci\u00f3n <code>-g</code> hace referencia a que se quiere hacer una instalaci\u00f3n global.</p> <p>Es importante tener presente que cualquier m\u00f3dulo instalado de forma global en el sistema no podr\u00e1 importarse con <code>require</code> en una aplicaci\u00f3n concreta (para hacerlo tendr\u00edamos que instalarlo tambi\u00e9n de forma local a dicha aplicaci\u00f3n).</p> <p>Por ejemplo, podemos instalar el m\u00f3dulo <code>nodemon</code>, que es muy \u00fatil para el desarrollo, ya que reinicia autom\u00e1ticamente nuestra aplicaci\u00f3n cuando detecta cambios en los archivos del proyecto. Para instalarlo globalmente, ejecutamos:</p> <pre><code>npm install -g nodemon\n</code></pre> <p>Una vez instalado, podemos usarlo en cualquier proyecto ejecutando:</p> <pre><code>nodemon nombre_archivo.js\n</code></pre> <p>Otro ejemplo es el m\u00f3dulo <code>typescript</code>, que permite trabajar con TypeScript en lugar de JavaScript. Para instalarlo globalmente, ejecutamos:</p> <pre><code>npm install -g typescript\n</code></pre> <p>Despu\u00e9s, podemos compilar archivos TypeScript a JavaScript usando el comando:</p> <pre><code>tsc nombre_archivo.ts\n</code></pre>"},{"location":"02nodejs/02_events/","title":"2.2 Eventos en Node.js","text":""},{"location":"02nodejs/02_events/#introduccion","title":"Introducci\u00f3n","text":"<p>Muchos objetos en Node.js emiten eventos, por ejemplo:</p> <ul> <li><code>net.Server</code> emite un evento cada vez que se establece una conexi\u00f3n.</li> <li><code>fs.readStream</code> emite un evento cuando se abre un archivo.</li> </ul> <p>Todos los objetos que emiten eventos son instancias de <code>events.EventEmitter</code>. Se puede usar este m\u00f3dulo haciendo require (\"events\")</p> <p>Se pueden adjuntar funciones a los objetos, para que se ejecuten cuando se genere un evento. Estas funciones se denominan listeners (oyentes).</p>"},{"location":"02nodejs/02_events/#modulo-de-eventos","title":"M\u00f3dulo de eventos","text":"<p>Los eventos est\u00e1n en un m\u00f3dulo separado que tenemos que importar en nuestros programas.</p> <pre><code>const events = require('events');\n</code></pre> <p>Dentro de este o m\u00f3dulo disponemos de una serie de utilidades para trabajar con eventos. Primero veamos el emisor de eventos, que se encuentra en la propiedad <code>EventEmitter</code>:</p> <pre><code>let EmisorEventos = events.EventsEmitter\n</code></pre>"},{"location":"02nodejs/02_events/#definir-un-evento","title":"Definir un evento","text":"<p>En Node.js existe un bucle de eventos, de manera que cuando se declara un evento, el sistema escucha a medida que ocurre, para luego ejecutar una funci\u00f3n. Esta funci\u00f3n se conoce como \"callback\" (respuesta) o como \"event handler\" y contiene el c\u00f3digo que queremos que se ejecute cuando se produzca el evento al que lo hemos asociado.</p> <p>Primero tendremos que instanciar un objeto de la clase <code>EventEmitter</code>, que hemos guardado en la variable <code>EmisorEventos</code> antes.</p> <pre><code>let ee = new EmisorEventos();\n</code></pre> <p>Luego tendremos que usar el m\u00e9todo <code>on()</code> para definir las funciones del manejador de eventos, o su equivalente <code>addEventListener()</code>. Para emitir un evento usamos el m\u00e9todo <code>emit()</code>.</p> <p>Por ejemplo, vamos a emitir un evento llamado \"<code>datos</code>\", con este c\u00f3digo.</p> <pre><code>ee.emit('datos', Date.now())\n</code></pre> <p>Ahora vamos a crear una funci\u00f3n de controlador de eventos asociada con el evento definido en \"<code>datos</code>\".</p> <pre><code>ee.on('datos', funci\u00f3n (fecha) {\n    console.log (fecha)\n})\n</code></pre> <p>Si queremos aprovechar algunas de las caracter\u00edsticas m\u00e1s interesantes de las aplicaciones de Node.js, puede ser \u00fatil usar <code>setInterval()</code> para que el evento se emita cada cierto tiempo:</p> <pre><code>setInterval(function () {\n    ee.emit('datos', Date.now())\n}, 500);\n</code></pre> <p>El ejemplo anterior emitir\u00e1 el evento <code>datos</code> cada 500 milisegundos (medio segundo).</p> <p>Con esto ya habremos construido un ejemplo de Node.js totalmente funcional. El c\u00f3digo completo ser\u00eda el siguiente:</p> <pre><code>const events = require('events');\n\nlet EmisorEventos = events.EventEmitter;\nlet ee = new EmisorEventos();\n\nee.on('datos', function (fecha) {\n    console.log(fecha)\n})\n\nsetInterval(function () {\n    ee.emit('datos', Date.now())\n}, 500);\n</code></pre>"},{"location":"02nodejs/02_events/#asociar-eventos-a-objetos","title":"Asociar eventos a objetos","text":"<p>Podemos asociar eventos a objetos que nosotros mismos definamos.</p> <p>Por ejemplo, creamos una clase que define a una persona y vamos a hacer que esta persona tenga emisores de eventos asociados a la herencia.</p> persona.js<pre><code>const events = require('events')\n\nclass Person extends events.EventEmitter {\n    constructor(name) {\n        super()\n        this.name = name\n    }\n}\n\nlet manu = new Person('Manu')\nlet boris = new Person('Boris')\nlet people = [manu, boris]\n\npeople.forEach(function(person) {\n    person.on('talk', function(message) {\n        console.log(person.name + ' says: ' + message)\n    })\n})\n\nmanu.emit('talk', 'I hope you study node')\nboris.emit('talk', 'sure, I will')\n</code></pre> <p>De esta manera, cada vez que se emita el evento <code>talk</code>, se mostrar\u00e1 un mensaje en la consola con el nombre de la persona que ha emitido el evento y el mensaje que ha enviado.</p>"},{"location":"02nodejs/03_servers_files/","title":"2.3 Servidores y ficheros","text":""},{"location":"02nodejs/03_servers_files/#crear-un-servidor-http","title":"Crear un servidor http","text":"<p>Una aplicaci\u00f3n cliente que realiza una petici\u00f3n a un servidor, que a su vez env\u00eda una respuesta, se comunica con el mismo a trav\u00e9s de protocolos: reglas predefinidas para establecer comunicaciones a trav\u00e9s de sockets, que son un canal de comunicaci\u00f3n mediante TCP o puertos UDP. Cada protocolo de capa de aplicaci\u00f3n TCP/IP realiza una funci\u00f3n: transmisi\u00f3n de informaci\u00f3n web, transferencia de archivos, correo electr\u00f3nico, etc.</p> <p>La informaci\u00f3n adicional se env\u00eda a trav\u00e9s de encabezados.</p> <p></p> <p>Por ejemplo, en la respuesta, el servidor le dice al cliente el tipo de contenido que env\u00eda para saber qu\u00e9 hacer con \u00e9l, un navegador mostrar\u00e1 la informaci\u00f3n html como una p\u00e1gina web pero no se mostrar\u00e1 un archivo de texto o json. El estado del env\u00edo tambi\u00e9n aparece en los encabezados de respuesta: <code>200</code> si todo correcto, error <code>404</code>, etc.</p> <p>En Node podemos crear servidores http usando el m\u00f3dulo http.</p> <pre><code>const http = require('http')\n</code></pre> <p>Para crearlo contamos con el m\u00e9todo <code>createServer</code> de este m\u00f3dulo, que toma como par\u00e1metro una funci\u00f3n a su vez con dos par\u00e1metros, uno que almacena la petici\u00f3n realizada y otro la respuesta.</p> <pre><code>const http = require('http')\n\nvar server = http.createServer((req, res) =&gt; {\n\n})\n</code></pre> <p>Vamos a especificar el encabezado de respuesta donde diremos que se env\u00eda texto sin formato y crearemos el texto en s\u00ed. Tambi\u00e9n es necesario definir un puerto y la IP, usaremos el puerto <code>3000</code> y la IP <code>127.0.0.1</code> que es la direcci\u00f3n local.</p> http_server.js<pre><code>const http = require('http')\n\nvar server = http.createServer((req, res) =&gt; {\n    res.writeHead(200, {'Content-Type': 'text/plain'})\n    res.end('Hola mundo')\n})\n\nserver.listen(3000, '127.0.0.1')\n</code></pre> <p>Para probarlo, ejecutamos el archivo con <code>node</code> y abrimos un navegador en la direcci\u00f3n <code>http://127.0.0.1:3000/</code>.</p> <p>Si queremos ver los detalles en el navegador, podemos usar la herramienta de desarrollador, en la pesta\u00f1a de red, y veremos la respuesta del servidor.</p> <p></p> <p>Si agregamos cualquier palabra o ruta despu\u00e9s del puerto, a\u00fan obtendremos la misma respuesta del mismo texto sin formato. Para verlo mejor, agregamos una l\u00ednea a la funci\u00f3n <code>createServer</code> para ver la url que env\u00eda la solicitud:</p> <pre><code>const http = require('http')\n\nvar server = http.createServer((req, res) =&gt; {\n    console.log(req.url)\n    res.writeHead(200, {'Content-Type': 'text/plain'})\n    res.end('Hola mundo')\n})\n\nserver.listen(3000, '127.0.0.1')\n</code></pre> <p>Aprenderemos a controlar la respuesta con diferentes urls por enrutamiento.</p>"},{"location":"02nodejs/03_servers_files/#sirviendo-json","title":"Sirviendo JSON","text":"<p>JSON es una forma de escribir los datos con notaci\u00f3n javascript: https://www.w3schools.com/js/js_json_intro.asp </p> <p>https://developer.mozilla.org/es/docs/Learn/JavaScript/Objects/JSON </p> <p>Es ampliamente utilizado para enviar datos entre servidores y clientes. Por ello, debemos aprender a enviarlos desde nuestro servidor de nodos.</p> <p>Lo primero es cambiar el tipo de datos que enviamos. Tambi\u00e9n creamos un objeto JSON simple y podemos pensar en hacer algo como esto:</p> <pre><code>const http = require('http')\n\nvar server = http.createServer((req, res) =&gt; {\n    console.log(req.url)\n\n    // Cambiamos el tipo de contenido a JSON\n    res.writeHead(200, {'Content-Type': 'application/json'})\n\n    // Creamos un objeto\n    var data = {\n        name = 'John',\n        job = 'Developer'\n        age = 35\n    }\n\n    // Convertimos el objeto a JSON y lo enviamos\n    res.end(JSON.stringify(data))\n})\n</code></pre> <p>Una solicitud JSON puede provenir de alg\u00fan c\u00f3digo javascript que la crea y luego muestra los datos de cierta manera en el front-end de una p\u00e1gina web.</p> <p>Lo habitual es trabajar con archivos JSON. Podemos combinar los modos as\u00edncrono/sincr\u00f3no que vimos anteriormente con los m\u00e9todos que vemos ahora.</p>"},{"location":"02nodejs/03_servers_files/#leer-un-archivo-json","title":"Leer un archivo JSON","text":"<p>M\u00e9todo 1: Usar el m\u00e9todo <code>require</code>: El m\u00e9todo m\u00e1s simple para leer un archivo JSON es requerirlo en un archivo Node.js usando el m\u00e9todo <code>require()</code>.</p> <p>Sintaxis:</p> <pre><code>const data = require('ruta/a/archivo/nombre de archivo')\n</code></pre> <p>Ejemplo: Crear un archivo <code>users.json</code> en el mismo directorio donde est\u00e1 presente el archivo <code>index.js</code>.</p> users.json<pre><code>[\n  {\n    \"name\": \"John\",\n    \"age\": 21,\n    \"languages\": [\n      \"JavaScript\",\n      \"PHP\",\n      \"Python\"\n    ]\n  },\n  {\n    \"name\": \"Smith\",\n    \"age\": 25,\n    \"languages\": [\n      \"PHP\",\n      \"Go\",\n      \"JavaScript\"\n    ]\n  }\n]\n</code></pre> <p>Para leer el archivo <code>users.json</code> en el archivo <code>index.js</code> usando el m\u00e9todo <code>require()</code>.</p> index.js<pre><code>const users = require('./users.json')\n\nconsole.log(users)\n</code></pre> <p>M\u00e9todo 2: Usando el m\u00f3dulo <code>fs</code>: Tambi\u00e9n podemos usar el m\u00f3dulo <code>fs</code> de Node.js para leer un archivo. El m\u00f3dulo fs devuelve el contenido de un archivo en formato de cadena, por lo que debemos convertirlo a formato JSON utilizando el m\u00e9todo integrado <code>JSON.parse()</code>.</p> <p>Ejemplo:</p> index.js<pre><code>const fs = require('fs')\n\n// Leer el archivo users.json\nfs.readFile('./users.json', (err, data) =&gt; {\n    if (err) {\n        console.log(err)\n    } else {\n        const users = JSON.parse(data)\n        console.log(users)\n    }\n})\n</code></pre>"},{"location":"02nodejs/03_servers_files/#escribir-un-archivo-json","title":"Escribir un archivo JSON","text":"<p>Para escribir un archivo JSON, usamos el m\u00e9todo <code>fs.writeFile()</code> del m\u00f3dulo <code>fs</code>.</p> <p>Sintaxis:</p> <pre><code>fs.writeFile(file, data, callback)\n</code></pre> <p>Ejemplo. Agregar un nuevo usuario al archivo <code>users.json</code> existente, creado anteriormente. Esta tarea se completar\u00e1 en tres pasos:</p> index.js<pre><code>const fs = require('fs')\n\n// PASO 1: Leer el archivo users.json\nconst users = require('./users.json')\n\n// PASO 2: Agregar un nuevo usuario\nconst newUser = {\n    name: 'Alex',\n    age: 30,\n    languages: ['JavaScript', 'Python']\n}\n\nusers.push(newUser)\n\n// PASO 3: Escribir el archivo users.json\nfs.writeFile('./users.json', JSON.stringify(users), (err) =&gt; {\n    if (err) {\n        console.log(err)\n    } else {\n        console.log('Usuario agregado con \u00e9xito')\n    }\n})\n</code></pre>"},{"location":"02nodejs/ud2act01/","title":"\u270d\ufe0f UD2 - Actividad 1: M\u00f3dulos y eventos en Node.js","text":"<p>Acepta la tarea en GitHub Classroom y clona el repositorio en tu m\u00e1quina local.</p> <ul> <li>https://classroom.github.com/a/3tPzjQzi</li> </ul> <p>Realiza las actividades en los ficheros indicados y comprueba que funcionan correctamente.</p> <p>Warning</p> <p>Es importante evitar el uso de generadores de c\u00f3digo autom\u00e1tico para realizar las actividades.</p> <p>Si tienes dudas, consulta la documentaci\u00f3n o pide ayuda al profesor.</p> <p>En caso de existir duda ante la copia o el uso de herramientas de generaci\u00f3n de c\u00f3digo autom\u00e1tico, se pedir\u00e1 una explicaci\u00f3n detallada del c\u00f3digo por parte del alumnado implicado. En caso de no poder justificarlo, se considerar\u00e1 copia y se considerar\u00e1 la actividad como no realizada para las partes afectadas.</p> <p>Commit</p> <p>Haz al menos un commit por cada apartado.</p>"},{"location":"02nodejs/ud2act01/#1-proyecto-npm","title":"1. Proyecto npm","text":"<p>Crea una carpeta llamada \ud83d\udcc2 <code>npmproject</code> y utilizando el comando <code>npm init</code> para crear un nuevo proyecto en Node.js. Deja los valores por defecto que te plantea el asistente, y pon tu nombre como autor.</p> <p>\u26a0\ufe0f Recuerda ignorar la carpeta <code>node_modules/</code> en el archivo <code>.gitignore</code> \u26a0\ufe0f</p> <p>Despu\u00e9s, instala el paquete \"lodash\" como se ha explicado en los apuntes, consulta su documentaci\u00f3n (https://lodash.com/docs/), para hacer un programa en un archivo \"<code>index.js</code>\" que, dado un vector de nombres de personas, los muestre por pantalla separados por comas.</p> <p>Deber\u00e1s definir manualmente el array de nombres dentro del c\u00f3digo. Por ejemplo, para el array <code>[\"Nacho\", \"Ana\", \"Mario\", \"Laura\"]</code>, la salida del programa deber\u00e1 ser:</p> <pre><code>Nacho,Ana,Mario,Laura\n</code></pre> <p>M\u00e9todo join</p> <p>Revisa el m\u00e9todo <code>join</code> dentro de la documentaci\u00f3n de lodash, puede serte muy \u00fatil para este ejercicio.</p>"},{"location":"02nodejs/ud2act01/#2-saludo-al-usuario","title":"2. Saludo al usuario","text":"<p>Realizar el ejercicio dentro de la carpeta \ud83d\udcc2 <code>os/</code>.</p> <p>Crea un archivo <code>system_greeting.js</code> que salude al usuario que ha accedido a la aplicaci\u00f3n.</p> <p>Se debe utilizar el m\u00f3dulo <code>os</code> para obtener el nombre del usuario os.userInfo().</p> <p>Por ejemplo, si el usuario es <code>John</code>, el mensaje de saludo ser\u00e1 <code>\u00a1Hola, John!</code>.</p> <p>userInfo()</p> <p>La funci\u00f3n <code>os.userInfo()</code> devuelve informaci\u00f3n sobre el usuario actual del sistema operativo.</p> <p>Para obtener el nombre del usuario, se debe acceder a la propiedad <code>username</code> del objeto devuelto.</p>"},{"location":"02nodejs/ud2act01/#3-modulo-de-productos","title":"3. M\u00f3dulo de productos","text":"<p>Crear el ejercicio dentro de la carpeta \ud83d\udcc2 <code>modules/</code>.</p> <p>Crea un m\u00f3dulo <code>products.js</code> que gestione un listado de productos.</p> <p>El m\u00f3dulo debe tener las siguientes funciones:</p> <ul> <li><code>addProduct(product)</code>: A\u00f1ade un producto al listado.</li> <li><code>getProducts()</code>: Devuelve el listado de productos.</li> <li><code>deleteProduct(id)</code>: Elimina un producto del listado.</li> </ul> <p>El objeto <code>product</code> debe tener la siguiente estructura:</p> <pre><code>{\n  \"id\": 1,\n  \"name\": \"Product 1\",\n  \"price\": 10\n}\n</code></pre> <p>Crear un archivo <code>index.js</code> que importe el m\u00f3dulo <code>products.js</code> y realice las siguientes operaciones:</p> <ol> <li>A\u00f1adir tres productos al listado.</li> <li>Mostrar el listado de productos.</li> <li>Eliminar el producto con <code>id</code> igual a 2.</li> <li>Mostrar el listado de productos actualizado.</li> </ol>"},{"location":"02nodejs/ud2act01/#4-eventos","title":"4. Eventos","text":"<p>Realizar el ejercicio dentro de la carpeta \ud83d\udcc2 <code>events/</code>.</p> <p>Crear un archivo <code>index.js</code> e implementa las siguientes funciones:</p> <ul> <li><code>newUser(name)</code>: A\u00f1ade un nuevo usuario y emite el evento <code>newUser</code> con el nombre del usuario.</li> <li><code>onNewUser(name)</code>: Muestra un mensaje por consola con el nombre del usuario a\u00f1adido.</li> <li><code>removeUser(name)</code>: Elimina un usuario y emite el evento <code>removeUser</code> con el nombre del usuario.</li> <li><code>onRemoveUser(name)</code>: Muestra un mensaje por consola con el nombre del usuario eliminado.</li> <li><code>listUsers()</code>: Muestra un listado de los usuarios actuales.</li> </ul> <p>Realiza las siguientes operaciones:</p> <ol> <li>A\u00f1adir dos usuarios: <code>John</code>, <code>Alice</code> y <code>Bob</code>. Deben mostrarse los mensajes correspondientes al a\u00f1adir cada usuario.</li> <li>Listar los usuarios actuales.</li> <li>Eliminar el usuario <code>John</code>. Debe mostrarse el mensaje correspondiente.</li> <li>Listar los usuarios actuales.</li> </ol> Salida esperada<pre><code>Nuevo usuario: John\nNuevo usuario: Alice\nNuevo usuario: Bob\nUsuarios actuales: John, Alice, Bob\nUsuario eliminado: John\nUsuarios actuales: Alice, Bob\n</code></pre>"},{"location":"02nodejs/ud2act01/#5-ficheros","title":"5. Ficheros","text":"<p>Realizar el ejercicio dentro de la carpeta \ud83d\udcc2 <code>files/</code>.</p> <p>Crear un archivo <code>index.js</code> que lea el contenido del archivo <code>users.json</code> y muestre por consola el contenido del archivo.</p> <p>El archivo <code>users.json</code> tiene el siguiente contenido:</p> <pre><code>[\n  {\n    \"name\": \"John\",\n    \"age\": 30\n  },\n  {\n    \"name\": \"Alice\",\n    \"age\": 25\n  }\n]\n</code></pre> <p>Crea una funci\u00f3n <code>addUser(user)</code> que a\u00f1ada un nuevo usuario al archivo <code>users.json</code>.</p> <p>Despu\u00e9s de a\u00f1adir el usuario, muestra por consola el contenido actualizado del archivo.</p> Salida esperada<pre><code>[\n  {\n    \"name\": \"John\",\n    \"age\": 30\n  },\n  {\n    \"name\": \"Alice\",\n    \"age\": 25\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 35\n  }\n]\n</code></pre> <p>Crea la funci\u00f3n <code>deleteUser(name)</code> que elimine un usuario del archivo <code>users.json</code>.</p> <p>Despu\u00e9s de eliminar el usuario, muestra por consola el contenido actualizado del archivo, y si el usuario no existe, muestra un mensaje de error.</p>"},{"location":"03electron/","title":"3 Electron b\u00e1sico","text":"<ul> <li>3.1 Introducci\u00f3n</li> <li>3.2 DOM</li> <li>3.3 Eventos</li> <li>3.4 Formularios</li> <li>3.5 IPC</li> <li>3.6 Maquetaci\u00f3n en Bootstrap</li> <li>3.7 Elementos b\u00e1sicos con Bootstrap</li> </ul>"},{"location":"03electron/01_intro/","title":"3.1 Introducci\u00f3n a Electron","text":"<p>Electron es un framework que permite crear aplicaciones de escritorio multiplataforma utilizando tecnolog\u00edas web como HTML, CSS y JavaScript. Electron es un proyecto de c\u00f3digo abierto desarrollado por la OpenJS Foundation y es utilizado en aplicaciones como Visual Studio Code, Slack, Discord, entre otras.</p>"},{"location":"03electron/01_intro/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Multiplataforma: permite crear aplicaciones de escritorio para Windows, macOS y Linux.</li> <li>Basado en tecnolog\u00edas web: utiliza HTML, CSS y JavaScript.</li> <li>F\u00e1cil de usar: no es necesario aprender un nuevo lenguaje de programaci\u00f3n.</li> <li>Extensible: permite utilizar m\u00f3dulos de Node.js.</li> <li>Comunidad activa: cuenta con una amplia comunidad de desarrolladores.</li> <li>Actualizaciones frecuentes: se lanzan nuevas versiones con regularidad.</li> <li>Documentaci\u00f3n completa: cuenta con una documentaci\u00f3n detallada.</li> <li>Soporte para empaquetado de aplicaciones: permite empaquetar aplicaciones para distribuci\u00f3n.</li> </ul>"},{"location":"03electron/01_intro/#arquitectura","title":"Arquitectura","text":"<p>Electron est\u00e1 compuesto por dos procesos principales: el proceso principal o main process y el proceso de renderizado o renderer process. El proceso principal tiene comunicaci\u00f3n completa con el sistema operativo y es responsable de crear ventanas nativas y controlar la aplicaci\u00f3n, mientras que el proceso de renderizado es responsable de mostrar el contenido de las ventanas mediante c\u00f3digo HTML, CSS y JavaScript.</p> Acquitectura Electron <p>Al ser procesos separados, el proceso principal y los procesos de renderizado se ejecutan en hilos separados, lo que permite que la aplicaci\u00f3n sea m\u00e1s eficiente y no se bloquee si un proceso se detiene. La comunicaci\u00f3n entre los procesos se realiza mediante el uso de mensajes y eventos, este mecanismo se conoce como Inter-Process Communication (IPC).</p> <p>Para comunicar los diferentes procesos, Electron utiliza un preload script que se ejecuta en el contexto de la p\u00e1gina web antes de que se cargue cualquier otro script. Esto permite que el preload script tenga acceso a Node.js y pueda comunicarse con el proceso principal.</p> Arquitectura detallada en Electron"},{"location":"03electron/01_intro/#crear-una-aplicacion-con-electron","title":"Crear una aplicaci\u00f3n con Electron","text":"<p>En la unidad introductoria del curso, vimos un tutorial guiado para crear una aplicaci\u00f3n de escritorio con Electron. Vamos a repasar los pasos principales para crear una aplicaci\u00f3n con Electron:</p> <ol> <li>Inicializar un proyecto con npm: creamos un directorio para nuestro proyecto y ejecutamos el comando <code>npm init</code> para inicializar un proyecto de Node.js, indicando <code>main.js</code> como archivo principal.</li> <li>Configurar el archivo <code>package.json</code>: en el archivo <code>package.json</code> a\u00f1adimos la configuraci\u00f3n necesaria para ejecutar nuestra aplicaci\u00f3n con Electron, a\u00f1adiendo en <code>scripts</code> un nuevo comando <code>\"start\": \"electron .\"</code>.</li> <li>Instalar Electron: instalamos Electron como dependencia de desarrollo con el comando <code>npm install electron -D</code>.</li> <li>Crear el archivo principal: creamos un archivo <code>main.js</code> que ser\u00e1 el punto de entrada de nuestra aplicaci\u00f3n.</li> <li>Configurar el archivo principal: en el archivo <code>main.js</code> configuramos la ventana principal de la aplicaci\u00f3n.</li> <li>Crear la interfaz de usuario: creamos un archivo HTML y CSS para la interfaz de usuario.</li> <li>Ejecutar la aplicaci\u00f3n: ejecutamos nuestra aplicaci\u00f3n con el comando <code>npm start</code>.</li> </ol> <p>Ejemplo de una aplicaci\u00f3n b\u00e1sico, con un archivo <code>main.js</code> y un archivo <code>index.html</code>:</p> main.js<pre><code>const { app, BrowserWindow } = require('electron')\n\n// Funci\u00f3n para crear la ventana principal\nconst createWindow = () =&gt; {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\n// Crear la ventana cuando la aplicaci\u00f3n est\u00e9 lista\napp.whenReady().then(() =&gt; {\n  createWindow()\n\n  // Cuando se active la aplicaci\u00f3n y no haya ventanas, crear una nueva\n  app.on('activate', () =&gt; {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\n\n// Cerrar la aplicaci\u00f3n cuando todas las ventanas est\u00e9n cerradas\n//\n// nota: En macOS (darwin), es com\u00fan que las aplicaciones se mantengan activas\n//       hasta que el usuario salga expl\u00edcitamente con Cmd + Q\napp.on('window-all-closed', () =&gt; {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta\n      http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\" /&gt;\n    &lt;title&gt;Hola desde Electron renderer!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hola desde Electron renderer!&lt;/h1&gt;\n    &lt;p&gt;\ud83d\udc4b&lt;/p&gt;\n    &lt;p id=\"info\"&gt;&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"03electron/02_dom/","title":"3.2 Document Object Model (DOM)","text":"<p>El Document Object Model (DOM) es una interfaz de programaci\u00f3n que permite a los programadores acceder y manipular el contenido, estructura y estilo de un documento HTML. En el contexto de Electron, el DOM es la representaci\u00f3n de la interfaz de usuario de una aplicaci\u00f3n, y se puede acceder a \u00e9l a trav\u00e9s de JavaScript.</p> <p>El DOM es una estructura jer\u00e1rquica de nodos, donde cada nodo representa un un elemento HTML, un texto o un comentario. Los nodos se organizan en un \u00e1rbol, donde el nodo ra\u00edz es el objeto <code>document</code>, que representa el documento HTML.</p>"},{"location":"03electron/02_dom/#acceder-al-dom","title":"Acceder al DOM","text":"<p>Para acceder al DOM de una aplicaci\u00f3n Electron, podemos utilizar el objeto <code>document</code>, que es una propiedad global en el contexto de una p\u00e1gina web. Por ejemplo, para acceder a un elemento con el identificador <code>myElement</code>, podemos utilizar el m\u00e9todo <code>getElementById</code>:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Acceder al DOM&lt;/title&gt;\n  &lt;script defer src=\"index.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"myElement\"&gt;Hola, mundo!&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> index.js<pre><code>const myElement = document.getElementById('myElement')\nconsole.log(myElement.textContent) // Hola, mundo!\n</code></pre> <p>En este ejemplo, el script <code>index.js</code> accede al elemento con el identificador <code>myElement</code> y muestra su contenido en la consola.</p>"},{"location":"03electron/02_dom/#metodos-de-seleccion-de-elementos","title":"M\u00e9todos de selecci\u00f3n de elementos","text":"<ul> <li> <p><code>.getElementById(id)</code></p> <p>Devuelve el nodo con la <code>id</code> pasada. S\u00f3lo se devolver\u00e1 un nodo, ya que los <code>id</code> deben ser \u00fanicos en el documento.</p> <p>Ej.:</p> index.html<pre><code>&lt;div id=\"main\"&gt;\n    &lt;p&gt;Lorem ipsum&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> main.js<pre><code>let nodo = document.getElementById('main');\n// nodo contendr\u00e1 el nodo cuya id es \"main\"\n</code></pre> </li> <li> <p><code>.getElementsByClassName(clase)</code></p> <p>Devuelve una colecci\u00f3n (<code>Set</code>, no un array) con todos los nodos de la clase indicada.</p> <p>Ej.:</p> index.html<pre><code>&lt;h2&gt;Lista&lt;/h2&gt;\n&lt;ul&gt;\n    &lt;li class=\"fruta\"&gt;Manzana&lt;/li&gt;\n    &lt;li class=\"verdura\"&gt;Br\u00f3coli&lt;/li&gt;\n    &lt;li class=\"fruta\"&gt;Pera&lt;/li&gt;\n    &lt;li class=\"fruta\"&gt;Kiwi&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> main.js<pre><code>let frutas = document.getElementsByClassName('fruta');\n// nodos contendr\u00e1 todos los nodos cuya clase es \"fruta\"\n\nArray.from(frutas).forEach(fruta =&gt; console.log(fruta.textContent));\n</code></pre> Consola<pre><code>  Manzana\n  Pera\n  Kiwi\n</code></pre> <p>NOTA:</p> <p>las colecciones son similares a arrays (se accede a sus elementos con <code>[indice]</code>) pero no se les pueden aplicar sus m\u00e9todos <code>filter</code>, <code>map</code>, <code>forEach</code>, etc. a menos que se conviertan a arrays con <code>Array.from()</code></p> </li> <li> <p><code>.getElementsByTagName(etiqueta)</code></p> <p>Devuelve una colecci\u00f3n (<code>Set</code>) con todos los nodos de la etiqueta HTML indicada.</p> <p>Ej.:</p> index.html<pre><code>&lt;h2&gt;Lista&lt;/h2&gt;\n&lt;ul id=\"frutas\"&gt;\n    &lt;li&gt;Manzana&lt;/li&gt;\n    &lt;li&gt;Pera&lt;/li&gt;\n    &lt;li&gt;Kiwi&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ul id=\"verduras\"&gt;\n    &lt;li&gt;Brocoli&lt;/li&gt;\n    &lt;li&gt;Berenjena&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> main.js<pre><code>let nodos = document.getElementsByTagName('li');\n// nodos contendr\u00e1 todos los nodos de tipo &lt;li&gt;\n\nArray.from(nodos).forEach(nodo =&gt; console.log(nodo.textContent));\n</code></pre> Consola<pre><code>  Manzana\n  Pera\n  Kiwi\n  Br\u00f3coli\n  Berenjena\n</code></pre> </li> <li> <p><code>.querySelector(selector)</code></p> <p>Devuelve el primer nodo seleccionado por el selector CSS indicado.</p> <p>Ej.:</p> <pre><code>&lt;p class=\"error\"&gt;Error&lt;/p&gt;\n&lt;div&gt;\n  &lt;p class=\"info\"&gt;No se ha podido cargar la informaci\u00f3n&lt;/p&gt;\n  &lt;p class=\"error\"&gt;404&lt;/p&gt;\n  &lt;p&gt;Ayuda: &lt;a href=\"#\"&gt;m\u00e1s informaci\u00f3n&lt;/a&gt;&lt;/p&gt;\n&lt;div&gt;\n</code></pre> <pre><code>let nodo = document.querySelector('p.error')\n// nodo contendr\u00e1 el primer p\u00e1rrafo de clase _error_\nconsole.log(nodo.textContent)\n</code></pre> Consola<pre><code>404\n</code></pre> </li> <li> <p><code>.querySelectorAll(selector)</code></p> <p>Devuelve una colecci\u00f3n con todos los nodos seleccionados por el selector CSS indicado.</p> <p>Ej.:</p> <pre><code>&lt;p class=\"error\"&gt;Error&lt;/p&gt;\n&lt;div&gt;\n  &lt;p class=\"info\"&gt;No se ha podido cargar la informaci\u00f3n&lt;/p&gt;\n  &lt;p class=\"error\"&gt;404&lt;/p&gt;\n  &lt;p&gt;Ayuda: &lt;a href=\"#\"&gt;m\u00e1s informaci\u00f3n&lt;/a&gt;&lt;/p&gt;\n&lt;div&gt;\n</code></pre> <pre><code>let nodo = document.querySelectorAll('p.error')\n// nodos contendr\u00e1 todos los p\u00e1rrafos de clase _error_\nArray.from(nodos).forEach(nodo =&gt; console.log(nodo.textContent))\n</code></pre> Consola<pre><code>Error\n404\n</code></pre> </li> </ul> <p>Existen 'atajos' para obtener algunos de los elementos m\u00e1s comunes:</p> <ul> <li><code>document.documentElement</code>: devuelve el nodo del elemento <code>&lt;html&gt;</code></li> <li><code>document.head</code>: devuelve el nodo del elemento <code>&lt;head&gt;</code></li> <li><code>document.body</code>: devuelve el nodo del elemento <code>&lt;body&gt;</code></li> <li><code>document.title</code>: devuelve el nodo del elemento <code>&lt;title&gt;</code></li> <li><code>document.links</code>: devuelve una colecci\u00f3n con todos los hiperenlaces del documento</li> <li><code>document.anchors</code>: devuelve una colecci\u00f3n con todas las anclas del documento</li> <li><code>document.forms</code>: devuelve una colecci\u00f3n con todos los formularios del documento</li> <li><code>document.images</code>: devuelve una colecci\u00f3n con todas las im\u00e1genes del documento</li> <li><code>document.scripts</code>: devuelve una colecci\u00f3n con todos los scripts del documento</li> </ul>"},{"location":"03electron/02_dom/#acceso-a-nodos-a-partir-de-otros","title":"Acceso a nodos a partir de otros","text":"<p>Al aplicar estos m\u00e9todos sobre <code>document</code> se seleccionar\u00e1 sobre la p\u00e1gina pero podr\u00edan tambi\u00e9n aplicarse a cualquier nodo y en ese caso la b\u00fasqueda se realizar\u00eda s\u00f3lo entre los descendientes de dicho nodo.</p> <p>Ejemplo de b\u00fasqueda de un nodo dentro de otro:</p> <pre><code>&lt;div id=\"main\"&gt;\n    &lt;p&gt;Texto 1&lt;/p&gt;\n    &lt;p&gt;Texto 2&lt;/p&gt;\n    &lt;div&gt;\n        &lt;p&gt;Texto 3&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div id=\"otro\"&gt;\n    &lt;p&gt;Texto 4&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> main.js<pre><code>let mainContent = document.getElementById('main');\nlet parrafos = mainContent.getElementsByTagName('p');\nArray.from(parrafos).forEach(p =&gt; console.log(p.textContent));\n</code></pre> Consola<pre><code>Texto 1\nTexto 2\nTexto 3\n</code></pre> <p>Los siguientes m\u00e9todos que se aplican sobre un elemento del \u00e1rbol DOM:</p> <ul> <li> <p><code>element.parentElement</code></p> <p>Propiedad que contiene el elemento padre de elemento.</p> html<pre><code>&lt;div&gt; &lt;!-- nodo padre --&gt;\n    &lt;p id=\"elemento\"&gt;Este es el p\u00e1rrafo&lt;/p&gt; &lt;!-- elemento seleccionado --&gt;\n&lt;/div&gt;\n</code></pre> js<pre><code>let element = documento.getElementById('elemento');\nlet parent = element.parentElement;\n// parent es el nodo &lt;div&gt;\nconsole.log(parent.nodeName); // 'DIV'\n</code></pre> </li> <li> <p><code>elemento.children</code></p> <p>Propiedad que contiene la colecci\u00f3n con todos los elementos hijo de elemento.</p> <p>S\u00f3lo elementos HTML, no comentarios ni nodos de tipo texto.</p> html<pre><code>&lt;div id=\"elemento\"&gt; &lt;!-- nodo padre --&gt;\n    &lt;p&gt;Este es el p\u00e1rrafo&lt;/p&gt; &lt;!-- elemento hijo --&gt;\n    &lt;p&gt;Este es otro p\u00e1rrafo&lt;/p&gt; &lt;!-- elemento hijo --&gt;\n&lt;/div&gt;\n</code></pre> js<pre><code>let parent = document.getElementById('elemento')\nlet children = parent.children\n// children es una colecci\u00f3n con los dos p\u00e1rrafos\nArray.from(children).forEach(child =&gt; console.log(child.nodeName, child.textContent))\n</code></pre> Consola<pre><code>\"P\", \"Este es el p\u00e1rrafo\"\n\"P\", \"Este es otro p\u00e1rrafo\"\n</code></pre> </li> <li> <p><code>elemento.childNodes</code></p> <p>Propiedad que contiene la colecci\u00f3n con todos los nodos hijos de elemento.</p> <p>Incluye comentarios y nodos de tipo texto por lo que no suele utilizarse.</p> html<pre><code>&lt;div id=\"elemento\"&gt; &lt;!-- nodo padre --&gt;\n    &lt;p&gt;Este es el p\u00e1rrafo&lt;/p&gt; &lt;!-- elemento hijo --&gt;\n    &lt;p&gt;Este es otro p\u00e1rrafo&lt;/p&gt; &lt;!-- elemento hijo --&gt;\n&lt;/div&gt;\n</code></pre> js<pre><code>let parent = document.getElementById('elemento')\nlet children = parent.childNodes\n// children es una colecci\u00f3n con los dos p\u00e1rrafos\nArray.from(children).forEach(child =&gt; console.log(child.nodeName, child.textContent))\n</code></pre> Consola<pre><code>\"#text\", \" \"\n\"#comment\", \" nodo padre \"\n\"#text\", \"\n        \"\n\"P\", \"Este es el p\u00e1rrafo\"\n\"#text\", \" \"\n\"#comment\", \" elemento hijo \"\n\"#text\", \"\n        \"\n\"P\", \"Este es otro p\u00e1rrafo\"\n\"#text\", \" \"\n\"#comment\", \" elemento hijo \"\n\"#text\", \"\n    \"\n</code></pre> </li> <li> <p><code>elemento.firstElementChild</code></p> <p>Devuelve el elemento HTML que es el primer hijo.</p> </li> <li> <p><code>elemento.firstChild</code></p> <p>Devuelve el nodo que es el primer hijo.</p> <p>Incluye nodos de tipo texto o comentarios.</p> </li> <li> <p><code>elemento.lastElementChild</code>, <code>elemento.lastChild</code></p> <p>Igual que <code>firstElementChild</code> y <code>firstChild</code> pero con el \u00faltimo hijo.</p> </li> <li> <p><code>elemento.nextElementSibling</code></p> <p>Devuelve el elemento HTML que es el siguiente hermano de elemento</p> </li> <li> <p><code>elemento.nextSibling</code></p> <p>Devuelve el nodo que es el siguiente hermano de elemento.</p> <p>Incluye nodos de tipo texto o comentarios.</p> </li> <li> <p><code>elemento.previousElementSibling</code>, <code>elemento.previousSibling</code></p> <p>Igual pero con el hermano anterior.</p> </li> <li> <p><code>elemento.hasChildNodes</code></p> <p>Indica si elemento tiene o no nodos hijos.</p> </li> <li> <p><code>elemento.childElementCount</code></p> <p>Devuelve el n\u00famero de nodos hijo de elemento.</p> </li> </ul> <p>IMPORTANTE:</p> <p>A menos que interesen comentarios, saltos de p\u00e1gina, etc., siempre se deben usar los m\u00e9todos que s\u00f3lo devuelven elementos HTML, no todos los nodos.</p>"},{"location":"03electron/02_dom/#propiedades-de-un-nodo","title":"Propiedades de un nodo","text":"<p>Las principales propiedades de un nodo son:</p> <ul> <li> <p><code>elemento.innerHTML</code></p> <p>Todo lo que hay entre la etiqueta que abre elemento y la que lo cierra, incluyendo otras etiquetas HTML.</p> <p>Ej.:</p> html<pre><code>&lt;div id=\"txt\"&gt;\n    &lt;p&gt;primer parrafo hijo de div id=\"txt\"&lt;/p&gt;\n    &lt;p&gt;segundo parrafo hijo de id=\"txt\" txt&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> js<pre><code>txt = document.getElementById(\"txt\");\nconsole.log(txt.innerHTML);\n\n/*\nMostrar\u00e1 por consola:\n    &lt;p&gt;primer parrafo hijo de div id=\"txt\"&lt;/p&gt;\n    &lt;p&gt;segundo parrafo hijo de id=\"txt\" txt&lt;/p&gt;\n*/\n</code></pre> </li> <li> <p><code>elemento.textContent</code></p> <p>Todo lo que hay entre la etiqueta que abre elemento y la que lo cierra, pero ignorando otras etiquetas HTML.</p> <p>Podemos usarlo tanto para leer como para escribir el contenido de un nodo.</p> <p>Ej.:</p> html<pre><code>&lt;p id=\"texto\"&gt;Esto &lt;span&gt;es&lt;/span&gt;un texto&lt;/p&gt;\n</code></pre> js<pre><code>// Lee el contenido:\nvar text = document.getElementById(\"texto\").textContent;\n// |text| contiene la cadena \"Esto es un texto\".\n\n// Escribe el contenido:\ndocument.getElementById(\"texto\").textContent = \"Nuevo texto\";\n\n// Se ha modificado el HTML en tiempo de ejecuci\u00f3n,\n// ahora contiene una nueva cadena:\n//     &lt;p id=\"texto\"&gt;Nuevo texto&lt;/p&gt;\n</code></pre> </li> <li> <p><code>elemento.value</code></p> <p>Devuelve la propiedad <code>value</code> de un <code>&lt;input&gt;</code> (en el caso de un <code>&lt;input&gt;</code> de tipo text devuelve lo que hay escrito en \u00e9l).</p> <p>Como los <code>&lt;input&gt;</code> no tienen etiqueta de cierre (<code>&lt;/input&gt;</code>) no podemos usar <code>.innerHTML</code> ni <code>.textContent</code>.</p> <p>Por ejemplo si <code>elem1</code> es el nodo <code>&lt;input name=\"nombre\"&gt;</code> y <code>elem2</code> es el nodo <code>&lt;input type=\"radio\" value=\"H\"&gt; Hombre</code></p> html<pre><code>&lt;form action=\"#\"&gt;\n    &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n    &lt;input type=\"text\" id=\"nombre\" name=\"nombre\"&gt;\n\n    &lt;fieldset&gt;\n        &lt;legend&gt;Lenguaje favorito:&lt;/legend&gt;\n        &lt;div&gt;\n            &lt;input type=\"radio\" name=\"fav\" id=\"html\" value=\"HTML\"&gt;\n            &lt;label for=\"html\"&gt;HTML&lt;/label&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;input type=\"radio\" name=\"fav\" id=\"css\" value=\"CSS\"&gt;\n            &lt;label for=\"css\"&gt;CSS&lt;/label&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;input type=\"radio\" name=\"fav\" id=\"js\" value=\"JavaScript\" checked&gt;\n            &lt;label for=\"js\"&gt;JavaScript&lt;/label&gt;\n        &lt;/div&gt;\n    &lt;/fieldset&gt;\n&lt;/form&gt;\n</code></pre> js<pre><code>let inputNombre = document.getElementById('nombre');\nlet name = inputNombre.value;\n// | name | Contiene lo que haya escrito en el &lt;input&gt; en ese momento\n\nlet favChecked = document.querySelector('input[name=\"fav\"]:checked');\nlet favorite = favChecked.value;\n// | favorite | Contiene \"JavaScript\"\n</code></pre> </li> </ul> <p>Otras propiedades:</p> <ul> <li><code>elemento.innerText</code>: Se recomienda no usarlo, es similar a <code>textContent</code></li> <li><code>elemento.focus</code>: da el foco a elemento (para inputs, etc.).</li> <li><code>elemento.blur</code>: quita el foco de elemento.</li> <li><code>elemento.clientHeight</code> / <code>elemento.clientWidth</code>: devuelve el alto / ancho visible del elemento</li> <li><code>elemento.offsetHeight</code> / <code>elemento.offsetWidth</code>: devuelve el alto / ancho total del elemento</li> <li><code>elemento.clientLeft</code> / <code>elemento.clientTop</code>: devuelve la distancia de elemento al borde izquierdo / superior</li> <li><code>elemento.offsetLeft</code> / <code>elemento.offsetTop</code>: devuelve los p\u00edxels que hemos desplazado elemento a la izquierda / abajo</li> </ul>"},{"location":"03electron/02_dom/#manipular-el-arbol-dom","title":"Manipular el \u00e1rbol DOM","text":"<p>Vamos a ver qu\u00e9 m\u00e9todos nos permiten cambiar el \u00e1rbol DOM, y por tanto modificar el HTML de la p\u00e1gina:</p> <ul> <li> <p><code>document.createElement('etiqueta')</code></p> <p>crea un nuevo elemento HTML con la etiqueta indicada, pero a\u00fan no se a\u00f1ade a la p\u00e1gina. Ej.:</p> <pre><code>let nuevoLi = document.createElement('li');\n</code></pre> </li> <li> <p><code>document.createTextNode('texto')</code></p> <p>crea un nuevo nodo de texto con el texto indicado, que luego tendremos que a\u00f1adir a un nodo HTML. Ej.:</p> <pre><code>let textoLi = document.createTextNode('Nuevo elemento de lista');\n</code></pre> </li> <li> <p><code>elemento.appendChild(nuevoNodo)</code>:</p> <p>a\u00f1ade nuevoNodo como \u00faltimo hijo de elemento. Ahora ya se ha a\u00f1adido a la p\u00e1gina. Ej.:</p> <pre><code>let nuevoLi = document.createElement('li');\nlet textoLi = document.createTextNode('Nuevo elemento de lista');\n\n// a\u00f1ade el texto creado al elemento &lt;li&gt; creado\nnuevoLi.appendChild(textoLi);\n\n// selecciona el 1\u00ba &lt;ul&gt; de la p\u00e1gina\nlet miPrimeraLista = document.getElementsByTagName('ul')[0];\n\n// a\u00f1ade &lt;li&gt; como \u00faltimo hijo de &lt;ul&gt;, es decir al final de la lista\nmiPrimeraLista.appendChild(nuevoLi);\n</code></pre> </li> <li> <p><code>elemento.insertBefore(nuevoNodo, nodo)</code></p> <p>a\u00f1ade nuevoNodo como hijo de elemento antes del nodo indicado. Ej.:</p> <pre><code>// selecciona el 1\u00ba &lt;ul&gt; de la p\u00e1gina\nlet miPrimeraLista = document.getElementsByTagName('ul')[0];\n\n// selecciona el 1\u00ba &lt;li&gt; dentro de miPrimeraLista\nlet primerElementoDeLista = miPrimeraLista.getElementsByTagName('li')[0];\n\n// a\u00f1ade &lt;li&gt; al principio de la lista\nmiPrimeraLista.insertBefore(nuevoLi, primerElementoDeLista);\n</code></pre> </li> <li> <p><code>elemento.removeChild(nodo)</code></p> <p>borra nodo de elemento y por tanto se elimina de la p\u00e1gina. Ej.:</p> <pre><code>// selecciona el 1\u00ba &lt;ul&gt; de la p\u00e1gina\nlet miPrimeraLista = document.getElementsByTagName('ul')[0];\n\n// selecciona el 1\u00ba &lt;li&gt; dentro de miPrimeraLista\nlet primerElementoDeLista = miPrimeraLista.getElementsByTagName('li')[0];\n\n// borra el primer elemento de la lista\nmiPrimeraLista.removeChild(primerElementoDeLista);\n\n// Tambi\u00e9n podr\u00edamos haberlo borrado sin tener el padre con:\nprimerElementoDeLista.parentElement.removeChild(primerElementoDeLista);\n</code></pre> </li> <li> <p><code>elemento.replaceChild(nuevoNodo, viejoNodo)</code></p> <p>reemplaza viejoNodo con nuevoNodo como hijo de elemento. Ej.:</p> <pre><code>// crea el nodo\nlet nuevoLi = document.createElement('li');\nlet textoLi = document.createTextNode('Nuevo elemento de lista');\nnuevoLi.appendChild(textoLi);\n\n// selecciona el 1\u00ba &lt;ul&gt; de la p\u00e1gina\nlet miPrimeraLista = document.getElementsByTagName('ul')[0];\n\n// selecciona el 1\u00ba &lt;li&gt; de miPrimeraLista\nlet primerElementoDeLista = miPrimeraLista.getElementsByTagName('li')[0];\n\n// reemplaza el 1\u00ba elemento de la lista con nuevoLi\nmiPrimeraLista.replaceChild(nuevoLi, primerElementoDeLista);\n</code></pre> </li> <li> <p><code>elementoAClonar.cloneNode(boolean)</code></p> <p>devuelve una copia de elementoAClonar o de elementoAClonar con todos sus descendientes seg\u00fan le pasemos como par\u00e1metro <code>false</code> o <code>true</code>. Luego podremos insertarlo donde queramos.</p> <p>MUCHO CUIDADO</p> <p>Si a\u00f1adimos con el m\u00e9todo <code>appendChild</code> un nodo que estaba en otro sitio se elimina de donde estaba para a\u00f1adirse a su nueva posici\u00f3n.</p> <p>Si queremos que est\u00e9 en los 2 sitios deber\u00e9 clonar el nodo y luego a\u00f1adir la copia y no el nodo original.</p> </li> </ul> <p>Ejemplo de creaci\u00f3n de nuevos nodos: tenemos un c\u00f3digo HTML con un elemento <code>&lt;div&gt;</code> que contiene tres p\u00e1rrafos <code>&lt;p&gt;</code>.</p> <ul> <li>Vamos a a\u00f1adir un nuevo p\u00e1rrafo al final del <code>&lt;div&gt;</code> con el texto \"<code>P\u00e1rrafo a\u00f1adido al final</code>\"</li> <li>Y otro en la segunda posici\u00f3n del <code>&lt;div&gt;</code> con el texto \"<code>Este es el &lt;strong&gt;nuevo&lt;/strong&gt; segundo p\u00e1rrafo</code>\".</li> </ul> index.html<pre><code>&lt;div id=\"articulos\"&gt;\n  &lt;p&gt;Este es el primer p\u00e1rrafo que tiene &lt;strong&gt;algo en negrita&lt;/strong&gt;.&lt;/p&gt;\n  &lt;p&gt;Este era el segundo p\u00e1rrafo pero ser\u00e1 desplazado hacia abajo.&lt;/p&gt;\n  &lt;p&gt;Y este es el \u00faltimo p\u00e1rrafo pero luego a\u00f1adiremos otro despu\u00e9s&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> main.js<pre><code>let miDiv = document.getElementById('articulos')\n\n// Pasos para a\u00f1adir el \u00faltimo p\u00e1rrafo:\n//   &lt;p&gt;P\u00e1rrafo a\u00f1adido al final&lt;/p&gt;\n//\n// - Crear un nuevo elemento &lt;p&gt;\n// - Crear un nodo de texto con el contenido\n// - A\u00f1adir el texto al elemento &lt;p&gt;\n// - A\u00f1adir el elemento &lt;p&gt; al final del &lt;div&gt;\n\nlet ultimoParrafo = document.createElement('p')\nlet ultimoParrafoTexto = document.createTextNode('P\u00e1rrafo a\u00f1adido al final')\nultimoParrafo.appendChild(ultimoParrafoTexto)\nmiDiv.appendChild(ultimoParrafo)\n\n// Pasos para a\u00f1adir el segundo p\u00e1rrafo:\n//   &lt;p&gt;Este es el &lt;strong&gt;nuevo&lt;/strong&gt; segundo p\u00e1rrafo&lt;/p&gt;\n//\n// - Crear un nuevo elemento &lt;strong&gt;\n// - Crear un nodo de texto con el contenido de la negrita\n// - A\u00f1adir el texto al elemento &lt;strong&gt;\n//\n// - Crear un nuevo elemento &lt;p&gt;\n// - Crear un nodo de texto con la primera parte del contenido\n// - Crear un nodo de texto con la segunda parte del contenido\n//\n// - A\u00f1adir nodo con la primera parte del contenido al elemento &lt;p&gt;\n// - A\u00f1adir el elemento &lt;strong&gt; al elemento &lt;p&gt;\n// - A\u00f1adir nodo con la segunda parte del contenido al elemento &lt;p&gt;\n\nlet nuevaNegrita = document.createElement('strong')\nnuevaNegritaTexto = document.createTextNode('nuevo')\nnuevaNegrita.appendChild(nuevaNegritaTexto)\n\nlet nuevoSegundoParrafo = document.createElement('p')\nlet nuevoSegundoParrafoTexto1 = document.createTextNode('Este es el ')\nlet nuevoSegundoParrafoTexto2 = document.createTextNode(' segundo p\u00e1rrafo')\n\nnuevoSegundoParrafo.appendChild(nuevoSegundoParrafoTexto1)\nnuevoSegundoParrafo.appendChild(nuevaNegrita)\nnuevoSegundoParrafo.appendChild(nuevoSegundoParrafoTexto2)\n\nlet segundoParrafo = miDiv.children[1]\nmiDiv.insertBefore(nuevoSegundoParrafo, segundoParrafo)\n</code></pre> <p>Ejemplo en JSFiddle</p> <p>Si utilizamos la propiedad innerHTML el c\u00f3digo a usar es mucho m\u00e1s simple.</p> main.js<pre><code>let miDiv = document.getElementById('articulos')\n\nmiDiv.innerHTML += '&lt;p&gt;P\u00e1rrafo a\u00f1adido al final&lt;/p&gt;'\n\nlet nuevoSegundoParrafo = document.createElement('p')\nnuevoSegundoParrafo.innerHTML = 'Este es el &lt;strong&gt;nuevo&lt;/strong&gt; segundo p\u00e1rrafo'\n\nlet segundoParrafo = miDiv.children[1]\nmiDiv.insertBefore(nuevoSegundoParrafo, segundoParrafo)\n</code></pre> <p>Ejemplo en JSFiddle</p> <p>La forma de a\u00f1adir el \u00faltimo p\u00e1rrafo (l\u00ednea #3: <code>miDiv.innerHTML += '&lt;p&gt;P\u00e1rrafo a\u00f1adido al final&lt;/p&gt;'</code>) aunque es v\u00e1lida no es eficiente ya que obliga al navegador a volver a renderizar todo el contenido de <code>miDIV</code>. Una forma m\u00e1s eficiente ser\u00eda a\u00f1adir el p\u00e1rrafo con <code>appendChild</code>.</p> <pre><code>let ultimoParrafo = document.createElement('p')\nultimoParrafo.innerHTML = 'P\u00e1rrafo a\u00f1adido al final'\nmiDiv.appendChild(ultimoParrafo)\n</code></pre> <p>As\u00ed s\u00f3lo debe renderizar el p\u00e1rrafo a\u00f1adido, conservando todo lo dem\u00e1s que tenga <code>miDiv</code>.</p> <p>Podemos ver m\u00e1s ejemplos de creaci\u00f3n y eliminaci\u00f3n de nodos en W3Schools.</p>"},{"location":"03electron/03_events/","title":"3.3 Eventos","text":"<p>Los eventos son acciones que ocurren en el sistema, como por ejemplo, un clic del rat\u00f3n, una tecla presionada, un cambio en un campo de texto, etc. En aplicaciones basadas en web los eventos son manejados por el DOM.</p> <p>Javascript permite ejecutar c\u00f3digo cuando se produce un evento asociando al mismo. Hay varias formas de hacerlo.</p>"},{"location":"03electron/03_events/#como-escuchar-un-evento","title":"C\u00f3mo escuchar un evento","text":"<p>La primera forma \"est\u00e1ndar\" de asociar c\u00f3digo a un evento es a\u00f1adiendo un atributo con el nombre del evento a escuchar (con '<code>on</code>' delante) en el elemento HTML. Por ejemplo, para ejecutar c\u00f3digo al producirse el evento '<code>click</code>' sobre un bot\u00f3n se escrib\u00eda:</p> c\u00f3digo del evento acoplado dentro del atributo<pre><code>&lt;input type=\"button\" id=\"boton1\" onclick=\"alert('Se ha pulsado')\" /&gt;\n</code></pre> <p>Una mejora era llamar a una funci\u00f3n que conten\u00eda el c\u00f3digo:</p> html<pre><code>&lt;input type=\"button\" id=\"boton1\" onclick=\"clicked()\" /&gt;\n</code></pre> js<pre><code>function clicked() {\n  alert('Se ha pulsado')\n}\n</code></pre> <p>Hacer este tipo de llamadas a funciones desde el HTML no es recomendable, ya que se mezcla el c\u00f3digo HTML con el c\u00f3digo Javascript, lo que dificulta la lectura y mantenimiento del c\u00f3digo. Por lo tanto, se recomienda separar el c\u00f3digo Javascript del HTML.</p> <p>Para solucionarlo, se cre\u00f3 el modelo de registro de eventos que permite asociar a un elemento HTML una propiedad con el nombre del evento a escuchar. En el caso anterior:</p> registrar evento<pre><code>const boton = document.getElementById('boton1')\n\nboton.onclick = function () {\n  alert('Se ha pulsado')\n}\n...\n</code></pre>"},{"location":"03electron/03_events/#event-listeners","title":"Event listeners","text":"<p>La forma recomendada de hacerlo es usando el modelo avanzado de registro de eventos del W3C. Se usa el m\u00e9todo <code>addEventListener</code> que recibe como primer par\u00e1metro el nombre del evento a escuchar (sin 'on') y como segundo par\u00e1metro la funci\u00f3n a ejecutar, sin par\u00e9ntesis:</p> addEventListener<pre><code>const boton = document.getElementById('boton1')\n\nboton.addEventListener('click', pulsado);\n\nfunction pulsado() {\n  alert('Se ha pulsado')\n}\n</code></pre> <p>Habitualmente se usan funciones an\u00f3nimas ya que no necesitan ser llamadas desde fuera del callback:</p> inline callback<pre><code>const boton = document.getElementById('boton1')\n\nboton.addEventListener('click', function() {\n  alert('Se ha pulsado')\n})\n</code></pre> <p>Si queremos pasar alg\u00fan par\u00e1metro a la funci\u00f3n callback debemos usar funciones an\u00f3nimas.</p> <p>Una ventaja de este m\u00e9todo es que podemos poner varios listeners para el mismo evento y se ejecutar\u00e1n todos ellos.</p> <p>Para eliminar un listener se usa el m\u00e9todo <code>removeEventListener</code>.</p> <pre><code>document.getElementById('acepto').removeEventListener('click', aceptado);\n</code></pre> <p>NOTA:</p> <p>No se puede quitar un listener si hemos usado una funci\u00f3n an\u00f3nima, para quitarlo debemos usar como listener una funci\u00f3n con nombre.</p>"},{"location":"03electron/03_events/#tipos-de-eventos","title":"Tipos de eventos","text":"<p>Seg\u00fan qu\u00e9 o d\u00f3nde se produce un evento estos se clasifican en:</p>"},{"location":"03electron/03_events/#eventos-de-pagina","title":"Eventos de p\u00e1gina","text":"<p>Se producen en el documento HTML, normalmente en el BODY:</p> <ul> <li> <p><code>load</code>: se produce cuando termina de cargarse la p\u00e1gina (cuando ya est\u00e1 construido el \u00e1rbol DOM). Es \u00fatil para hacer acciones que requieran que el DOM est\u00e9 cargado como modificar la p\u00e1gina o poner listeners de eventos.     js<pre><code>window.addEventListener('load', function() {\n  // aqu\u00ed dentro el DOM ya est\u00e1 cargado\n})\n</code></pre></p> </li> <li> <p><code>beforeunload</code>: antes de cerrarse el documento.     unload<pre><code>window.addEventListener('beforeunload', function(event) {\n  if (confirm('\u00bfSeguro que quieres salir?')) {\n    // aqu\u00ed dentro el documento se est\u00e1 cerrando\n\n  } else {\n    // cancela el comportamiento por defecto\n    // en este caso el cierra la p\u00e1gina\n    event.preventDefault()\n  }\n})\n</code></pre></p> </li> </ul>"},{"location":"03electron/03_events/#eventos-de-raton","title":"Eventos de rat\u00f3n","text":"<p>Los produce el usuario con el rat\u00f3n:</p> <ul> <li><code>click</code> / <code>dblclick</code>: cuando se hace click/doble click sobre un elemento.     click<pre><code>const boton = document.getElementById('boton1')\nlet times = 0\nboton.addEventListener('click', function(event) {\n  console.log('Detectado evento click ' + times++)\n  console.log('Bot\u00f3n del rat\u00f3n pulsado: ' + event.button)\n})\n</code></pre></li> <li><code>mousedown</code> / <code>mouseup</code>: al pulsar/soltar cualquier bot\u00f3n del rat\u00f3n.     mousedown<pre><code>const boton = document.getElementById('boton1')\nlet times = 0\nboton.addEventListener('mousedown', function(event) {\n  console.log('Detectado evento mousedown ' + times++)\n  console.log('Bot\u00f3n del rat\u00f3n pulsado: ' + event.button)\n  switch (event.button) {\n    case 0:\n      console.log('- Bot\u00f3n izquierdo')\n      break\n    case 1:\n      console.log('- Bot\u00f3n central')\n      break\n    case 2:\n      console.log('- Bot\u00f3n derecho')\n      break\n  }\n})\n</code></pre></li> <li><code>mouseenter</code> / <code>mouseleave</code>: cuando el puntero del rat\u00f3n entra/sale del elemento.     mouseenter<pre><code>const boton = document.getElementById('boton1')\nlet times = 0\nboton.addEventListener('mouseenter', function() {\n  console.log('Detectado evento mouseenter ' + times++)\n})\n</code></pre></li> <li><code>mouseover</code>/<code>mouseout</code>: cuando el puntero del rat\u00f3n entra/sale del elemento o de cualquiera de sus descendientes (se produce en el elemento y en todos sus descendientes).     mouseover<pre><code>const boton = document.getElementById('boton1')\nlet times = 0\nboton.addEventListener('mouseover', function() {\n  console.log('Detectado evento mouseover ' + times++)\n})\n</code></pre></li> <li><code>mousemove</code>: se produce continuamente mientras el puntero se mueva dentro del elemento.     mousemove<pre><code>const boton = document.getElementById('boton1')\nlet times = 0\nboton.addEventListener('mousemove', function(event) {\n  console.log('Detectado evento mousemove ' + times++)\n  console.log('Coordenadas del rat\u00f3n: ' + event.clientX + ', ' + event.clientY)\n})\n</code></pre></li> </ul> <p>NOTA</p> <p>Si hacemos doble click sobre un elemento la secuencia de eventos que se producir\u00eda es: <code>mousedown</code> -&gt; <code>mouseup</code> -&gt; <code>click</code> -&gt; <code>mousedown</code> -&gt; <code>mouseup</code> -&gt; <code>click</code> -&gt; <code>dblclick</code></p>"},{"location":"03electron/03_events/#eventos-de-teclado","title":"Eventos de teclado","text":"<p>Los produce el usuario al usar el teclado:</p> <ul> <li><code>keydown</code>: se produce al presionar una tecla y se repite continuamente si la tecla se mantiene pulsada.     keydown<pre><code>document.addEventListener('keydown', function(event) {\n  console.log('Detectado evento keydown')\n  console.log('Tecla pulsada: ' + event.key)\n  console.log('C\u00f3digo de la tecla: ' + event.keyCode)\n})\n</code></pre></li> <li><code>keyup</code>: cuando se deja de presionar la tecla.     keyup<pre><code>document.addEventListener('keyup', function(event) {\n  console.log('Detectado evento keyup')\n  console.log('Tecla soltada: ' + event.key)\n  console.log('C\u00f3digo de la tecla: ' + event.keyCode)\n})\n</code></pre></li> </ul>"},{"location":"03electron/03_events/#eventos-de-formulario","title":"Eventos de formulario","text":"<p>Se producen en los formularios:</p> <ul> <li><code>focus</code> / <code>blur</code>: al obtener/perder el foco el elemento.     focus<pre><code>const input = document.getElementById('nombre')\ninput.addEventListener('focus', function() {\n  console.log('Detectado evento focus')\n})\ninput.addEventListener('blur', function() {\n  console.log('Detectado evento blur')\n})\n</code></pre></li> <li><code>change</code>: al perder el foco un <code>&lt;input&gt;</code> o <code>&lt;textarea&gt;</code> si ha cambiado su contenido o al cambiar de valor un <code>&lt;select&gt;</code> o un <code>&lt;checkbox&gt;</code>.     change<pre><code>const input = document.getElementById('nombre')\ninput.addEventListener('change', function(event) {\n  console.log('Detectado evento change')\n  console.log('Valor del campo: ' + event.target.value)\n})\n</code></pre></li> <li><code>input</code>: al cambiar el valor de un <code>&lt;imput&gt;</code> o <code>&lt;textarea&gt;</code>. Se produce cada vez que escribimos una letra es estos elementos.     input<pre><code>const input = document.getElementById('nombre')\ninput.addEventListener('input', function(event) {\n  console.log('Detectado evento input')\n  console.log('Valor del campo: ' + event.target.value)\n})\n</code></pre></li> <li><code>select</code>: al cambiar el valor de un <code>&lt;select&gt;</code> o al seleccionar texto de un <code>&lt;input&gt;</code> o <code>&lt;textarea&gt;</code>.     select<pre><code>const input = document.getElementById('nombre')\ninput.addEventListener('select', function() {\n  console.log('Detectado evento select')\n})\n</code></pre></li> <li><code>submit</code> / <code>reset</code>: al enviar/recargar un formulario.     submit<pre><code>const form = document.getElementById('formulario')\nform.addEventListener('submit', function(event) {\n  console.log('Detectado evento submit')\n  event.preventDefault()\n})\nform.addEventListener('reset', function() {\n  console.log('Detectado evento reset')\n})\n</code></pre></li> </ul>"},{"location":"03electron/03_events/#los-objetos-this-y-event","title":"Los objetos this y event","text":"<p>Al producirse un evento se generan autom\u00e1ticamente en el listener 2 objetos:  <code>this</code> y <code>event</code>:</p> <ul> <li><code>this</code>: hace referencia al elemento que contiene el c\u00f3digo en donde se encuentra la variable <code>this</code>. Por ejemplo, si el listener est\u00e1 en un bot\u00f3n <code>this</code> ser\u00e1 el bot\u00f3n. Si el listener est\u00e1 en un formulario <code>this</code> ser\u00e1 el formulario.     this<pre><code>const boton = document.getElementById('boton1')\nboton.addEventListener('click', function() {\n  console.log('Elemento que ha lanzado el evento: ' + this.id)\n})\n</code></pre></li> <li> <p><code>event</code>: es un objeto y la funci\u00f3n listener lo recibe como par\u00e1metro. Tiene propiedades y m\u00e9todos que nos dan informaci\u00f3n sobre el evento, como:</p> <ul> <li><code>.type</code>: qu\u00e9 evento se ha producido (<code>click</code>, <code>submit</code>, <code>keyDown</code>, etc.).</li> <li><code>.target</code>: el elemento donde se produjo el evento. Puede ser <code>this</code> o un descendiente de <code>this</code>.</li> <li> <p><code>.currentTarget</code>: el elemento que contiene el listener del evento lanzado, normalmente el mismo que <code>this</code>.</p> <p>Ejemplo</p> <p>Si tenemos un <code>&lt;p&gt;</code> al que le ponemos un listener de '<code>click</code>' que dentro tiene un elemento <code>&lt;span&gt;</code>, si hacemos <code>click</code> sobre el <code>&lt;span&gt;</code> <code>event.target</code> ser\u00e1 el <code>&lt;span&gt;</code> que es donde hemos hecho click (est\u00e1 dentro de <code>&lt;p&gt;</code>) pero tanto <code>this</code> como <code>event.currentTarget</code> ser\u00e1 <code>&lt;p&gt;</code> (que es quien tiene el listener que se est\u00e1 ejecutando).</p> </li> <li> <p><code>.relatedTarget</code>: en un evento '<code>mouseover</code>' <code>event.target</code> es el elemento donde ha entrado el puntero del rat\u00f3n y <code>event.relatedTarget</code> el elemento del que ha salido. En un evento '<code>mouseout</code>' ser\u00eda al rev\u00e9s.</p> </li> <li><code>cancelable</code>: si el evento puede cancelarse. En caso afirmativo se puede llamar a <code>event.preventDefault()</code> para cancelarlo</li> <li><code>.preventDefault()</code>: si un evento tiene un listener asociado, se ejecuta el c\u00f3digo de dicho listener y despu\u00e9s el navegador realiza la acci\u00f3n que corresponder\u00eda por defecto al evento si no tuviera listener (por ejemplo un listener del evento <code>click</code> sobre un hiperenlace har\u00e1 que se ejecute su c\u00f3digo y despu\u00e9s saltar\u00e1 a la p\u00e1gina indicada en el <code>href</code> del hiperenlace). Este m\u00e9todo cancela la acci\u00f3n por defecto del navegador para el evento. Por ejemplo si el evento era el <code>submit</code> de un formulario \u00e9ste no se enviar\u00e1 o si era un <code>click</code> sobre un hiperenlace no se ir\u00e1 a la p\u00e1gina indicada en \u00e9l.</li> <li><code>.stopPropagation</code>: un evento se produce sobre un elemento y todos su padres. Por ejemplo si hacemos click en un <code>&lt;span&gt;</code> que est\u00e1 en un <code>&lt;p&gt;</code> que est\u00e1 en un <code>&lt;div&gt;</code> que est\u00e1 en el BODY el evento se va propagando por todos estos elementos y saltar\u00edan los listeners asociados a todos ellos (si los hubiera). Si alguno llama a este m\u00e9todo el evento no se propagar\u00e1 a los dem\u00e1s elementos padre.</li> <li>Eventos de rat\u00f3n:<ul> <li><code>.button</code>: qu\u00e9 bot\u00f3n del rat\u00f3n se ha pulsado (<code>0</code>: izquierdo, <code>1</code>: central (rueda); <code>2</code>: derecho).</li> <li><code>.screenX</code> / <code>.screenY</code>: las coordenadas del rat\u00f3n respecto a la pantalla.</li> <li><code>.clientX</code> / <code>.clientY</code>: las coordenadas del rat\u00f3n respecto a la ventana cuando se produjo el evento.</li> <li><code>.pageX</code> / <code>.pageY</code>: las coordenadas del rat\u00f3n respecto al documento (si se ha hecho un scroll ser\u00e1 el clientX/Y m\u00e1s el scroll).</li> <li><code>.offsetX</code> / <code>.offsetY</code>: las coordenadas del rat\u00f3n respecto al elemento sobre el que se produce el evento.</li> <li><code>.detail</code>: si se ha hecho click, doble click o triple click.</li> </ul> </li> <li>Eventos de teclado: son los m\u00e1s incompatibles entre diferentes navegadores. En el teclado hay teclas normales y especiales (<code>Alt</code>, <code>Ctrl</code>, <code>Shift</code>, <code>Enter</code>, <code>Tab</code>, flechas, <code>Supr</code>, etc.). En la informaci\u00f3n del teclado hay que distinguir entre el c\u00f3digo del car\u00e1cter pulsado (<code>e=101</code>, <code>E=69</code>, <code>\u20ac=8364</code>) y el c\u00f3digo de la tecla pulsada (para los 3 caracteres es el 69 ya que se pulsa la misma tecla). Las principales propiedades de <code>event</code> son:<ul> <li><code>.key</code>: devuelve el nombre de la tecla pulsada.</li> <li><code>.which</code>: devuelve el c\u00f3digo de la tecla pulsada.</li> <li><code>.keyCode</code> / <code>.charCode</code>: c\u00f3digo de la tecla pulsada y del car\u00e1cter pulsado (seg\u00fan navegadores).</li> <li><code>.shiftKey</code> / <code>.ctrlKey</code> / <code>.altKey</code> / <code>.metaKey</code>: si est\u00e1 o no pulsada la tecla <code>SHIFT</code> / <code>CTRL</code> / <code>ALT</code> / <code>META</code>. Esta propiedad tambi\u00e9n la tienen los eventos de rat\u00f3n.</li> </ul> </li> </ul> </li> </ul> <p>NOTA:</p> <p>A la hora de saber qu\u00e9 tecla ha pulsado el usuario es conveniente tener en cuenta:</p> <ul> <li>para saber qu\u00e9 car\u00e1cter se ha pulsado lo mejor usar la propiedad <code>key</code> o <code>charCode</code> de <code>keyPress</code>, pero var\u00eda entre navegadores.</li> <li>para saber la tecla especial pulsada mejor usar el <code>key</code> o el <code>keyCode</code> de <code>keyUp</code></li> <li>captura s\u00f3lo lo que sea necesario, se producen muchos eventos de teclado.</li> <li>para obtener el car\u00e1cter a partir del c\u00f3digo: <code>String fromCharCode(c\u00f3digo);</code></li> </ul> <p>Lo mejor para familiarizarse con los diferentes eventos es consultar los ejemplos de w3schools.</p>"},{"location":"03electron/03_events/#bind-del-objeto-this","title":"Bind del objeto this","text":"<p>En ocasiones no queremos que <code>this</code> sea el elemento sobre quien se produce el evento sino que queremos conservar el valor que ten\u00eda antes de entrar a la funci\u00f3n. Por ejemplo, la funci\u00f3n listener es un m\u00e9todo de una clase, en <code>this</code> tenemos el objeto de la clase sobre el que estamos actuando pero al entrar en la funci\u00f3n perdemos esa referencia.</p> <p>El m\u00e9todo <code>.bind()</code> nos permite pasarle a una funci\u00f3n el valor que queremos darle a la variable <code>this</code> dentro de dicha funci\u00f3n. Por defecto a un <code>listener</code> de eventos se le asocia (coloquialmente \"bindea\") el valor de event.currentTarget. Si queremos que tenga otro valor se lo indicamos con .bind(): </p> <pre><code>document.getElementById('acepto').addEventListener('click', aceptado.bind(variable))\n</code></pre> <p>En este ejemplo el valor de <code>this</code> dentro de la funci\u00f3n <code>aceptado</code> ser\u00e1 <code>variable</code>. En el ejemplo que hab\u00edamos comentado de un listener dentro de una clase, para mantener el valor de <code>this</code> y que haga referencia al objeto sobre el que estamos actuando har\u00edamos:</p> <pre><code>document.getElementById('acepto').addEventListener('click', aceptado.bind(this))\n</code></pre> <p>por lo que el valor de <code>this</code> dentro de la funci\u00f3n <code>aceptado</code> ser\u00e1 el mismo que ten\u00eda fuera, es decir, el objeto.</p> <p>Podemos bindear, es decir, pasarle al listener m\u00e1s variables declar\u00e1ndolas como par\u00e1metros de <code>bind</code>. El primer par\u00e1metro ser\u00e1 el valor de this y los dem\u00e1s ser\u00e1n par\u00e1metros que recibir\u00e1 la funci\u00f3n antes de recibir el par\u00e1metro <code>event</code> que ser\u00e1 el \u00faltimo. Por ejemplo:</p> <pre><code>document.getElementById('acepto').addEventListener('click', aceptado.bind(var1, var2, var3));\n...\nfunction aceptado(param1, param2, event) {\n  // Aqu\u00ed dentro tendremos los valores\n  // this = var1\n  // param1 = var2\n  // param2 = var3\n  // event es el objeto con la informaci\u00f3n del evento producido\n}\n</code></pre>"},{"location":"03electron/03_events/#propagacion-de-eventos-bubbling","title":"Propagaci\u00f3n de eventos (bubbling)","text":"<p>Normalmente en el DOM los elementos HTML se solapan unos con otros, por ejemplo, un <code>&lt;span&gt;</code> est\u00e1 en un <code>&lt;p&gt;</code> que est\u00e1 en un <code>&lt;div&gt;</code> que est\u00e1 en el <code>&lt;body&gt;</code>. Si ponemos un listener del evento click a todos ellos se ejecutar\u00e1n todos ellos, pero \u00bfen qu\u00e9 orden?.</p> <p>Pues el W3C estableci\u00f3 un modelo en el que primero se disparan los eventos de fuera hacia dentro (primero el <code>&lt;body&gt;</code>) y al llegar al m\u00e1s interno (el <code>&lt;span&gt;</code>) se vuelven a disparar de nuevo pero de dentro hacia afuera. La primera fase se conoce como fase de captura y la segunda como fase de burbujeo o bubbling. Cuando ponemos un listener con <code>addEventListener</code> el tercer par\u00e1metro indica en qu\u00e9 fase debe dispararse:</p> <ul> <li><code>true</code>: en fase de captura.</li> <li><code>false</code> (valor por defecto): en fase de burbujeo.</li> </ul> <p>Enlace: Ejemplo de captura y burbujeo de eventos</p> html<pre><code>&lt;div id=\"divVerde\" style=\"background-color: green; width: 150px; height: 150px;\"&gt;\n  &lt;div id=\"divRojo\" style=\"background-color: red; width: 100px; height: 100px;\"&gt;\n    &lt;div id=\"divAzul\" style=\"background-color: blue; width: 50px; height: 50px;\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;p id=\"info\"&gt;&lt;/p&gt;\n</code></pre> js<pre><code>const info = document.getElementById('info')\ninfo.addEventListener('click', function() {\n  info.innerHTML = ''\n})\n\nconst divClick = function(event) {\n// eventPhase: 1 -&gt; capture, 2 -&gt; target (objetivo), 3 -&gt; bubble\n    info.innerHTML = \"Has pulsado: \" + this.id + \". Fase: \" + event.eventPhase + \", this: \" + this.id + \", event.target: \" + event.target.id + \", event.currentTarget: \" + event.currentTarget.id + \"&lt;br&gt;\" + info.innerHTML\n}\n\nlet capture = false\n\nconst divVerde = document.getElementById(\"divVerde\")\nconst divRojo = document.getElementById(\"divRojo\")\nconst divAzul = document.getElementById(\"divAzul\")\ndivVerde.addEventListener('click', divClick, capture)\ndivRojo.addEventListener('click', divClick, capture)\ndivAzul.addEventListener('click', divClick, capture)\n</code></pre> <p>Sin embargo si al m\u00e9todo <code>.addEventListener</code> le pasamos un tercer par\u00e1metro con el valor <code>true</code> el comportamiento ser\u00e1 el contrario, lo que se conoce como captura y el primer listener que se ejecutar\u00e1 es el del <code>&lt;body&gt;</code> y el \u00faltimo el del <code>&lt;span&gt;</code> (pod\u00e9is probarlo a\u00f1adiendo ese par\u00e1metro al ejemplo anterior).</p> <p>En cualquier momento podemos evitar que se siga propagando el evento ejecutando el m\u00e9todo <code>.stopPropagation()</code> en el c\u00f3digo de cualquiera de los listeners.</p> <p>Pod\u00e9is ver las distintas fases de un evento en la p\u00e1gina domevents.dev.</p>"},{"location":"03electron/03_events/#innerhtml-y-listeners-de-eventos","title":"innerHTML y listeners de eventos","text":"<p>Si cambiamos la propiedad <code>innerHTML</code> de un elemento del \u00e1rbol DOM todos sus <code>listeners</code> de eventos desaparecen ya que es como si se volviera a crear ese elemento.</p> <p>Por ejemplo, tenemos una tabla de datos y queremos que al hacer doble clic en cada fila se muestre su id. La funci\u00f3n que a\u00f1ade una nueva fila podr\u00eda ser:</p> js<pre><code>function renderNewRow(data) {\n  let miTabla = document.getElementById('tabla-datos')\n  let nuevaFila = `&lt;tr id=\"${data.id}\"&gt;&lt;td&gt;${data.dato1}&lt;/td&gt;&lt;td&gt;${data.dato2}...&lt;/td&gt;&lt;/tr&gt;`\n  miTabla.innerHTML += nuevaFila\n  document.getElementById(data.id).addEventListener('dblclick', event =&gt; alert('Id: '+ event.target.id))\n}\n</code></pre> <p>Sin embargo esto s\u00f3lo funcionar\u00eda para la \u00faltima fila a\u00f1adida ya que la l\u00ednea <code>miTabla.innerHTML += nuevaFila</code> equivale a <code>miTabla.innerHTML = miTabla.innerHTML + nuevaFila</code>. Por tanto estamos asignando a miTabla un c\u00f3digo HTML que ya no contiene <code>listeners</code>, excepto el de nuevaFila que lo ponemos despu\u00e9s de hacer la asignaci\u00f3n.</p> <p>La forma correcta de hacerlo ser\u00eda:</p> js<pre><code>function renderNewRow(data) {\n  let miTabla = document.getElementById('tabla-datos');\n  let nuevaFila = document.createElement('tr');\n  nuevaFila.id = data.id;\n  nuevaFila.innerHTML = `&lt;td&gt;${data.dato1}&lt;/td&gt;&lt;td&gt;${data.dato2}...&lt;/td&gt;`;\n  nuevaFila.addEventListener('dblclick', event =&gt; alert('Id: ' + event.target.id) );\n  miTabla.appendChild(nuevaFila);\n}\n</code></pre> <p>De esta forma adem\u00e1s mejoramos el rendimiento ya que el navegador s\u00f3lo tiene que renderizar el nodo correspondiente a la nuevaFila. Si lo hacemos como estaba al principio se deben volver a crear y a renderizar todas las filas de la tabla (todo lo que hay dentro de miTabla).</p>"},{"location":"03electron/03_events/#eventos-personalizados","title":"Eventos personalizados","text":"<p>Tambi\u00e9n podemos mediante c\u00f3digo lanzar manualmente cualquier evento sobre un elemento con el m\u00e9todo <code>dispatchEvent()</code> e incluso crear eventos personalizados, por ejemplo:</p> js<pre><code>// crear el evento\nconst event = new Event('build')\n\n// escuchar el evento\nelem.addEventListener('build', (e) =&gt; { /* ... */ }, false )\n\n// enviar el evento\nelem.dispatchEvent(event)\n</code></pre> <p>Incluso podemos a\u00f1adir datos al objeto <code>event</code> si creamos el evento con <code>new CustomEvent()</code>. Pod\u00e9is obtener m\u00e1s informaci\u00f3n en la p\u00e1gina de MDN.</p> js<pre><code>// crear el evento personalizado\nconst customEvent = new CustomEvent('log', { detail: { message: 'Prueba de evento personalizado' } });\n\n// escuchar el evento\nelem.addEventListener( 'log', (e) =&gt; {\n    console.log(e.detail.message);\n}, false )\n\n// enviar el evento\nelem.dispatchEvent(customEvent)\n</code></pre>"},{"location":"03electron/04_forms/","title":"3.4 Formularios","text":"<p>En este apartado vamos a ver c\u00f3mo validar formularios en el lado cliente. La validaci\u00f3n de formularios en el lado cliente es una t\u00e9cnica que se utiliza para mejorar la experiencia del usuario y evitar que se env\u00eden datos incorrectos al servidor. NUNCA puede sustituir a la validaci\u00f3n en el lado servidor ya que en el lado cliente se podr\u00eda manipular el c\u00f3digo y saltarse la validaci\u00f3n.</p> <p>Se puede encontrar una gu\u00eda muy completa de validaci\u00f3n de formularios en el lado cliente el la p\u00e1gina de MDN web docs que ha servido como base para estos apuntes.</p> <p>B\u00e1sicamente dos maneras de validar un formulario en el lado cliente:</p> <ul> <li><code>HTML5</code>: Usar la validaci\u00f3n incorporada en HTML5 y dejar que sea el navegador quien se encargue de todo</li> <li><code>Javascript</code>: Realizar la validaci\u00f3n mediante Javascript</li> </ul> <p>La ventaja de la primera opci\u00f3n, <code>HTML5</code>, es que no hay que escribir c\u00f3digo adicional, sino simplemente a\u00f1adir atributos a los <code>INPUT</code> que indiquen qu\u00e9 y c\u00f3mo se han de validar. La principal desventaja es que no hay control sobre el proceso, lo que provocar\u00e1:</p> <ul> <li>El navegador valida campo a campo: cuando encuentra un error en un campo lo muestra y hasta que no se soluciona no valida el siguiente lo que hace que el proceso sea molesto para el usuario que no ve todo lo que hay mal de una vez.</li> <li>Los mensajes son los predeterminados del navegador y en ocasiones pueden no ser muy claros para el usuario.</li> <li>Los mensajes se muestran en el idioma en que est\u00e1 configurado el navegador, no en el de la aplicaci\u00f3n.</li> </ul>"},{"location":"03electron/04_forms/#validacion-html5","title":"Validaci\u00f3n HTML5","text":"<p>Funciona a\u00f1adiendo atributos a los campos del formulario que queremos validar. Los m\u00e1s usados son:</p> <ul> <li> <p><code>required</code></p> <p>Indica que el campo es obligatorio. La validaci\u00f3n fallar\u00e1 si no hay nada escrito en el <code>&lt;input&gt;</code>.</p> <p>En el caso de un grupo de <code>radiobuttons</code> se pone sobre cualquiera de ellos (o sobre todos) y obliga a que haya seleccionada una opci\u00f3n cualquiera del grupo.</p> required<pre><code>&lt;input type=\"text\" name=\"nombre\" id=\"nombre\" required&gt;\n</code></pre> </li> <li> <p><code>pattern</code></p> <p>Obliga a que el contenido del campo cumpla la expresi\u00f3n regular indicada. Por ejemplo, para un c\u00f3digo postal ser\u00eda <code>pattern=\"^[0-9]{5}$\"</code></p> pattern<pre><code>&lt;input type=\"text\" name=\"cp\" id=\"cp\" pattern=\"^[0-9]{5}$\"&gt;\n</code></pre> </li> <li> <p><code>minlength</code> / <code>maxlength</code></p> <p>Indica la longitud m\u00ednima / m\u00e1xima del contenido del campo.</p> minlength/maxlength<pre><code>&lt;input type=\"text\" name=\"nombre\" id=\"nombre\" minlength=\"3\" maxlength=\"20\"&gt;\n</code></pre> </li> <li> <p><code>min</code> / <code>max</code></p> <p>Indica el valor m\u00ednimo / m\u00e1ximo del contenido de un campo num\u00e9rico.</p> min/max<pre><code>&lt;input type=\"number\" name=\"edad\" id=\"edad\" min=\"18\" max=\"99\"&gt;\n</code></pre> </li> </ul> <p>Tambi\u00e9n producen errores de validaci\u00f3n si el contenido de un campo no se adapta al <code>type</code> indicado (<code>email</code>, <code>number</code>, <code>email</code>, etc.) o si el valor de un campo num\u00e9rico no cumple con el <code>step</code> indicado.</p> <p>Cuando el contenido de un campo es valido dicho campo obtiene autom\u00e1ticamente la pseudo-clase <code>:valid</code> y si no lo es tendr\u00e1 la pseudo-clase <code>:invalid</code> lo que nos permite poner reglas en nuestro <code>CSS</code> para destacar dichos campos, por ejemplo:</p> style.css<pre><code>input:invalid {\n  border: 2px dashed red;\n}\n</code></pre> <p>La validaci\u00f3n se realiza al enviar el formulario y al encontrar un error se muestra, se detiene la validaci\u00f3n del resto de campos y no se env\u00eda el formulario.</p> index.html<pre><code>&lt;form&gt;\n  &lt;label for=\"nombre\"&gt;Por favor, introduzca su nombre (entre 5 y 50 caracteres): &lt;/span&gt;\n  &lt;input type=\"text\" id=\"nombre\" name=\"nombre\" required minlength=\"5\" maxlength=\"50\" placeholder=\"Nombre... (5..50)\"&gt;\n  &lt;br /&gt;\n  &lt;label for=\"mail\"&gt;Por favor, introduzca una direcci\u00f3n de correo electr\u00f3nico: &lt;/label&gt;\n  &lt;input type=\"email\" id=\"mail\" name=\"mail\" required minlength=\"8\" placeholder=\"Correo electr\u00f3nico... (8)\"&gt;\n  &lt;br /&gt;\n  &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> style.css<pre><code>input:invalid {\n  border: 2px dashed red;\n}\n</code></pre>"},{"location":"03electron/04_forms/#api-de-validacion-de-formularios","title":"API de validaci\u00f3n de formularios","text":"<p>Mediante Javascript tenemos acceso a todos los campos del formulario por lo que podemos hacer la validaci\u00f3n personalizada, pero es una tarea pesada, repetitiva y que provoca c\u00f3digo espagueti dif\u00edcil de leer y mantener m\u00e1s adelante.</p> <p>Para hacerla m\u00e1s simple se puede usar la API de validaci\u00f3n de formularios de HTML5 que permite que sea el navegador quien se encargue de comprobar la validez de cada campo pero las acciones (mostrar mensajes de error, no enviar el formulario, etc.) se realizan desde Javascript.</p> <p>Ventajas:</p> <ul> <li>Los requisitos de validaci\u00f3n de cada campo est\u00e1n como atributos HTML de dicho campo por lo que son f\u00e1ciles de ver.</li> <li>Evita la mayor parte del c\u00f3digo dedicada a comprobar si el contenido del campo es v\u00e1lido. La API s\u00f3lo comprueba si se cumplen o no y se toman las medidas adecuadas.</li> <li>Aprovecha las pseudo-clases <code>:valid</code> o <code>:invalid</code> que el navegador pone autom\u00e1ticamente a los campos.</li> </ul> <p>Las principales propiedades y m\u00e9todos que proporciona esta API son:</p> <ul> <li><code>checkValidity()</code>: M\u00e9todo que dice si el campo al que se aplica es o no v\u00e1lido. Tambi\u00e9n se puede aplicar al formulario.</li> <li><code>validationMessage</code>: En caso de que un campo no sea v\u00e1lido esta propiedad contiene el texto del error de validaci\u00f3n proporcionado por el navegador. Si es v\u00e1lido esta propiedad es una cadena vac\u00eda.</li> <li><code>validity</code>: es un objeto que tiene propiedades booleanas para saber qu\u00e9 requisito del campo es el que falla:<ul> <li><code>valid</code>: Indica si es campo es v\u00e1lido.</li> <li><code>valueMissing</code>: Indica si no se cumple el atributo <code>required</code> (es decir, valdr\u00e1 <code>true</code> si el campo tiene el atributo <code>required</code> pero no se ha introducido nada en \u00e9l)</li> <li><code>typeMismatch</code>: Indica si el contenido del campo no cumple con su atributo <code>type</code> (ej. <code>type=\"email\"</code>).</li> <li><code>patternMismatch</code>: Indica si no se cumple con el <code>pattern</code> indicado en su atributo.</li> <li><code>tooShort</code> / <code>tooLong</code>: Indican si no se cumple el atributo <code>minlength</code> o <code>maxlength</code> respectivamente.</li> <li><code>rangeUnderflow</code> / <code>rangeOverflow</code>: Indica si no se cumple el atributo <code>min</code> / <code>max</code></li> <li><code>stepMismatch</code>: Indica si no se cumple el atributo <code>step</code> del campo.</li> <li><code>customError</code>: Indica al campo se le ha puesto un error personalizado con <code>setCustomValidity</code></li> </ul> </li> <li><code>setCustomValidity(mensaje)</code>: A\u00f1ade un error personalizado al campo, que ahora ya NO ser\u00e1 v\u00e1lido, con el mensaje pasado como par\u00e1metro. Para quitar este error se debe pasar un string vac\u00edo <code>setCustomValidity('')</code></li> </ul> <p>En la p\u00e1gina de W3Schools se puede ver alg\u00fan ejemplo b\u00e1sico. A continuaci\u00f3n, un ejemplo simple del valor de las diferentes propiedades involucradas en la validaci\u00f3n de un campo de texto que es obligatorio y cuyo tama\u00f1o debe estar entre 5 y 50 caracteres:</p> index.html<pre><code>&lt;label&gt;Nombre:&lt;/label&gt;\n&lt;input type=\"text\" required minlength=\"5\" maxlength=\"50\"&gt;\n&lt;span id=\"error\" class=\"error\"&gt;&lt;/span&gt;\n&lt;br&gt;\n&lt;button id=\"comprueba\"&gt;Comprueba&lt;/button&gt;\n&lt;p&gt;checkValidity: &lt;span id=\"checkValidity\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;validationMessage: &lt;span id=\"validationMessage\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;validity.valueMissing: &lt;span id=\"valueMissing\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;validity.tooShort: &lt;span id=\"tooShort\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;validity.tooLong: &lt;span id=\"tooLong\"&gt;&lt;/span&gt;&lt;/p&gt;\n</code></pre> script.js<pre><code>document.getElementById('comprueba').addEventListener('click', (event) =&gt; \n{\n    const inputName = document.getElementsByTagName('input')[0]\n\n  document.getElementById('error').innerHTML = inputName.validationMessage\n  document.getElementById('checkValidity').innerHTML = inputName.checkValidity()\n    document.getElementById('validationMessage').innerHTML = inputName.validationMessage\n    document.getElementById('valueMissing').innerHTML = inputName.validity.valueMissing\n    document.getElementById('tooShort').innerHTML = inputName.validity.tooShort\n    document.getElementById('tooLong').innerHTML = inputName.validity.tooLong\n})\n</code></pre> style.css<pre><code>.error {\n  color: red;\n}\n</code></pre> <p>Ver en jsfiddle</p> <p>Para validar un formulario usando esta API debemos a\u00f1adir al <code>&lt;form&gt;</code> el atributo <code>novalidate</code> que hace que no se encargue el navegador de mostrar los mensajes de error ni de decidir si se env\u00eda o no el formulario, aunque s\u00ed valida los campos. En el evento <code>submit</code> del formulario se comprueba si es v\u00e1lido y si no lo es mostrar los mensajes de error.</p> <p>Un ejemplo sencillo de validaci\u00f3n de un formulario podr\u00eda ser:</p> index.html<pre><code>&lt;form id=\"user-form\" novalidate&gt;\n  &lt;label for=\"nombre\"&gt;Por favor, introduzca su nombre (entre 5 y 50 caracteres): &lt;/label&gt;\n  &lt;input type=\"text\" id=\"nombre\" name=\"nombre\" required minlength=\"5\" maxlength=\"50\"&gt;\n  &lt;span class=\"error\"&gt;&lt;/span&gt;\n  &lt;br /&gt;\n  &lt;label for=\"mail\"&gt;Por favor, introduzca una direcci\u00f3n de correo electr\u00f3nico: &lt;/label&gt;\n  &lt;input type=\"email\" id=\"mail\" name=\"mail\" required minlength=\"8\"&gt;\n  &lt;span class=\"error\"&gt;&lt;/span&gt;\n  &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> script.js<pre><code>const form  = document.getElementById('user-form')\n\nconst nombre = document.getElementById('nombre')\nconst nombreError = document.querySelector('#nombre + span.error')\nconst email = document.getElementById('mail')\nconst emailError = document.querySelector('#mail + span.error')\n\nform.addEventListener('submit', (event) =&gt; {\n  if(!form.checkValidity()) {\n    event.preventDefault()\n  }\n  nombreError.textContent = nombre.validationMessage\n  emailError.textContent = email.validationMessage\n})\n</code></pre> style.css<pre><code>.error {\n  color: red;\n}\n\ninput:invalid {\n  border: 2px dashed red;\n}\n</code></pre> <p>Utiliza:</p> <ul> <li><code>validationMessage</code> para mostrar el posible error de cada campo, o quitar el error cuando el campo sea v\u00e1lido.</li> <li><code>checkValidity()</code> y <code>preventDefault()</code> para no enviar/procesar el formulario si contiene errores.</li> </ul> <p>Se puede cambiar el mensaje por defecto por uno personalizado con una funci\u00f3n que reciba un <code>&lt;input&gt;</code> y usando su propiedad <code>validity</code> devuelva un mensaje en funci\u00f3n del error detectado:</p> script.js<pre><code>const form  = document.getElementById('user-form')\n\nconst nombre = document.getElementById('nombre')\nconst nombreError = document.querySelector('#nombre + span.error')\nconst email = document.getElementById('mail')\nconst emailError = document.querySelector('#mail + span.error')\n\nform.addEventListener('submit', (event) =&gt; {\n  if(!form.checkValidity()) {\n    event.preventDefault()\n  }\n  nombreError.textContent = customErrorValidationMessage(nombre)\n  emailError.textContent = customErrorValidationMessage(email)\n})\n\nfunction customErrorValidationMessage(input) {\n\n  if (input.checkValidity()) {\n    return ''\n  }\n\n  if (input.validity.valueMissing) {\n    return 'Este campo es obligatorio'\n  }\n\n  if (input.validity.tooShort) {\n    return `Debe tener al menos ${input.minLength} caracteres` \n  }\n\n// Y seguiremos comprobando cada atributo que hayamos usado en el HTML\n  return 'Error en el campo'   // por si se nos ha olvidado comprobar algo\n}\n</code></pre> <p>En lugar de <code>nombreError.textContent = nombre.validationMessage</code> hacemos <code>nombreError.textContent = customErrorValidationMessage(nombre)</code>.</p> <p>Si tenemos que validar algo que no puede hacerse mediante atributos HTML (por ejemplo si el nombre de usuario ya est\u00e1 en uso) deberemos hacer la validaci\u00f3n manualmente y en caso de no ser v\u00e1lido ponerle un error con <code>.setCustomValidation()</code>, pero debemos recordar quitar el error si todo es correcto o el formulario siempre ser\u00e1 inv\u00e1lido. Modificando el ejemplo:</p> script.js<pre><code>const nombre = document.getElementById('nombre')\nconst nombreError = document.querySelector('#nombre + span.error')\n\nif (nombreEnUso(nombre)) {\n  nombre.setCustomValidation('Ese nombre de usuario ya est\u00e1 en uso')\n} else {\n  nombre.setCustomValidation('')  // Se quita el error personalizado\n}\nform.addEventListener('submit', (event) =&gt; {\n  if(!form.checkValidity()) {\n    ...\n  }\n})\n</code></pre> <p>yup</p> <p>Existen m\u00faltiples librer\u00edas que facilitan enormemente el tedioso trabajo de validar un formulario. Un ejemplo es yup.</p>"},{"location":"03electron/04_forms/#expresiones-regulares","title":"Expresiones regulares","text":"<p>Las expresiones regulares permiten buscar un patr\u00f3n dado en una cadena de texto. Se suelen usar a la hora de validar formularios o para buscar y reemplazar texto. En Javascript se crean poni\u00e9ndolas entre caracteres <code>/</code>, o instanciando clase <code>RegExp</code>:</p> script.js<pre><code>let cadena='Hola mundo'\nlet expr=/mundo/\nexpr.test(cadena)\n// devuelve true porque en la cadena se encuentra la expresi\u00f3n 'mundo'\n</code></pre> <p>Minimiza el uso de expresiones regulares</p> <p>Las expresiones regulares son muy potentes pero tambi\u00e9n se pueden volver muy complicadas y dif\u00edciles de leer. Siempre que sea posible es mejor usar funciones espec\u00edficas de Javascript.</p>"},{"location":"03electron/04_forms/#patrones","title":"Patrones","text":"<p>La potencia de las expresiones regulares es que pueden usar patrones para construir la expresi\u00f3n. Los m\u00e1s comunes son:</p> <ul> <li><code>[ ]</code> (corchetes): dentro se ponen varios caracteres o un rango y permiten comprobar si el car\u00e1cter de esa posici\u00f3n de la cadena coincide con alguno de ellos. Ejemplos:<ul> <li><code>[abc]</code>: Cualquier car\u00e1cter de los indicados ('<code>a</code>' o '<code>b</code>' o '<code>c</code>').</li> <li><code>[^abc]</code>: Cualquiera excepto los indicados.</li> <li><code>[a-z]</code>: Cualquier min\u00fascula (el car\u00e1cter '<code>-</code>' indica el rango entre '<code>a</code>' y '<code>z</code>', incluidas).</li> <li><code>[a-zA-Z]</code>: Cualquier letra.</li> </ul> </li> <li><code>( | )</code> (pipe): debe coincidir con una de las opciones indicadas:<ul> <li><code>(x|y)</code>: La letra <code>x</code> o la <code>y</code> (ser\u00eda equivalente a <code>[xy]</code>).</li> <li><code>(http|https)</code>: Cualquiera de las 2 palabras.</li> </ul> </li> <li>Metacaracteres:<ul> <li><code>.</code> (punto): Un \u00fanico car\u00e1cter, sea el que sea.</li> <li><code>\\d</code>: Un d\u00edgito (<code>\\D</code>: lo opuesto, cualquier cosa menos d\u00edgito).</li> <li><code>\\s</code>: Espacio en blanco (<code>\\S</code>: lo opuesto).</li> <li><code>\\w</code>: Una palabra o car\u00e1cter alfanum\u00e9rico (<code>\\W</code> lo contrario).</li> <li><code>\\b</code>: Delimitador de palabra (espacio, principio o fin de cadena).</li> <li><code>\\n</code>: Nueva l\u00ednea.</li> </ul> </li> <li>Cuantificadores:<ul> <li><code>+</code>: Al menos 1 vez (ej. <code>[0-9]+</code> al menos un d\u00edgito)</li> <li><code>*</code>: 0 o m\u00e1s veces.</li> <li><code>?</code>: 0 o 1 vez.</li> <li><code>{n}</code>: n caracteres (ej. <code>[0-9]{5}</code> = 5 d\u00edgitos).</li> <li><code>{n,}</code>: n o m\u00e1s caracteres.</li> <li><code>{n,m}</code>: Entre n y m caracteres.</li> <li><code>^</code>: Al principio de la cadena (ej.: <code>^[a-zA-Z]</code> = empieza por letra).</li> <li><code>$</code>: Al final de la cadena (ej.: <code>[0-9]$</code> = que acabe en d\u00edgito).</li> </ul> </li> <li>Modificadores:<ul> <li><code>/i</code>: Que no distinga entre May\u00fasculas y min\u00fasculas (Ej. <code>/html/i</code> = buscar\u00e1 <code>html</code>, <code>Html</code>, <code>HTML</code>, ...)</li> <li><code>/g</code>: B\u00fasqueda global, busca todas las coincidencias y no s\u00f3lo la primera.</li> <li><code>/m</code>: Busca en m\u00e1s de una l\u00ednea (para cadenas con saltos de l\u00ednea).</li> </ul> </li> </ul>"},{"location":"03electron/04_forms/#metodos","title":"M\u00e9todos","text":"<p>Los usaremos para saber si la cadena coincide con determinada expresi\u00f3n o para buscar y reemplazar texto:</p> <ul> <li> <p><code>expr.test(cadena)</code>: Devuelve true si la cadena coincide con la expresi\u00f3n. Con el modificador <code>/g</code> har\u00e1 que cada vez que se llama busque desde la posici\u00f3n de la \u00faltima coincidencia. Ejemplo:</p> test.js<pre><code>let str = \"I am amazed in America\"\n\nlet reg = /am/g\nconsole.log(reg.test(str))\n// Imprime true\n\nconsole.log(reg.test(str))\n// Imprime true\n\nconsole.log(reg.test(str))\n// Imprime false, hay solo dos coincidencias\n\n\nlet reg2 = /am/gi\n// ahora no distinguir\u00e1 may\u00fasculas y min\u00fasculas\n\nconsole.log(reg.test(str))\n// Imprime true\n\nconsole.log(reg.test(str))\n// Imprime true\n\nconsole.log(reg.test(str))\n// Imprime true. Ahora tenemos 3 coincidencias con este nuevo patr\u00f3n\n</code></pre> </li> <li> <p><code>expr.exec(cadena)</code>: Igual que <code>test</code> pero en vez de <code>true</code> o <code>false</code> devuelve un objeto con la coincidencia encontrada, su posici\u00f3n y la cadena completa, o <code>null</code> si no encuentra m\u00e1s coincidencias. Ejemplo:</p> exec.js<pre><code>let str = \"I am amazed in America\"\nlet reg = /am/gi\n\nconsole.log(reg.exec(str))\n// Imprime [\"am\", index: 2, input: \"I am amazed in America\"]\n\nconsole.log(reg.exec(str))\n// Imprime [\"am\", index: 5, input: \"I am amazed in America\"]\n\nconsole.log(reg.exec(str))\n// Imprime [\"Am\", index: 15, input: \"I am amazed in America\"]\n\nconsole.log(reg.exec(str))\n// Imprime null\n</code></pre> </li> <li> <p><code>cadena.match(expr)</code>: Devuelve un array con las coincidencias encontradas. Ejemplo:</p> match.js<pre><code>let str = \"I am amazed in America\"\nlet reg = /am/gi\nconsole.log(str.match(reg)) // Imprime [\"am\", \"am\", \"Am\"]\n</code></pre> </li> <li> <p><code>cadena.search(expr)</code>: Devuelve la posici\u00f3n donde se encuentra la coincidencia buscada o <code>-1</code> si no aparece.</p> </li> <li> <p><code>cadena.replace(expr, cadena2)</code>: Devuelve una nueva cadena con las coincidencias de la cadena reemplazadas por la cadena pasada como segundo par\u00e1metro:</p> replace.js<pre><code>let str = \"I am amazed in America\"\nconsole.log(str.replace(/am/gi, \"xx\"))\n// Imprime \"I xx xxazed in xxerica\"\n\nconsole.log(str.replace(/am/gi, function(match) {\n    return \"-\" + match.toUpperCase() + \"-\"\n}))\n// Imprime \"I -AM- -AM-azed in -AM-erica\"\n</code></pre> </li> </ul> <p>No se va a profundizar m\u00e1s sobre las expresiones regulares. Es muy f\u00e1cil encontrar en Internet la que m\u00e1s se ajuste a nuestras necesidades, en cada caso (para validar un e-mail, un NIF, un CP, ...). Se puede aprender m\u00e1s en:</p> <ul> <li>w3schools</li> <li>regular-expressions.info</li> <li>html5pattern atributo</li> <li>y muchas otras p\u00e1ginas</li> </ul> <p>Tambi\u00e9n, hay p\u00e1ginas que nos permiten probar expresiones regulares con cualquier texto, como regexr.</p>"},{"location":"03electron/05_ipc/","title":"3.5 Comunicaci\u00f3n entre procesos","text":"<p>Electron hereda su arquitectura multiproceso de Chromium, lo que hace que el marco sea muy similar a un navegador web moderno.</p>"},{"location":"03electron/05_ipc/#por-que-no-un-solo-proceso","title":"\u00bfPor qu\u00e9 no un solo proceso?","text":"<p>Los navegadores web son aplicaciones incre\u00edblemente complicadas. Aparte de su capacidad principal para mostrar contenido web, tienen muchas responsabilidades secundarias, como administrar m\u00faltiples ventanas (o pesta\u00f1as) y cargar extensiones de terceros.</p> <p>Anteriormente, los navegadores sol\u00edan utilizar un \u00fanico proceso para toda esta funcionalidad. Aunque este patr\u00f3n significaba menos sobrecarga para cada pesta\u00f1a abierta, tambi\u00e9n significaba que un sitio web que fallaba o se bloqueaba afectar\u00eda a todo el navegador.</p>"},{"location":"03electron/05_ipc/#el-modelo-multi-proceso","title":"El modelo multi proceso","text":"<p>Para resolver este problema, el equipo de Chromium decidi\u00f3 que cada pesta\u00f1a se mostrar\u00eda en su propio proceso, limitando el da\u00f1o que un c\u00f3digo malicioso o con errores podr\u00eda causar a la aplicaci\u00f3n en su conjunto. Un \u00fanico proceso del navegador controla estos procesos, as\u00ed como el ciclo de vida de la aplicaci\u00f3n en su conjunto. El diagrama de Chrome Comic visualiza este modelo.</p> <p>Las aplicaciones Electron est\u00e1n estructuradas de manera muy similar. El desarrollador controla dos tipos de procesos: principal (main process) y renderizado (renderer process).</p> Arquitectura detallada en Electron"},{"location":"03electron/05_ipc/#el-proceso-principal","title":"El proceso principal","text":"<p>Cada aplicaci\u00f3n de Electron tiene un \u00fanico proceso principal, que act\u00faa como punto de entrada de la aplicaci\u00f3n. El proceso principal se ejecuta en un entorno Node.js, lo que significa que tiene la capacidad de requerir m\u00f3dulos y utilizar todas las API de Node.js.</p>"},{"location":"03electron/05_ipc/#gestion-de-ventanas","title":"Gesti\u00f3n de ventanas","text":"<p>El prop\u00f3sito principal del proceso principal es crear y administrar ventanas de aplicaciones con el m\u00f3dulo <code>BrowserWindow</code>.</p> <p>Cada instancia de la clase <code>BrowserWindow</code> crea una ventana de aplicaci\u00f3n que carga una p\u00e1gina web en un proceso de renderizado independiente. Se puede interactuar con este contenido web desde el proceso principal utilizando el objeto <code>webContents</code> de la ventana.</p> main.js<pre><code>const { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow({ width: 800, height: 1500 })\nwin.loadURL('https://github.com')\n\nconst contents = win.webContents\nconsole.log(contents)\n</code></pre> <p>Nota:</p> <p>Tambi\u00e9n se crea un proceso de renderizado para webs incrustadas como el m\u00f3dulo <code>BrowserView</code>. El objeto <code>webContents</code> tambi\u00e9n es accesible para contenido web incrustado.</p> <p>Debido a que el m\u00f3dulo <code>BrowserWindow</code> es un <code>EventEmitter</code>, tambi\u00e9n puede agregar controladores para varios eventos de usuario (por ejemplo, minimizar o maximizar la ventana).</p> <p>Cuando una instancia de <code>BrowserWindow</code> se destruye, su proceso de renderizado tambi\u00e9n finaliza.</p>"},{"location":"03electron/05_ipc/#ciclo-de-vida-de-la-aplicacion","title":"Ciclo de vida de la aplicaci\u00f3n","text":"<p>El proceso principal tambi\u00e9n controla el ciclo de vida de su aplicaci\u00f3n a trav\u00e9s del m\u00f3dulo <code>app</code> de Electron. Este m\u00f3dulo proporciona un gran conjunto de eventos y m\u00e9todos que se pueden utilizar para agregar un comportamiento personalizado de la aplicaci\u00f3n (por ejemplo, cerrar la aplicaci\u00f3n mediante c\u00f3digo, modificar el dock de la aplicaci\u00f3n o mostrar un panel 'Acerca de').</p> <p>Como ejemplo pr\u00e1ctico, la aplicaci\u00f3n que se muestra en la gu\u00eda de inicio r\u00e1pido utiliza <code>app</code> para crear una experiencia de ventana de aplicaci\u00f3n m\u00e1s nativa.</p> main.js<pre><code>// cerrando la aplicaci\u00f3n cuando no queden ventanas abiertas en plataformas no macOS\napp.on('window-all-closed', () =&gt; {\n  if (process.platform !== 'darwin') app.quit()\n})\n</code></pre>"},{"location":"03electron/05_ipc/#aplicaciones-nativas","title":"Aplicaciones nativas","text":"<p>Para ampliar las funciones de Electron m\u00e1s all\u00e1 de ser un contenedor de Chromium con contenidos web, el proceso principal tambi\u00e9n agrega API personalizadas para interactuar con el sistema operativo del usuario. Electron expone varios m\u00f3dulos que controlan la funcionalidad nativa del escritorio, como men\u00fas, cuadros de di\u00e1logo e \u00edconos de bandeja del sistema.</p> <p>Para obtener una lista completa de los principales m\u00f3dulos de proceso de Electron, se puede consultar la documentaci\u00f3n API.</p>"},{"location":"03electron/05_ipc/#el-proceso-de-renderizado","title":"El proceso de renderizado","text":"<p>Cada aplicaci\u00f3n de Electron genera un proceso de renderizado independiente para cada <code>BrowserWindow</code> (y cada web embebida). Un renderizador es responsable de representar contenido web. A todos los efectos, el c\u00f3digo ejecutado en los procesos de renderizado debe comportarse de acuerdo con los est\u00e1ndares web.</p> <p>Por lo tanto, todas las interfaces de usuario y las funciones de las aplicaciones dentro de una \u00fanica ventana del navegador deben escribirse con las mismas herramientas y paradigmas que utiliza en la web.</p> <p>Lo m\u00ednimo que debe comprender es:</p> <ul> <li>Un archivo HTML es su punto de entrada para el proceso de renderizado.</li> <li>Se puede agregar c\u00f3digo JavaScript para la interactividad.</li> <li>El estilo de la interfaz de usuario se agrega mediante hojas de estilo en cascada (CSS).</li> </ul> <p>Adem\u00e1s, esto tambi\u00e9n significa que el renderizador no tiene acceso directo a <code>require</code> o otras API de Node.js.</p> <p>ATENCI\u00d3N</p> <p>Los procesos de renderizado se pueden generar con un entorno Node.js completo para facilitar el desarrollo. Hist\u00f3ricamente, esta sol\u00eda ser la opci\u00f3n predeterminada, pero esta funci\u00f3n estaba deshabilitada por razones de seguridad.</p> <p>Pero entonces, \u00bfc\u00f3mo las interfaces de usuario del proceso de renderizado pueden interactuar con Node.js y la funcionalidad de escritorio nativa de Electron si solo se puede acceder a estas funciones desde el proceso principal?. De hecho, no existe una forma directa de importar los scripts de contenido de Electron.</p>"},{"location":"03electron/05_ipc/#scripts-de-precarga","title":"Scripts de precarga","text":"<p>Los scripts de precarga contienen c\u00f3digo que se ejecuta en un proceso de renderizado antes de que su contenido web comience a cargarse. Estos scripts se ejecutan dentro del contexto del renderizador, pero se les otorgan m\u00e1s privilegios al tener acceso a las API de Node.js.</p> <p>Se puede adjuntar un script de precarga al proceso principal en el constructor <code>BrowserWindow</code> en la opci\u00f3n <code>webPreferences</code>.</p> main.js<pre><code>const { BrowserWindow } = require('electron')\n// ...\nconst win = new BrowserWindow({\n  webPreferences: {\n    preload: 'path/to/preload.js'\n  }\n})\n// ...\n</code></pre> <p>Debido a que el script de precarga comparte una interfaz <code>Window</code> global con los renderizadores y puede acceder a las API de Node.js, sirve para mejorar su renderizador al exponer API arbitrarias en el <code>window</code> global que luego puede consumir su contenido web.</p> <p>Aunque los scripts de precarga comparten un <code>window</code> global con el renderizador al que est\u00e1n adjuntos, no puede adjuntar directamente ninguna variable desde el script de precarga a <code>window</code> debido al valor predeterminado de <code>contextIsolation</code>.</p> <p>En el siguiente ejemplo, se intenta adjuntar una variable <code>myAPI</code> al <code>window</code> global desde el script de precarga, pero no se puede acceder a ella desde el script de renderizado:</p> preload.js<pre><code>window.myAPI = {\n  desktop: true\n}\n</code></pre> renderer.js<pre><code>console.log(window.myAPI)\n// =&gt; undefined\n</code></pre> <p>El aislamiento de contexto significa que los scripts de precarga est\u00e1n aislados del \u00e1mbito principal del renderizador para evitar la filtraci\u00f3n de API privilegiadas en el c\u00f3digo del contenido web.</p> <p>En su lugar, se utiliza el m\u00f3dulo <code>contextBridge</code> para lograr esto de forma segura:</p> preload.js<pre><code>const { contextBridge } = require('electron')\n\ncontextBridge.exposeInMainWorld('myAPI', {\n  desktop: true\n})\n</code></pre> renderer.js<pre><code>console.log(window.myAPI)\n// =&gt; { desktop: true }\n</code></pre> <p>Esta caracter\u00edstica es incre\u00edblemente \u00fatil para dos prop\u00f3sitos principales:</p> <ul> <li>Al exponer las funciones de <code>ipcRenderer</code> al renderizador, puede utilizar la comunicaci\u00f3n entre procesos (IPC) para activar las tareas principales del proceso desde el renderizador (y viceversa).</li> <li>Si se est\u00e1 desarrollando una aplicaci\u00f3n de Electron para una aplicaci\u00f3n web existente alojada en una URL remota, se pueden agregar propiedades personalizadas al <code>window</code> global del renderizador que se pueden usar para la l\u00f3gica del escritorio en el lado del cliente.</li> </ul>"},{"location":"03electron/05_ipc/#comunicacion-entre-procesos","title":"Comunicaci\u00f3n entre procesos","text":"<p>La comunicaci\u00f3n entre procesos (IPC Inter Process Communication) es una parte clave de la creaci\u00f3n de aplicaciones de escritorio. Debido a que los procesos principal y de renderizado tienen diferentes responsabilidades, IPC es la \u00fanica forma de realizar muchas tareas, como llamar a una API nativa desde su interfaz de usuario o activar cambios en su contenido web desde men\u00fas nativos.</p>"},{"location":"03electron/05_ipc/#canales-ipc","title":"Canales IPC","text":"<p>Los procesos se comunican pasando mensajes a trav\u00e9s de \"canales\" definidos por el desarrollador con los m\u00f3dulos <code>ipcMain</code> y <code>ipcRenderer</code>. Estos canales son arbitrarios (podemos nombrarlos como queramos) y bidireccionales (podemos usar el mismo nombre de canal para ambos m\u00f3dulos).</p> <p>Repasaremos algunos patrones IPC fundamentales con ejemplos concretos que podemos usar como referencia para el c\u00f3digo de una aplicaci\u00f3n.</p>"},{"location":"03electron/05_ipc/#patron-1-renderizador-a-principal-unidireccional","title":"Patr\u00f3n 1: Renderizador a principal (unidireccional)","text":"<p>Para enviar un mensaje IPC unidireccional desde un proceso de renderizador al proceso principal, se puede usar <code>ipcRenderer.send</code> para enviar un mensaje que captura en <code>ipcMain.on</code>.</p> <p>Normalmente se utiliza este patr\u00f3n para activar una acci\u00f3n en el proceso principal, como guardar un archivo o mostrar un cuadro de di\u00e1logo, desde una acci\u00f3n del usuario en el renderizador.</p> <p>Para demostrar este patr\u00f3n, se crea una aplicaci\u00f3n que utiliza IPC para actualizar el t\u00edtulo de la ventana de la aplicaci\u00f3n desde el proceso de renderizado.</p>"},{"location":"03electron/05_ipc/#1-escuchar-eventos-con-ipcmainon","title":"1. Escuchar eventos con <code>ipcMain.on</code>","text":"<p>En el proceso principal, se crea un listener para el evento '<code>set-title</code>' con <code>ipcMain.on</code>:</p> main.js<pre><code>const { app, BrowserWindow, ipcMain } = require('electron')\nconst path = require('node:path')\n\nfunction createWindow () {\n  const mainWindow = new BrowserWindow({\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n\n  mainWindow.loadFile('index.html')\n}\n\nfunction handleSetTitle (event, title) {\n  const webContents = event.sender\n  const win = BrowserWindow.fromWebContents(webContents)\n  win.setTitle(title)\n}\n\napp.whenReady().then(() =&gt; {\n  ipcMain.on('set-title', handleSetTitle)\n  createWindow()\n\n  app.on('activate', function () {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\napp.on('window-all-closed', function () {\n  if (process.platform !== 'darwin') app.quit()\n})\n</code></pre> preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  setTitle: (title) =&gt; ipcRenderer.send('set-title', title)\n})\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"&gt;\n    &lt;title&gt;Set windows title IPC!&lt;/title&gt;\n  &lt;/head&gt;l\n  &lt;body&gt;\n    &lt;label for=\"title\"&gt;Title:&lt;/label&gt;\n    &lt;input type=\"text\" id=\"title\" /&gt;\n    &lt;button id=\"btn\" type=\"button\" onclick=\"setTitle()\"&gt;Set&lt;/button&gt;\n    &lt;script src=\"./renderer.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>La funci\u00f3n <code>handleSetTitle</code> tiene dos par\u00e1metros: un evento con estructura <code>IpcMainEvent</code> y una cadena de texto <code>title</code>. Cada vez que llega un evento <code>set-title</code>, esta funci\u00f3n encontrar\u00e1 la instancia de <code>BrowserWindow</code> adjunta al remitente del mensaje y utilizar\u00e1 <code>win.setTitle</code> en ella.</p>"},{"location":"03electron/05_ipc/#2-exponer-ipcrenderersend-en-el-script-preloadjs","title":"2. Exponer <code>ipcRenderer.send</code> en el script <code>preload.js</code>","text":"<p>Para enviar mensajes al listener creado anteriormente, puede se usa <code>ipcRenderer.send</code>. Debemos elegir qu\u00e9 API exponer desde el script de precarga utilizando <code>contextBridge</code>.</p> <p>El script de precarga, expondr\u00e1 el m\u00e9todo <code>setTitle</code> en proceso de renderizado.</p> preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  setTitle: (title) =&gt; ipcRenderer.send('set-title', title)\n})\n</code></pre> <p>En este punto, el proceso de renderizado puede llamar a <code>window.electronAPI.setTitle</code> para enviar un mensaje IPC al proceso principal.</p>"},{"location":"03electron/05_ipc/#3-crear-el-proceso-de-renderizado-en-la-interfaz-de-usuario","title":"3. Crear el proceso de renderizado en la interfaz de usuario","text":"<p>En el archivo HTML cargado en <code>BrowserWindows</code>, se a\u00f1ade una interface b\u00e1sica consistente en una entrada de texto y un bot\u00f3n.</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;\n    &lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"&gt;\n    &lt;title&gt;Hello IPC!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    Title: &lt;input id=\"title\"/&gt;\n    &lt;button id=\"btn\" type=\"button\"&gt;Set&lt;/button&gt;\n    &lt;script src=\"./renderer.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Para hacer los elementos interactivos, a\u00f1adimos algunas l\u00edneas de c\u00f3digo a <code>renderer.js</code>, que aprovecha la API expuesta por el script de precarga.</p> renderer.js<pre><code>const setButton = document.getElementById('btn')\nconst titleInput = document.getElementById('title')\nsetButton.addEventListener('click', () =&gt; {\n  const title = titleInput.value\n  window.electronAPI.setTitle(title)\n})\n</code></pre> <p>En este punto, se puede ejecutar la aplicaci\u00f3n y probar el bot\u00f3n. Al hacer clic en el bot\u00f3n, se enviar\u00e1 un mensaje IPC al proceso principal, que establecer\u00e1 el t\u00edtulo de la ventana en el valor del campo de entrada.</p>"},{"location":"03electron/05_ipc/#patron-2-renderizador-a-principal-bidireccional","title":"Patr\u00f3n 2: Renderizador a principal (bidireccional)","text":"<p>Para enviar un mensaje IPC bidireccional entre dos procesos, se puede usar <code>ipcMain.handle</code> para crear un listener que devuelva un valor. Luego, se puede usar <code>ipcRenderer.invoke</code> para llamar a la funci\u00f3n y obtener el valor devuelto.</p> <p>Este patr\u00f3n se puede utilizar para obtener informaci\u00f3n del proceso principal, como el nombre de usuario del sistema operativo, desde el proceso principal.</p> <p>Para demostrar este patr\u00f3n, crearemos una aplicaci\u00f3n que utiliza IPC para abrir un cuadro de di\u00e1logo de sistema y devolver el archivo seleccionado al proceso de renderizado.</p>"},{"location":"03electron/05_ipc/#1-crear-un-listener-con-ipcmainhandle","title":"1. Crear un listener con <code>ipcMain.handle</code>","text":"<p>En el proceso principal, se crea la funci\u00f3n <code>handleFileOpen()</code> que llama a <code>dialog.showOpenDialog</code> que muestr\u00e1 un di\u00e1logo y devuelve el primer archivo seleccionado. Esta funci\u00f3n se utiliza como listener cuando un mensaje <code>ipcRenderer.invoke</code> se env\u00eda con el evento <code>dialog:openFile</code> que escucha <code>ipcMain.handle</code>:</p> main.js<pre><code>const { app, BrowserWindow, ipcMain, dialog } = require('electron')\nconst path = require('node:path')\n\nasync function handleFileOpen () {\n  const { canceled, filePaths } = await dialog.showOpenDialog()\n  if (!canceled) {\n    return filePaths[0]\n  }\n}\n\nfunction createWindow () {\n  const mainWindow = new BrowserWindow({\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n  mainWindow.loadFile('index.html')\n}\n\napp.whenReady().then(() =&gt; {\n  ipcMain.handle('dialog:openFile', handleFileOpen)\n  createWindow()\n  app.on('activate', function () {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\napp.on('window-all-closed', function () {\n  if (process.platform !== 'darwin') app.quit()\n})\n</code></pre> <p><code>dialog:</code></p> <p>El prefijo <code>dialog:</code> no tiene efecto en el c\u00f3digo. Se utiliza para mejorar la legibilidad.</p>"},{"location":"03electron/05_ipc/#2-exponer-ipcrendererinvoke-en-el-script-preloadjs","title":"2. Exponer <code>ipcRenderer.invoke</code> en el script <code>preload.js</code>","text":"<p>Para llamar a la funci\u00f3n creada anteriormente, se puede usar <code>ipcRenderer.invoke</code>. Debemos elegir qu\u00e9 API exponer desde el script de precarga utilizando <code>contextBridge</code>.</p> <p>El script de precarga, expondr\u00e1 el m\u00e9todo <code>openFile</code> en proceso de renderizado.</p> preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  openFile: () =&gt; ipcRenderer.invoke('dialog:openFile')\n})\n</code></pre>"},{"location":"03electron/05_ipc/#3-crear-el-proceso-de-renderizado-en-la-interfaz-de-usuario_1","title":"3. Crear el proceso de renderizado en la interfaz de usuario","text":"<p>Finalmente, screamos el HTML a cargar en <code>BrowserWindows</code>, que contiene un bot\u00f3n que, al hacer clic, llamar\u00e1 a <code>window.electronAPI.openFile</code> y mostrar\u00e1 el resultado en un elemento <code>&lt;span&gt;</code>.</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;\n    &lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"&gt;\n    &lt;title&gt;Dialog&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;button type=\"button\" id=\"btn\"&gt;Open a File&lt;/button&gt;\n    File path: &lt;span id=\"filePath\"&gt;&lt;/span&gt;\n    &lt;script src='./renderer.js'&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>La interfaz consiste en un bot\u00f3n que utilizaremos para enviar un mensaje IPC al proceso principal y un elemento <code>&lt;span&gt;</code> que utilizaremos para mostrar el resultado. Para hacer los elementos interactivos, a\u00f1adimos algunas l\u00edneas de c\u00f3digo a <code>renderer.js</code>, que aprovecha la API expuesta por el script de precarga.</p> renderer.js<pre><code>const btn = document.getElementById('btn')\nconst filePathElement = document.getElementById('filePath')\n\nbtn.addEventListener('click', async () =&gt; {\n  const filePath = await window.electronAPI.openFile()\n  filePathElement.innerText = filePath\n})\n</code></pre> <p>En el c\u00f3digo de arriba, se utiliza <code>await</code> para esperar el resultado de <code>window.electronAPI.openFile()</code> y luego se establece el resultado en el elemento <code>&lt;span&gt;</code>.</p>"},{"location":"03electron/05_ipc/#patron-3-principal-a-renderizador","title":"Patr\u00f3n 3: Principal a renderizador","text":"<p>Para enviar un mensaje desde el proceso principal a un proceso de renderizado, necesitamos especificar qu\u00e9 ventana de renderizado recibir\u00e1 el mensaje. Los mensajes se env\u00edan a trav\u00e9s de <code>WebContents</code> que se pueden obtener de <code>BrowserWindow</code>. Esta instancia de <code>WebContents</code> contiene un m\u00e9todo <code>send</code> que puede usarse del mismo modo que <code>ipcRenderer.send</code> en el proceso de renderizado.</p> <p>Para demostrar este patr\u00f3n, crearemos un contador de n\u00fameros controlado por el men\u00fa nativo del sistema operativo.</p>"},{"location":"03electron/05_ipc/#1-enviar-mensajes-con-el-modulo-webcontents","title":"1. Enviar mensajes con el m\u00f3dulo <code>webContents</code>","text":"<p>Para esta demo, necesitamos crear un men\u00fa personalizado en usando el m\u00f3dulo <code>Menu</code> que usa <code>webContents.send</code> para enviar un mensaje IPC desde el proceso principal al proceso renderizador objetivo.</p> main.js<pre><code>const { app, BrowserWindow, Menu, ipcMain } = require('electron')\nconst path = require('node:path')\n\nfunction createWindow () {\n  const mainWindow = new BrowserWindow({\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n\n  const menu = Menu.buildFromTemplate([\n    {\n      label: app.name,\n      submenu: [\n        {\n          click: () =&gt; mainWindow.webContents.send('update-counter', 1),\n          label: 'Increment'\n        },\n        {\n          click: () =&gt; mainWindow.webContents.send('update-counter', -1),\n          label: 'Decrement'\n        }\n      ]\n    }\n  ])\n\n  Menu.setApplicationMenu(menu)\n  mainWindow.loadFile('index.html')\n\n  // Open the DevTools.\n  mainWindow.webContents.openDevTools()\n}\n\napp.whenReady().then(() =&gt; {\n  ipcMain.on('counter-value', (_event, value) =&gt; {\n    console.log(value) // will print value to Node console\n  })\n  createWindow()\n\n  app.on('activate', function () {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\napp.on('window-all-closed', function () {\n  if (process.platform !== 'darwin') app.quit()\n})\n</code></pre>"},{"location":"03electron/05_ipc/#2-exponer-ipcrendereron-en-el-script-preloadjs","title":"2. Exponer <code>ipcRenderer.on</code> en el script <code>preload.js</code>","text":"<p>Como en los ejemplos anteriores, usamos los m\u00f3dulos <code>contextBridge</code> y <code>ipcRenderer</code> para exponer la funcionalidad IPC en el proceso de renderizado.</p> preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  onUpdateCounter: (callback) =&gt; ipcRenderer.on('update-counter', callback)\n})\n</code></pre>"},{"location":"03electron/05_ipc/#3-crear-el-proceso-de-renderizado-en-la-interfaz-de-usuario_2","title":"3. Crear el proceso de renderizado en la interfaz de usuario","text":"<p>Para terminar de unirlo todo, creamos la interfaz HTML que contiene un elemento <code>&lt;span&gt;</code> que se actualizar\u00e1 con el valor del contador.</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;\n    &lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"&gt;\n    &lt;title&gt;Menu Counter&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    Current value: &lt;span id=\"counter\"&gt;0&lt;/span&gt;\n    &lt;script src=\"./renderer.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Finalmente, para hacer que los valores se actualicen en el documento HTML, a\u00f1adimos algunas l\u00edneas de c\u00f3digo a <code>renderer.js</code>, que aprovecha la API expuesta por el script de precarga.</p> renderer.js<pre><code>const counter = document.getElementById('counter')\n\nwindow.electronAPI.onUpdateCounter((_event, value) =&gt; {\n  const oldValue = Number(counter.innerText)\n  const newValue = oldValue + value\n  counter.innerText = newValue.toString()\n})\n</code></pre> <p>En el c\u00f3digo anterior, se utiliza <code>window.electronAPI.onUpdateCounter</code> para registrar un listener para el evento <code>update-counter</code> que actualiza el valor del elemento <code>&lt;span&gt;</code>.</p>"},{"location":"03electron/05_ipc/#patron-4-renderizador-a-renderizador","title":"Patr\u00f3n 4: Renderizador a renderizador","text":"<p>No existe una forma directa para enviar mensajes estre procesos de renderizado. Para conseguirlo tenemos dos opciones:</p> <ul> <li>Usar el proceso principal como intermediario. Esto implica enviar un mensaje desde cada renderer al proceso principal, que reenviar\u00e1 el mensaje al renderer objetivo.</li> <li>Pasar un <code>MessagePort</code> desde el proceso principal a los dos renderers. Esto permite una comunicaci\u00f3n directa entre los procesos renderizadores despu\u00e9s de una configuraci\u00f3n inicial.</li> </ul>"},{"location":"03electron/05_ipc/#serializacion-de-objetos","title":"Serializaci\u00f3n de objetos","text":"<p>La implementaci\u00f3n IPC utiliza el est\u00e1ndar HTML <code>Structured Clone Algorithm</code> para serializar los objetos pasados entre procesos. Esto significa que los objetos que se env\u00edan a trav\u00e9s de IPC deben ser compatibles con este algoritmo.</p> <p>En particular, los objetos DOM (ej. <code>Element</code>, <code>Location</code> y <code>DOMMatrix</code>), objetos Node.js con clases C++ (ej. <code>process.env</code>, miembros de <code>Stream</code>), y objetos Electron con clases C++ (ej. <code>WebContents</code>, <code>BrowserWindow</code> y <code>WebFrame</code>) no son serializables con el algoritmo de clonaci\u00f3n estructurada.</p>"},{"location":"03electron/06_bs_layout/","title":"3.6 Maquetaci\u00f3n en Bootstrap","text":""},{"location":"03electron/06_bs_layout/#objetivos","title":"Objetivos","text":"<p>Maquetar la disposici\u00f3n b\u00e1sica de una interfaz de usuario biblioteca de componentes Bootstrap. Esta biblioteca permite, de forma sencilla, crear una interfaz que se adapte a cualquier pantalla gracias a un dise\u00f1o flexible.</p>"},{"location":"03electron/06_bs_layout/#diseno-adaptable-o-responsivo","title":"Dise\u00f1o adaptable o responsivo","text":"<p>El dise\u00f1o adaptable es una filosof\u00eda de dise\u00f1o y desarrollo cuyo objetivo es adaptar la apariencia de la interfaz de usuario al dispositivo que se est\u00e9 utilizando para visitarlas.</p> <p>Existen multitud de dispositivos como tabletas, tel\u00e9fonos inteligentes, libros electr\u00f3nicos, port\u00e1tiles, PC, etc. Adem\u00e1s, aun dentro de cada tipo, cada dispositivo tiene sus caracter\u00edsticas concretas: tama\u00f1o de pantalla, resoluci\u00f3n, potencia de CPU, sistema operativo o capacidad de memoria entre otras. Esta tecnolog\u00eda pretende que con un \u00fanico dise\u00f1o, todo se vea correctamente en cualquier dispositivo.</p> <p>StatCounter</p> <p>En la web StatCounter se pueden consultar estad\u00edsticas de uso de resoluciones de pantalla de distintos tipos de dispositivos y paises.</p> <p>La imagen se muestra la evoluci\u00f3n de las resoluciones de pantalla de escritorio en Espa\u00f1a el \u00faltimo a\u00f1o hasta octubre de 2024.</p> <p></p> <p>Para informaci\u00f3n actualizada visitar la web oficial:</p> <p>https://gs.statcounter.com/screen-resolution-stats/desktop/spain</p> <p>En el ejemplo se puede ver que el 31,14% utiliza la resoluci\u00f3n <code>1920x1080</code>, por lo tanto es buena idea dise\u00f1ar la interfaz para que se vea correctamente en esta resoluci\u00f3n. Sin embargo, hay que tener en cuenta el resto de resoluciones, por lo que es necesario que la interfaz se adapte a cualquier resoluci\u00f3n.</p>"},{"location":"03electron/06_bs_layout/#puntos-de-ruptura-breakpoints","title":"Puntos de ruptura (Breakpoints)","text":"<p>Los puntos de ruptura (breakpoints) son los tama\u00f1os de pantalla en los que se cambia el dise\u00f1o de la interfaz. En Bootstrap se utilizan los siguientes puntos de ruptura:</p> Breakpoint class infix Tama\u00f1o de pantalla Extra small None &lt;576px Small <code>sm</code> \u2265576px Medium <code>md</code> \u2265768px Large <code>lg</code> \u2265992px Extra large <code>xl</code> \u22651200px Extra extra large <code>xxl</code> \u22651400px <p>Por ejemplo, teniendo en cuenta que Bootstrap utiliza un sistema de rejilla de 12 columnas, si queremos que un elemento ocupe la mitad de la pantalla en pantallas de tama\u00f1o medio, un tercio en pantallas grandes, pero que ocupe toda la pantalla en pantallas de tama\u00f1o peque\u00f1o, utilizaremos las clases <code>col-md-6 col-lg-4 col-sm-12</code>.</p>"},{"location":"03electron/06_bs_layout/#disposicion-de-la-interfaz-de-usuario","title":"Disposici\u00f3n de la interfaz de usuario","text":"<p>Para conseguir una interfaz adaptativa, utilizaremos un dise\u00f1o de rejilla flexible, que se adapta a diferentes tama\u00f1os de pantalla.</p> <p>Bootstrap utiliza un sistema de rejilla que permite crear dise\u00f1os flexibles y adaptables a diferentes tama\u00f1os de pantalla. Para ello, se divide la cada elemento en 12 columnas.</p> <p>Adem\u00e1s, gracias a los puntos de ruptura, podemos definir diferentes tama\u00f1os de pantalla y asignar a cada elemento un n\u00famero de columnas diferente para cada tama\u00f1o.</p>"},{"location":"03electron/06_bs_layout/#elementos-de-maquetacion","title":"Elementos de maquetaci\u00f3n","text":"<p>Bootstrap nos proporciona una serie de elementos de maquetaci\u00f3n que nos permiten crear una interfaz de usuario adaptativa.</p>"},{"location":"03electron/06_bs_layout/#contenedores","title":"Contenedores","text":"<p>Los contenedores son los elementos que se utilizan para crear el dise\u00f1o de rejilla. Existen dos tipos de contenedores:</p> <ul> <li><code>.container</code>: Crea un contenedor con un ancho fijo y centrado en la pantalla. El ancho del contenedor se ajusta autom\u00e1ticamente en funci\u00f3n del punto de ruptura.</li> <li><code>.container-fluid</code>: Ocupa todo el ancho de la pantalla.</li> </ul>"},{"location":"03electron/06_bs_layout/#filas-row","title":"Filas (row)","text":"<p>Las filas se utilizan para agrupar elementos en una misma l\u00ednea. Para crear una fila, utilizaremos el elemento <code>.row</code>.</p>"},{"location":"03electron/06_bs_layout/#columnas-col","title":"Columnas (col)","text":"<p>Las columnas se utilizan para definir el n\u00famero de columnas que ocupa un elemento. Para crear una columna, utilizaremos el elemento <code>.col</code>.</p> <p>Ejemplo:</p> <pre><code>&lt;div class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col\"&gt;col&lt;/div&gt;\n        &lt;div class=\"col\"&gt;col&lt;/div&gt;\n        &lt;div class=\"col\"&gt;col&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> col col col <p>Ejemplo de disposici\u00f3n de columnas</p>"},{"location":"03electron/06_bs_layout/#ancho-de-columnas","title":"Ancho de columnas","text":"<p>A <code>.col</code> podemos asignarle el n\u00famero de columnas que queremos que ocupe en funci\u00f3n del tama\u00f1o de la pantalla.</p> <p>Por ejemplo, si utilizaremos las clases <code>.col-2</code> y <code>.col-7</code> que en total ocupan 9 columnas, quedan 3 libres que podemos asignar a una \u00faltima columna sin especificar su tama\u00f1o, que ocupar\u00e1 el espacio restante.</p> <pre><code>&lt;div class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-2\"&gt;col&lt;/div&gt;\n        &lt;div class=\"col-7\"&gt;col&lt;/div&gt;\n        &lt;div class=\"col\"&gt;col&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> col-2 col-7 col <p>Adem\u00e1s, podemos asignar un n\u00famero de columnas diferente para cada tama\u00f1o de pantalla. Para ello, utilizaremos la clase <code>.col-{tama\u00f1o}-{n\u00famero de columnas}</code>.</p> <p>Siguiendo con el ejemplo anterior, para que se adapte a pantallas de tama\u00f1o medio. Para ello, utilizaremos la clase <code>.col-md-#</code>. Cuando se supere el punto de ruptura m\u00ednimo <code>md</code> (\u2265768px), los elementos se apilar\u00e1n.</p> <pre><code>&lt;div class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-md-2\"&gt;col&lt;/div&gt;\n        &lt;div class=\"col-md-7\"&gt;col&lt;/div&gt;\n        &lt;div class=\"col\"&gt;col&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Renderizado utilizando para pantallas de ancho medio <code>md</code> (\u2265768px):</p> col-sm-2 col-sm-7 col <p>Ejemplo de rendereado al superar el punto de ruptura m\u00ednimo <code>md</code> (&lt;768px):</p> --&gt; col-sm-2 col-sm-7 col &lt;-- <p>Los puntos de ruptura se pueden combinar para definir diferentes tama\u00f1os de pantalla. Por ejemplo, si queremos que un elemento ocupe la mitad de la pantalla en pantallas de tama\u00f1o medio, un tercio en pantallas grandes, pero que ocupe toda la pantalla en pantallas de tama\u00f1o peque\u00f1o, utilizaremos las clases <code>col-sm-12 col-md-6 col-lg-4</code>.</p> <p>Ejemplo responsivo de disposici\u00f3n de columnas</p> <p>Ejemplo b\u00e1sico de maquetaci\u00f3n de una interfaz mediante filas y columnas</p>"},{"location":"03electron/06_bs_layout/#modelo-de-cajas","title":"Modelo de cajas","text":"<p>El modelo de cajas CSS se aplica a cajas que presentan comportamiento en bloque. El modelo define c\u00f3mo funcionan juntas las diferentes partes de una caja (margen, borde, relleno y contenido) para crear una caja. Para complicarlo un poco m\u00e1s, hay un modelo de cajas est\u00e1ndar y un modelo de cajas alternativo.</p>"},{"location":"03electron/06_bs_layout/#partes-de-una-caja","title":"Partes de una caja","text":"<p>Al hacer una caja de tipo bloque en CSS tenemos los elementos siguientes:</p> <ul> <li>El contenido de la caja: El \u00e1rea donde se muestra el contenido, cuyo tama\u00f1o puede cambiarse utilizando propiedades como <code>width</code> y <code>height</code>.</li> <li>El relleno de la caja (padding): El relleno es espacio en blanco alrededor del contenido; es posible controlar su tama\u00f1o usando la propiedad <code>padding</code>.</li> <li>El borde de la caja (border): El borde de la caja envuelve el contenido y el de relleno. Es posible controlar su tama\u00f1o y estilo utilizando la propiedad <code>border</code>.</li> <li>El margen de la caja ( margin): El margen es la capa m\u00e1s externa. Envuelve el contenido, el relleno y el borde como espacio en blanco entre la caja y otros elementos. Es posible controlar su tama\u00f1o usando la propiedad <code>margin</code>.</li> </ul> <p></p> <p>En el modelo de cajas est\u00e1ndar, (<code>box-sizing: content-box;</code>) que utilizan por defecto todos los navegadores, el ancho y alto de la caja se calculan incluyendo el tama\u00f1o del relleno y el borde. Lo que supone algunos problemas a la hora de dise\u00f1ar una interfaz de usuario.</p> <p>Bootstrap utiliza el modelo de cajas alternativo (<code>box-sizing: border-box</code>), donde el ancho y alto de la caja se calculan incluye los tama\u00f1os del borde y el relleno.</p>"},{"location":"03electron/06_bs_layout/#margen-y-relleno-en-bootstrap","title":"Margen y relleno en Bootstrap","text":"<p>Para a\u00f1adir margen y relleno a los elementos, se utilizan las clases <code>.m-{tama\u00f1o}</code> y <code>.p-{tama\u00f1o}</code> respectivamente, donde <code>{tama\u00f1o}</code> puede ser:</p> <ul> <li><code>0</code>: Sin margen o relleno (0px).</li> <li><code>1</code>: 0.25rem (4px)</li> <li><code>2</code>: 0.5rem (8px)</li> <li><code>3</code>: 1rem (16px) valor por defecto.</li> <li><code>4</code>: 1.5rem (24px)</li> <li><code>5</code>: 3rem (48px)</li> <li><code>auto</code>: Margen o relleno autom\u00e1tico.</li> <li><code>x</code>: Margen o relleno horizontal.</li> <li><code>y</code>: Margen o relleno vertical.</li> <li><code>t</code>: (top) Margen o relleno superior.</li> <li><code>b</code>: (bottom) Margen o relleno inferior.</li> <li><code>s</code>: (start) Margen o relleno al inicio. Izquierda en lenguajes de escritura de izquierda a derecha LTR (left-to-right) y derecha en lenguajes de escritura de derecha a izquierda RTL (right-to-left)</li> <li><code>e</code>: (end) Margen o relleno derecho. Derecha en lenguajes de escritura de izquierda a derecha LTR (left-to-right) e izquierda en lenguajes de escritura de derecha a izquierda RTL (right-to-left)</li> </ul>"},{"location":"03electron/06_bs_layout/#bordes-en-bootstrap","title":"Bordes en Bootstrap","text":"<p>Para a\u00f1adir bordes a los elementos, se utilizan las clases <code>.border</code>, <code>.border-{tama\u00f1o}</code> y <code>.border-{lado}-{tama\u00f1o}</code> respectivamente, donde <code>{tama\u00f1o}</code> puede ser:</p> border-0 border-1 border-2 border-3 border-4 border-5 <p>Y <code>{lado}</code> puede ser:</p> border-top border-bottom border-start border-end <p>Tambi\u00e9n podemos aplicar colores con las siguientes clases:</p> border-primary border-primary-subtle border-secondary border-secondary-subtle border-success border-success-subtle border-danger border-danger-subtle border-warning border-warning-subtle border-info border-info-subtle border-light border-light-subtle border-dark border-dark-subtle border-black border-white <p>Adem\u00e1s, podemos aplicar efectos de borde con las siguientes clases:</p> rounded rounded-0 rounded-1 rounded-2 rounded-3 rounded-4 rounded-5 rounded-circle rounded-pill rounded-top rounded-bottom rounded-start rounded-end <p>Tambi\u00e9n podemos aplicar opacidad con las siguiente clases:</p> border-opacity-25 border-opacity-50 border-opacity-75 border-opacity-100"},{"location":"03electron/06_bs_layout/#visibilidad-display","title":"Visibilidad (display)","text":"<p>La propiedad <code>display</code> se utiliza para cambiar el comportamiento de visualizaci\u00f3n de un elemento. Por defecto, los elementos se muestran como elementos en bloque. Sin embargo, existen otros valores que permiten cambiar el comportamiento de visualizaci\u00f3n de los elementos.</p> <p>En Bootstrap se utilizan las clases <code>.d-{valor}</code> y <code>.d-{valor}-{tama\u00f1o}</code> respectivamente, donde <code>{valor}</code> puede ser:</p> <ul> <li><code>none</code>: El elemento no se muestra, ni ocupa espacio en la vista. No confundir con <code>visibility: hidden;</code> que oculta el elemento pero sigue ocupando espacio vac\u00edo en la vista.</li> <li><code>block</code>: El elemento ocupa todo el espacio disponible, el siguiente elemento a se situar\u00e1 por debajo. Los <code>&lt;h1&gt;</code> a <code>&lt;h6&gt;</code> y <code>&lt;p&gt;</code>, entre otros, tienen este comportamiento.</li> <li><code>inline</code>: El elemento ocupa el espacio que ocupe el contenido, el siguiente elemento se situa a continuaci\u00f3n. Los elementos <code>&lt;span&gt;</code> son un buen ejemplo.</li> <li><code>inline-block</code>:  Se comporta como un elemento <code>inline</code>, pero permite cambiar el ancho y el alto.</li> <li><code>grid</code>: El elemento se comporta como un contenedor de cuadr\u00edcula.</li> <li><code>flex</code>: El elemento se comporta como un contenedor flexible. Ver apartado Modelo de cajas flexibles (Flexbox).</li> </ul> <p>Por ejemplo, para ocultar un elemento en pantallas m\u00e1s peque\u00f1as, pero que se muestre en tama\u00f1os medianos o superiores podemos establecer las siguientes clases <code>.d-none .d-md-block</code>. Por lo general, al ocultar el elemento, se activa una opci\u00f3n para acceder a los elementos en una vista separada, normalmente un men\u00fa desplegable. Muy utilizado en dise\u00f1o responsive para dispositivos m\u00f3viles.</p> Este elemento se muestra en pantallas medianas o superiores. <p>Contenido principal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </p> <p>\ud83d\udd3b Men\u00fa</p> <p>Contenido principal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</p>"},{"location":"03electron/06_bs_layout/#modelo-de-cajas-flexibles-flexbox","title":"Modelo de cajas flexibles (Flexbox)","text":"<p>El dise\u00f1o de Caja Flexible (o Flexbox),\u200b es un modelo de dise\u00f1o CSS3. La disposici\u00f3n de flexbox permite que los elementos adaptables dentro de un contenedor se organicen autom\u00e1ticamente dependiendo del tama\u00f1o de la pantalla o del dispositivo.</p> <p>Para designar un contenedor como un contenedor flexible, en Bootstrap se utiliza la clase <code>.d-flex</code> para aplicar la propiedad <code>display: flex;</code> y <code>.d-inline-flex</code> para aplicar la propiedad <code>display: inline-flex;</code>.</p> <p>Ejemplo de contenedor flexible con tres elementos:</p> <pre><code>&lt;div class=\"d-flex\"&gt;\n    &lt;p&gt;Item 1&lt;/p&gt;\n    &lt;p&gt;Item 2&lt;/p&gt;\n    &lt;p&gt;Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Item 1</p> <p>Item 2</p> <p>Item 3</p> <p>Ejemplo de contenedor flexible en l\u00ednea con tres elementos:</p> <pre><code>&lt;div class=\"d-flex-inline\"&gt;\n    &lt;p&gt;Item 1&lt;/p&gt;\n    &lt;p&gt;Item 2&lt;/p&gt;\n    &lt;p&gt;Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Item 1</p> <p>Item 2</p> <p>Item 3</p> <p>Podemos aplicar puntos de ruptura a los contenedores flexibles para que se adapten a diferentes tama\u00f1os de pantalla. Para ello, utilizaremos las clases <code>.flex-{tama\u00f1o}</code> y <code>.inline-flex-{tama\u00f1o}</code> respectivamente. Tal como hemos visto en el apartado Puntos de ruptura (Breakpoints).</p>"},{"location":"03electron/06_bs_layout/#direccion-de-los-elementos","title":"Direcci\u00f3n de los elementos","text":"<p>Por defecto, los elementos se colocan en una fila, de izquierda a derecha. Para cambiar la direcci\u00f3n de los elementos, utilizaremos la clase <code>.flex-{direcci\u00f3n}</code> donde <code>{direcci\u00f3n}</code> puede ser:</p> <ul> <li><code>row</code>: (por defecto) Los elementos se colocan en una fila, de izquierda a derecha.</li> <li><code>row-reverse</code>: Los elementos se colocan en una fila, de derecha a izquierda.</li> <li><code>column</code>: Los elementos se colocan en una columna, de arriba a abajo.</li> <li><code>column-reverse</code>: Los elementos se colocan en una columna, de abajo a arriba.</li> </ul> <p>Ejemplo de contenedor flexible con tres elementos en una fila y en una fila inversa:</p> <pre><code>&lt;div class=\"d-flex flex-row\"&gt;\n    &lt;p class=\"bg-info\"&gt;Item 1&lt;/p&gt;\n    &lt;p&gt;Item 2&lt;/p&gt;\n    &lt;p&gt;Item 3&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"d-flex flex-row-reverse\"&gt;\n    &lt;p class=\"bg-info\"&gt;Item 1&lt;/p&gt;\n    &lt;p&gt;Item 2&lt;/p&gt;\n    &lt;p&gt;Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Item 1</p> <p>Item 2</p> <p>Item 3</p> <p>Item 1</p> <p>Item 2</p> <p>Item 3</p> <p>Ejemplo de contenedor flexible con tres elementos en una columna y en una columna inversa:</p> <pre><code>&lt;div class=\"d-flex flex-column\"&gt;\n    &lt;p class=\"bg-info\"&gt;Item 1&lt;/p&gt;\n    &lt;p&gt;Item 2&lt;/p&gt;\n    &lt;p&gt;Item 3&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"d-flex flex-column-reverse\"&gt;\n    &lt;p class=\"bg-info\"&gt;Item 1&lt;/p&gt;\n    &lt;p&gt;Item 2&lt;/p&gt;\n    &lt;p&gt;Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Item 1</p> <p>Item 2</p> <p>Item 3</p> <p>Item 1</p> <p>Item 2</p> <p>Item 3</p> <p>Tambi\u00e9n podemos cambiar la direcci\u00f3n de los elementos en funci\u00f3n del tama\u00f1o de la pantalla. Para ello, utilizaremos las clases <code>.flex-{tama\u00f1o}-{direcci\u00f3n}</code>. Tal como hemos visto en el apartado Puntos de ruptura (Breakpoints).</p>"},{"location":"03electron/06_bs_layout/#justificar-la-posicion-de-los-elementos","title":"Justificar la posici\u00f3n de los elementos","text":"<p>Para justificar la alineaci\u00f3n de los elementos, utilizaremos la clase <code>.justify-content-{alineaci\u00f3n}</code>.</p> <p>Ejemplo de contenedor flexible con tres elementos justificados a la izquierda, a la derecha, centrados, distribuidos y distribuidos equitativamente:</p> <p><code>justify-content-start</code>:</p> <p>Item 1</p> <p>Item 2</p> <p>Item 3</p> <p><code>justify-content-end</code>:</p> <p>Item 1</p> <p>Item 2</p> <p>Item 3</p> <p><code>justify-content-center</code>:</p> <p>Item 1</p> <p>Item 2</p> <p>Item 3</p> <p><code>justify-content-between</code>:</p> <p>Item 1</p> <p>Item 2</p> <p>Item 3</p> <p><code>justify-content-around</code>:</p> <p>Item 1</p> <p>Item 2</p> <p>Item 3</p> <p><code>justify-content-evenly</code>:</p> <p>Item 1</p> <p>Item 2</p> <p>Item 3</p> <p>Podemos cambiar la justificaci\u00f3n de los elementos en funci\u00f3n del tama\u00f1o de la pantalla. Para ello, utilizaremos las clases <code>.justify-content-{tama\u00f1o}-{alineaci\u00f3n}</code>. Tal como hemos visto en el apartado Puntos de ruptura (Breakpoints).</p>"},{"location":"03electron/06_bs_layout/#alineacion-de-elementos","title":"Alineaci\u00f3n de elementosItem 3Item 3Item 3Item 3Item 3","text":"<p>Para alinear los elementos, utilizaremos la clase <code>.align-items-{alineaci\u00f3n}</code>.</p> <p>Ejemplo de contenedor flexible con tres elementos alineados arriba, abajo, centrados, estirados y en la l\u00ednea base de la tipograf\u00eda (se ha cambiado el tama\u00f1o del texto de los elementos para que se pueda apreciar mejor la alineaci\u00f3n):</p> <ul> <li>Arriba <code>align-items-start</code>:</li> </ul> Item 1 Item 2 <ul> <li>Abajo <code>align-items-end</code>:</li> </ul> Item 1 Item 2 <ul> <li>Centro <code>align-items-center</code>:</li> </ul> Item 1 Item 2 <ul> <li>Estirado <code>align-items-stretch</code>:</li> </ul> Item 1 Item 2 <ul> <li>L\u00ednea base del texto <code>align-items-baseline</code>:</li> </ul> Item 1 Item 2 <p>Podemos cambiar la alineaci\u00f3n de los elementos en funci\u00f3n del tama\u00f1o de la pantalla. Para ello, utilizaremos las clases <code>.align-items-{tama\u00f1o}-{alineaci\u00f3n}</code>. Tal como hemos visto en el apartado Puntos de ruptura (Breakpoints).</p>"},{"location":"03electron/06_bs_layout/#alineamiento-individual-de-elementos","title":"Alineamiento individual de elementosItem 3Item 3Item 3Item 3Item 4","text":"<p>Para alinear individualmente los elementos, utilizaremos la clase <code>.align-self-{alineaci\u00f3n}</code>.</p> <p>Ejemplo de contenedor flexible con tres elementos alineados arriba, abajo, centrados, estirados y en la l\u00ednea base de la tipograf\u00eda:</p> <ul> <li>Arriba <code>align-self-start</code>:</li> </ul> Item 1 <p>Item 2 (align-self-start)</p> <ul> <li>Abajo <code>align-self-end</code>:</li> </ul> Item 1 <p>Item 2 (align-self-end)</p> <ul> <li>Centro <code>align-self-center</code>:</li> </ul> Item 1 <p>Item 2 (align-self-center)</p> <ul> <li>Estirado <code>align-self-stretch</code>:</li> </ul> Item 1 <p>Item 2 (align-self-stretch)</p> <ul> <li>L\u00ednea base del texto <code>align-self-baseline</code> (en el ejemplo, los elementos 1 y 4 se encuentran estirados e ignoran la alineaci\u00f3n a la l\u00ednea base del texto):</li> </ul> Item 1 <p>Item 2 (align-self-baseline)</p> Item 3 (align-self-baseline) <p>Podemos cambiar la alineaci\u00f3n de los elementos en funci\u00f3n del tama\u00f1o de la pantalla. Para ello, utilizaremos las clases <code>.align-self-{tama\u00f1o}-{alineaci\u00f3n}</code>. Tal como hemos visto en el apartado Puntos de ruptura (Breakpoints).</p>"},{"location":"03electron/06_bs_layout/#relleno","title":"Relleno","text":"<p>La clase <code>.flex-fill</code> en una serie de elementos hermanos, fuerza a tener tama\u00f1os iguales a su contenido mientras ocupa todo el espacio disponible de forma equitativa.</p> <p>Ejemplo de contenedor flexible con tres elementos con la clase <code>.flex-fill</code>, se puede observar que los elementos en los que se ha definido la clase (1 y 3) ocupan todo el espacio disponible de forma equitativa y el elemento 2 solo ocupa el espacio que necesita:</p> <pre><code>&lt;div class=\"d-flex\"&gt;\n    &lt;p class=\"flex-fill\"&gt;Item 1 (con mayor contenido)&lt;/p&gt;\n    &lt;p&gt;Item 2&lt;/p&gt;\n    &lt;p class=\"flex-fill\"&gt;Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Item 1 (con mayor contenido)</p> <p>Item 2</p> <p>Item 3</p>"},{"location":"03electron/06_bs_layout/#crecimiento-y-encogimiento-grow-and-shrink","title":"Crecimiento y encogimiento (grow and shrink)","text":"<p>La clase <code>.flex-grow-{n\u00famero}</code> en una serie de elementos hermanos, fuerza a que los elementos crezcan en funci\u00f3n del n\u00famero que se le asigne. Por defecto, todos los elementos tienen un valor de 0, por lo que no crecen. Si se asigna un valor de 1, todos los elementos crecer\u00e1n por igual. Si se asigna un valor de 2, los elementos crecer\u00e1n el doble que los elementos con valor 1.</p> <p>Ejemplo de crecimiento de un elemento con la clase <code>.flex-grow-1</code>:</p> <pre><code>&lt;div class=\"d-flex\"&gt;\n  &lt;p class=\"flex-grow-1\"&gt;Item 1&lt;/p&gt;\n  &lt;p&gt;Item 2&lt;/p&gt;\n  &lt;p&gt;Item 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Item 1 (flex-grow-1)</p> <p>Item 2</p> <p>Item 3</p> <p>La clase <code>.flex-shrink-{n\u00famero}</code> en una serie de elementos hermanos, fuerza a que los elementos se encojan en funci\u00f3n del n\u00famero que se le asigne. Por defecto, todos los elementos tienen un valor de 1, por lo que se encogen por igual. Si se asigna un valor de 2, los elementos se encoger\u00e1n el doble que los elementos con valor 1.</p> <p>Ejemplo de encogimiento de un elemento con la clase <code>.flex-shrink-1</code>. Para forzar el encogimiento de un elemento, se establece un ancho del 100% (<code>w-100</code>) al elemento 2, se puede observar como el contenido del elemento 1 hace fuerza un salto de l\u00ednea:</p> <pre><code>&lt;div class=\"d-flex\"&gt;\n  &lt;p class=\"flex-shrink-1\"&gt;Item 1 (flex-shrink-1)&lt;/p&gt;\n  &lt;p class=\"w-100\"&gt;Item 2&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Item 1 (flex-shrink-1)</p> <p>Item 2</p>"},{"location":"03electron/06_bs_layout/#envoltura-wrap","title":"Envoltura (wrap)","text":"<p>La clase <code>.flex-wrap</code> en un contenedor flexible, fuerza a que los elementos se envuelvan en funci\u00f3n del tama\u00f1o del contenedor.</p> <p>Ejemplo sin aplicar envoltura de elementos:</p> <pre><code>&lt;div class=\"d-flex flex-wrap\"&gt;\n    &lt;p&gt;Item 1&lt;/p&gt;\n    &lt;p&gt;Item 2&lt;/p&gt;\n    &lt;p&gt;Item 3&lt;/p&gt;\n    ...\n    &lt;p&gt;Item 10&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Item 1</p> <p>Item 2</p> <p>Item 3</p> <p>Item 4</p> <p>Item 5</p> <p>Item 6</p> <p>Item 7</p> <p>Item 8</p> <p>Item 9</p> <p>Item 10</p> <p>Ejemplo aplicando envoltura de elementos con la clase <code>.flex-wrap</code>:</p> <pre><code>&lt;div class=\"d-flex flex-wrap\"&gt;\n    &lt;p&gt;Item 1&lt;/p&gt;\n    &lt;p&gt;Item 2&lt;/p&gt;\n    &lt;p&gt;Item 3&lt;/p&gt;\n    ...\n    &lt;p&gt;Item 10&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Item 1</p> <p>Item 2</p> <p>Item 3</p> <p>Item 4</p> <p>Item 5</p> <p>Item 6</p> <p>Item 7</p> <p>Item 8</p> <p>Item 9</p> <p>Item 10</p>"},{"location":"03electron/06_bs_layout/#orden-de-los-elementos","title":"Orden de los elementos","text":"<p>La clase <code>.order-{n\u00famero}</code> en un elemento flexible, fuerza a que el elemento se ordene en funci\u00f3n del n\u00famero que se le asigne. Por defecto, todos los elementos tienen un valor de 0, por lo que se ordenan en el orden en el que se encuentran en el c\u00f3digo HTML. Si se asigna un valor de 1, el elemento se ordenar\u00e1 en primer lugar. Si se asigna un valor de 2, el elemento se ordenar\u00e1 en segundo lugar, y as\u00ed sucesivamente.</p> <pre><code>&lt;div class=\"d-flex\"&gt;\n  &lt;div class=\"order-3\"&gt;Item 1 (order-3)&lt;/div&gt;\n  &lt;div class=\"order-1\"&gt;Item 2 (order-1)&lt;/div&gt;\n  &lt;div class=\"order-2\"&gt;Item 3 (order-2)&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> Item 1 (order-3) Item 2 (order-1) Item 3 (order-2) <p>Ejemplo b\u00e1sico de maquetaci\u00f3n de una interfaz mediante flexbox</p>"},{"location":"03electron/06_bs_layout/#agregar-bootstrap-a-un-proyecto-electron","title":"Agregar Bootstrap a un proyecto Electron","text":"<p>Para agregar Bootstrap a un proyecto Electron, podemos importar el m\u00f3dulo mediante el gestor de paquetes npm. Para ello, abrimos una terminal en la carpeta ra\u00edz del proyecto y ejecutamos el siguiente comando:</p> <pre><code>npm i bootstrap\n</code></pre> <p>Una vez instalado, podemos importar Bootstrap en el archivo HTML principal del proyecto. Por ejemplo, en el archivo <code>index.html</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\" data-bs-theme=\"dark\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'; img-src 'self' data:\"&gt;\n\n    &lt;title&gt;Electron Bootstrap&lt;/title&gt;\n\n    &lt;link rel=\"stylesheet\" href=\"./node_modules/bootstrap/dist/css/bootstrap.min.css\"&gt;\n\n    &lt;script defer src=\"./node_modules/bootstrap/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- Contenido de la aplicaci\u00f3n --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Se debe tener en cuenta la ruta donde tengamos el archivo <code>html</code> y la carpeta <code>node_modules</code> en la que se instala Bootstrap. En el ejemplo, se ha supuesto que el archivo <code>index.html</code> se encuentra en la ra\u00edz del proyecto y la carpeta <code>node_modules</code> tambi\u00e9n, por lo que utiliza la ruta relativa <code>./node_modules/bootstrap/dist/css/bootstrap.min.css</code>.</p>"},{"location":"03electron/06_bs_layout/#bootstrap-icons","title":"Bootstrap Icons","text":"<p>Otro paquete interesante es Bootstrap Icons, que proporciona una colecci\u00f3n de iconos SVG personalizables. Para instalarlo, ejecutamos el siguiente comando en la terminal:</p> <pre><code>npm i bootstrap-icons\n</code></pre> <p>Lo deberemos incluir en el archivo HTML principal del proyecto, por ejemplo, en el archivo <code>index.html</code> de la misma forma que hemos hecho con Bootstrap.</p> <p>Para m\u00e1s informaci\u00f3n sobre Bootstrap Icons, puedes consultar la documentaci\u00f3n oficial.</p>"},{"location":"03electron/06_bs_layout/#referencias","title":"Referencias","text":"<ul> <li>Bootstrap 5</li> <li>Bootstrap 5 Cheat Sheet</li> <li>MDN - Modelo de cajas</li> </ul>"},{"location":"03electron/07_bs_elements/","title":"3.7 Elemento b\u00e1sicos de Bootstrap","text":""},{"location":"03electron/07_bs_elements/#introduccion","title":"Introducci\u00f3n","text":"<p>En el apartado anterior hemos visto la maquetaci\u00f3n b\u00e1sica de la interfaz. En esta unidad vamos a ver los componentes b\u00e1sicos para crear interfaces de usuario con Bootstrap.</p>"},{"location":"03electron/07_bs_elements/#texto","title":"Texto","text":"<p>El texto es el elemento m\u00e1s com\u00fan a la hora de presentar informaci\u00f3n en la interfaz.</p> <p>Componentes:</p> <ul> <li><code>&lt;p&gt;</code>: P\u00e1rrafo</li> <li><code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, <code>&lt;h4&gt;</code>, <code>&lt;h5&gt;</code>, <code>&lt;h6&gt;</code>: T\u00edtulos</li> <li><code>&lt;span&gt;</code>: Texto en l\u00ednea</li> </ul> <p>Ejemplo:</p> <pre><code>&lt;h2&gt;Esto es un t\u00edtulo&lt;/h2&gt;\n&lt;p&gt;Esto es un p\u00e1rrafo que contiene un &lt;span class=\"text-info\"&gt;texto en l\u00ednea&lt;/span&gt; con el color cambiado.&lt;/p&gt;\n</code></pre> <p>Resultado:</p> Esto es un t\u00edtulo <p>Esto es un p\u00e1rrafo que contiene un texto en l\u00ednea con el color cambiado.</p> <p>Elementos de bloque y en l\u00ednea</p> <p>Los p\u00e1rrafos y t\u00edtulos son elementos de bloque, es decir, ocupan todo el ancho disponible. El texto en l\u00ednea se muestra en la misma l\u00ednea que el texto anterior y posterior.</p> <p>Aunque este comportamiento se puede modificar con CSS.</p>"},{"location":"03electron/07_bs_elements/#imagenes","title":"Im\u00e1genes","text":"<p>Las im\u00e1genes se insertan con la etiqueta <code>&lt;img&gt;</code>. Esta etiqueta no tiene contenido, solo atributos.</p> <p>Ejemplo:</p> <pre><code>&lt;img src=\"https://via.placeholder.com/150\" alt=\"imagen de ejemplo\"&gt;\n</code></pre> <p>Resultado:</p>"},{"location":"03electron/07_bs_elements/#listas","title":"Listas","text":"<p>Las listas se crean con las etiquetas <code>&lt;ul&gt;</code> y <code>&lt;ol&gt;</code> para listas no ordenadas y ordenadas respectivamente. Cada elemento de la lista se crea con la etiqueta <code>&lt;li&gt;</code>.</p> <p>Ejemplo:</p> <pre><code>&lt;ul&gt;\n    &lt;li&gt;Elemento 1&lt;/li&gt;\n    &lt;li&gt;Elemento 2&lt;/li&gt;\n    &lt;li&gt;Elemento 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ol&gt;\n    &lt;li&gt;Elemento 1&lt;/li&gt;\n    &lt;li&gt;Elemento 2&lt;/li&gt;\n    &lt;li&gt;Elemento 3&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <p>Resultado:</p> <ul> <li>Elemento 1</li> <li>Elemento 2</li> <li>Elemento 3</li> </ul> <ol> <li>Elemento 1</li> <li>Elemento 2</li> <li>Elemento 3</li> </ol>"},{"location":"03electron/07_bs_elements/#tablas","title":"Tablas","text":"<p>Las tablas se crean con la etiqueta <code>&lt;table&gt;</code>. Cada fila de la tabla se crea con la etiqueta <code>&lt;tr&gt;</code> y cada celda con la etiqueta <code>&lt;td&gt;</code>. Para crear una cabecera de tabla se utiliza la etiqueta <code>&lt;th&gt;</code>.</p> <p>Ejemplo:</p> <pre><code>&lt;table class=\"table table-striped\"&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th scope=\"col\"&gt;Nombre&lt;/th&gt;\n            &lt;th scope=\"col\"&gt;Apellidos&lt;/th&gt;\n            &lt;th scope=\"col\"&gt;Edad&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Nombre 1&lt;/td&gt;\n            &lt;td&gt;Apellidos 1&lt;/td&gt;\n            &lt;td&gt;Edad 1&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Nombre 2&lt;/td&gt;\n            &lt;td&gt;Apellidos 2&lt;/td&gt;\n            &lt;td&gt;Edad 2&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Nombre 3&lt;/td&gt;\n            &lt;td&gt;Apellidos 3&lt;/td&gt;\n            &lt;td&gt;Edad 3&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <p>Resultado:</p> Nombre Apellidos Edad Nombre 1 Apellidos 1 Edad 1 Nombre 2 Apellidos 2 Edad 2 Nombre 3 Apellidos 3 Edad 3"},{"location":"03electron/07_bs_elements/#etiquetas","title":"Etiquetas","text":"<p>Las etiquetas son elementos que permiten resaltar texto. Se crean con la etiqueta <code>&lt;mark&gt;</code>.</p> <p>Ejemplo:</p> <pre><code>&lt;p&gt;Ejemplo de texto con una &lt;span class=\"badge bg-secondary\"&gt;etiqueta&lt;/span&gt;&lt;/p&gt;\n\n&lt;button type=\"button\" class=\"btn btn-primary\"&gt;\n  Mensajes &lt;span class=\"badge text-bg-secondary\"&gt;4&lt;/span&gt;\n&lt;/button&gt;\n\n&lt;button type=\"button\" class=\"btn btn-primary position-relative\"&gt;\n  Inbox\n  &lt;span class=\"position-absolute top-100 start-100 translate-middle badge rounded-pill bg-danger\"&gt;\n    99+\n    &lt;span class=\"visually-hidden\"&gt;unread messages&lt;/span&gt;\n  &lt;/span&gt;\n&lt;/button&gt;\n</code></pre> <p>Resultado:</p> <p>Ejemplo de texto con una etiqueta</p>    Mensajes 4    Inbox        99+     unread messages"},{"location":"03electron/07_bs_elements/#botones","title":"Botones","text":"<p>Los botones son elementos b\u00e1sicos que permiten al usuario interactuar con la aplicaci\u00f3n.</p> <p>Se crean con la etiqueta <code>&lt;button&gt;</code> </p> <p>Ejemplo:</p> <pre><code>&lt;button class=\"btn btn-primary\"&gt;primario&lt;/button&gt;\n&lt;button class=\"btn btn-secondary\"&gt;secundario&lt;/button&gt;\n&lt;button class=\"btn btn-success\"&gt;\u00e9xito&lt;/button&gt;\n&lt;button class=\"btn btn-danger\"&gt;peligro&lt;/button&gt;\n&lt;button class=\"btn btn-warning\"&gt;advertencia&lt;/button&gt;\n&lt;button class=\"btn btn-info\"&gt;informaci\u00f3n&lt;/button&gt;\n&lt;button class=\"btn btn-light\"&gt;claro&lt;/button&gt;\n&lt;button class=\"btn btn-dark\"&gt;oscuro&lt;/button&gt;\n&lt;button class=\"btn btn-link\"&gt;enlace&lt;/button&gt;\n</code></pre> <p>Resultado:</p> primario secundario \u00e9xito peligro advertencia informaci\u00f3n claro oscuro enlace <p>Para dar interacci\u00f3n a los botones debemos asociarles un evento. Esto se puede hacer con m\u00e9todo <code>addEventListener()</code>.</p> <p>Ejemplo:</p> <pre><code>&lt;button id=\"boton\" class=\"btn btn-primary\"&gt;primario&lt;/button&gt;\n</code></pre> <pre><code>const button = document.getElementById('boton');\nbutton.addEventListener('click', () =&gt; {\n    console.log('click');\n});\n</code></pre>"},{"location":"03electron/07_bs_elements/#entrada-de-texto","title":"Entrada de texto","text":"<p>La etiqueta <code>&lt;input&gt;</code> permite al usuario introducir texto en la aplicaci\u00f3n, suele ir acompa\u00f1ada de una etiqueta <code>&lt;label&gt;</code> que indica el prop\u00f3sito del campo.</p> <p>Ejemplo:</p> <pre><code>&lt;label for=\"user\" class=\"col-form-label\"&gt;Usuario:&lt;/label&gt;\n&lt;input type=\"text\" class=\"form-control\" id=\"user\" value=\"usuario1\"&gt;\n&lt;label for=\"password\" class=\"col-form-label\"&gt;Contrase\u00f1a:&lt;/label&gt;\n&lt;input type=\"password\" class=\"form-control\" id=\"password\" value=\"no visible\"&gt;\n&lt;label for=\"email\" class=\"col-form-label\"&gt;Email:&lt;/label&gt;\n&lt;input type=\"email\" class=\"form-control\" id=\"email\" value=\"usuario1@domain.com\"&gt;\n</code></pre> Usuario: Contrase\u00f1a: Email: <p>Una pr\u00e1ctica muy com\u00fan es el uso de etiquetas flotantes para indicar el prop\u00f3sito del campo. Esto se puede conseguir con la clase <code>form-floating</code> y el atributo <code>placeholder</code>.</p> <p>Ejemplo:</p> <pre><code>&lt;div class=\"form-floating\"&gt;\n  &lt;input type=\"email\" class=\"form-control\" id=\"username\" placeholder=\"username\" value=\"usuario1\"&gt;\n  &lt;label for=\"username\"&gt;Usuario:&lt;/label&gt;\n&lt;/div&gt;\n&lt;div class=\"form-floating\"&gt;\n  &lt;input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Password\"&gt;\n  &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\n&lt;/div&gt;\n&lt;div class=\"form-floating\"&gt;\n  &lt;input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email\"&gt;\n  &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n&lt;/div&gt;\n</code></pre> Usuario: Password: Email: <p>Para leer o establecer el valor de un campo de texto se utiliza la propiedad <code>value</code>.</p> <pre><code>const user = document.getElementById('user');\nlet usuario = user.value;\nuser.value = 'nuevo nombre de usuario'\n</code></pre>"},{"location":"03electron/07_bs_elements/#areas-de-texto","title":"\u00c1reas de texto","text":"<p>Las \u00e1reas de texto son similares a los campos de texto, pero permiten introducir texto en varias l\u00edneas. Cuando el texto no cabe en el \u00e1rea, se muestra una barra de desplazamiento vertical.</p> <p>Ejemplo:</p> <pre><code>&lt;label for=\"demo\"&gt;\u00c1rea de texto:&lt;/label&gt;\n&lt;textarea class=\"form-control\" id=\"demo\" rows=\"3\"&gt;Texto de ejemplo.\n    Las \u00e1reas de texto permiten introducir textos m\u00e1s largos\n    y presentarlos en varias l\u00edneas.&lt;/textarea&gt;\n</code></pre> \u00c1rea de texto: Texto de ejemplo. Las \u00e1reas de texto permiten introducir textos m\u00e1s largos y presentarlos en varias l\u00edneas."},{"location":"03electron/07_bs_elements/#checkbox","title":"Checkbox","text":"<p>Las casillas de verificaci\u00f3n permiten al usuario seleccionar una o varias opciones de una lista.</p> <ul> <li>Se crean con la etiqueta <code>&lt;input&gt;</code> y el atributo <code>type=\"checkbox\"</code>.</li> <li>Para seleccionar una casilla por defecto se utiliza el atributo <code>checked</code>.</li> <li>Los atributos <code>name</code> y <code>value</code> permiten identificar el valor de la casilla seleccionada.</li> </ul> <p>Ejemplo:</p> <pre><code>&lt;div class=\"form-check\"&gt;\n  &lt;input class=\"form-check-input\" type=\"checkbox\" id=\"opcion1\" name=\"opcion1\" value=\"op1\"&gt;\n  &lt;label class=\"form-check-label\" for=\"opcion1\"&gt;\n    Primera opci\u00f3n\n  &lt;/label&gt;\n&lt;/div&gt;\n&lt;div class=\"form-check\"&gt;\n  &lt;input class=\"form-check-input\" type=\"checkbox\" id=\"opcion2\" name=\"opcion2\" value=\"op2\" checked&gt;\n  &lt;label class=\"form-check-label\" for=\"opcion2\"&gt;\n    Segunda opci\u00f3n\n  &lt;/label&gt;\n&lt;/div&gt;\n</code></pre>          Primera opci\u00f3n               Segunda opci\u00f3n      <p>Alternativamente se pueden representar con interruptores (switch):</p> <pre><code>&lt;div class=\"form-check form-switch\"&gt;\n  &lt;input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"opcion1\" name=\"opcion1\" value=\"op1\"&gt;\n  &lt;label class=\"form-check-label\" for=\"opcion1\"&gt;\n    Primera opci\u00f3n\n  &lt;/label&gt;\n&lt;/div&gt;\n&lt;div class=\"form-check form-switch\"&gt;\n  &lt;input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"opcion2\" name=\"opcion2\" value=\"op2\" checked&gt;\n  &lt;label class=\"form-check-label\" for=\"opcion2\"&gt;\n    Segunda opci\u00f3n\n  &lt;/label&gt;\n&lt;/div&gt;\n</code></pre>              Primera opci\u00f3n                       Segunda opci\u00f3n          <p>Para leer o establecer el valor de una casilla de verificaci\u00f3n se utiliza la propiedad <code>checked</code>.</p> <pre><code>const opcion1 = document.getElementById('opcion1');\nlet valor = opcion1.checked;\nif (!valor.checked)\n    opcion1.checked = true;\n</code></pre>"},{"location":"03electron/07_bs_elements/#radio","title":"Radio","text":"<p>Los botones de radio permiten al usuario seleccionar s\u00f3lo una opci\u00f3n de una lista.</p> <ul> <li>Se crean con la etiqueta <code>&lt;input&gt;</code> y el atributo <code>type=\"radio\"</code>.</li> <li>Para seleccionar una opci\u00f3n por defecto se utiliza el atributo <code>checked</code>.</li> <li>Para agrupar los botones de radio se utiliza el atributo <code>name</code> con el mismo valor.</li> <li>El atributo <code>value</code> permite identificar el valor de la opci\u00f3n seleccionada.</li> </ul> <pre><code>&lt;div class=\"form-check\"&gt;\n    &lt;input class=\"form-check-input\" type=\"radio\" id=\"mascota-perro\" name=\"mascota\" value=\"perro\" checked&gt;\n    &lt;label class=\"form-check-label\" for=\"mascota-perro\"&gt;\n        Perro\n    &lt;/label&gt;\n&lt;/div&gt;\n&lt;div class=\"form-check\"&gt;\n    &lt;input class=\"form-check-input\" type=\"radio\" id=\"mascota-gato\" name=\"mascota\" value=\"gato\"&gt;\n    &lt;label class=\"form-check-label\" for=\"mascota-gato\"&gt;\n        Gato\n    &lt;/label&gt;\n&lt;/div&gt;\n&lt;div class=\"form-check\"&gt;\n    &lt;input class=\"form-check-input\" type=\"radio\" id=\"mascota-otros\" name=\"mascota\" value=\"otros\"&gt;\n    &lt;label class=\"form-check-label\" for=\"mascota-otros\"&gt;\n        Otros\n    &lt;/label&gt;\n&lt;/div&gt;\n</code></pre>              Perro                       Gato                       Otros          <p>Para leer o establecer el valor de un bot\u00f3n de radio se utiliza la propiedad <code>checked</code>.</p> <pre><code>const perro = document.getElementById('mascota-perro');\nlet valor = perro.checked;\nif (!valor.checked)\n    perro.checked = true;\n</code></pre>"},{"location":"03electron/07_bs_elements/#select","title":"Select","text":"<p>Los selectores permiten al usuario seleccionar una opci\u00f3n de una lista desplegable.</p> <ul> <li>Se crean con la etiqueta <code>&lt;select&gt;</code>.</li> <li>El atributo <code>name</code> permite identificar el valor de la opci\u00f3n seleccionada.</li> </ul> <pre><code>&lt;select class=\"form-select\" name=\"opcion\"&gt;\n    &lt;option selected&gt;Selecciona una opci\u00f3n&lt;/option&gt;\n    &lt;option value=\"1\"&gt;Uno&lt;/option&gt;\n    &lt;option value=\"2\"&gt;Dos&lt;/option&gt;\n    &lt;option value=\"3\"&gt;Tres&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> Selecciona una opci\u00f3n Uno Dos Tres <p>Tambi\u00e9n se pueden crear selectores m\u00faltiples, que permiten al usuario seleccionar varias opciones de una lista desplegable. Para ello se utiliza el atributo <code>multiple</code>.</p> <pre><code>&lt;select class=\"form-select\" name=\"opcion\" multiple&gt;\n    &lt;option value=\"1\"&gt;Uno&lt;/option&gt;\n    &lt;option value=\"2\"&gt;Dos&lt;/option&gt;\n    &lt;option value=\"3\"&gt;Tres&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> Uno Dos Tres <p>Para leer o establecer el valor de un selector se utiliza la propiedad <code>value</code>.</p> <pre><code>const selector = document.getElementById('selector');\nlet valor = selector.value;\nif (selector.value != 2)\n    selector.value = 2\n</code></pre>"},{"location":"03electron/07_bs_elements/#slider","title":"Slider","text":"<p>Los selectores permiten al usuario seleccionar un valor de una barra deslizante.</p> <ul> <li>Se crean con la etiqueta <code>&lt;input&gt;</code> y el atributo <code>type=\"range\"</code>.</li> <li>El atributo <code>name</code> permite identificar el valor seleccionado.</li> <li>Se puede especificar el valor m\u00ednimo y m\u00e1ximo con los atributos <code>min</code> y <code>max</code>.</li> <li>El atributo <code>step</code> permite especificar el incremento del valor.</li> </ul> <pre><code>&lt;input class=\"form-range\" type=\"range\" min=\"0\" max=\"100\" step=\"1\" name=\"slider\"&gt;\n</code></pre> <p>Para leer o establecer el valor de un selector se utiliza la propiedad <code>value</code>.</p> <pre><code>const slider = document.getElementById('slider');\nlet valor = slider.value;\nif (slider.value &lt; 50)\n    slider.value = 50\n</code></pre>"},{"location":"03electron/07_bs_elements/#formularios","title":"Formularios","text":"<p>Los formularios son elementos que permiten al usuario introducir datos en la aplicaci\u00f3n.</p> <p>Se crean con la etiqueta <code>&lt;form&gt;</code>. Los campos de texto, \u00e1reas de texto y botones se incluyen dentro del formulario.</p> <p>Podemos a\u00f1adir el atributo <code>required</code> a los campos de texto para indicar que son obligatorios.</p> <pre><code>_Ejemplo:_\n\n```html\n&lt;form&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"user\" class=\"col-form-label\"&gt;Usuario:&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"user\" value=\"usuario1\" required&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"password\" class=\"col-form-label\"&gt;Contrase\u00f1a:&lt;/label&gt;\n        &lt;input type=\"password\" class=\"form-control\" id=\"password\" value=\"no visible\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"email\" class=\"col-form-label\"&gt;Email:&lt;/label&gt;\n        &lt;input type=\"email\" class=\"form-control\" id=\"email\" value=\"\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"demo\"&gt;\u00c1rea de texto:&lt;/label&gt;\n        &lt;textarea class=\"form-control\" id=\"demo\" rows=\"3\"&gt;Texto de ejemplo. Las \u00e1reas de texto permiten introducir textos m\u00e1s largos y presentarlos en varias l\u00edneas.&lt;/textarea&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> Nombre Apellidos Usuario Contrase\u00f1a Email:                  Default radio                               Default checked radio                                   Acepto las condiciones                  Enviar Restablecer"},{"location":"03electron/07_bs_elements/#validacion-de-formularios","title":"Validaci\u00f3n de formularios","text":"<p>Los formularios se pueden validar con JavaScript. Para ello se utiliza el m\u00e9todo <code>checkValidity()</code> del formulario. Ejemplo</p> <pre><code>const form = document.querySelector('form');\nform.addEventListener('submit', (event) =&gt; {\n    if (!form.checkValidity()) {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    form.classList.add('was-validated');\n});\n</code></pre> <ul> <li>El m\u00e9todo <code>checkValidity()</code> devuelve <code>true</code> si el formulario es v\u00e1lido y <code>false</code> en caso contrario.</li> <li>El m\u00e9todo <code>preventDefault()</code> evita que se env\u00ede el formulario.</li> <li>El m\u00e9todo <code>stopPropagation()</code> evita que se propague el evento.</li> <li>La clase <code>was-validated</code> permite mostrar los mensajes de error.</li> <li>Los mensajes de error se muestran con la clase <code>invalid-feedback</code>.</li> </ul>"},{"location":"03electron/07_bs_elements/#referencias","title":"Referencias","text":"<ul> <li>Bootstrap</li> <li>Electron</li> <li>W3Schools</li> <li>MDN Web Docs</li> </ul>"},{"location":"03electron/ud3_act1/","title":"\u270d\ufe0f UD3 - Actividad 1: Document Object Model (DOM)","text":"<p>Acepta la tarea en GitHub Classroom y clona el repositorio en tu m\u00e1quina local.</p> <ul> <li>https://classroom.github.com/a/SpaW-Hl7</li> </ul> <p>Realiza las actividades en los ficheros indicados y comprueba que funcionan correctamente.</p> <p>Warning</p> <p>Es importante evitar el uso de generadores de c\u00f3digo autom\u00e1tico para realizar las actividades.</p> <p>Si tienes dudas, consulta la documentaci\u00f3n o pide ayuda al profesor.</p> <p>En caso de existir duda ante la copia o el uso de herramientas de generaci\u00f3n de c\u00f3digo autom\u00e1tico, se pedir\u00e1 una explicaci\u00f3n detallada del c\u00f3digo por parte del alumnado implicado. En caso de no poder justificarlo, se considerar\u00e1 copia y se considerar\u00e1 la actividad como no realizada para las partes afectadas.</p> <p>Commit</p> <p>Haz al menos un commit por cada apartado.</p>"},{"location":"03electron/ud3_act1/#1-seleccionar-elementos","title":"1. Seleccionar elementos","text":"<p>Descarga esta p\u00e1gina html de ejemplo en el directorio de la actividad.</p> <p>Crea el archivo <code>index.js</code> y a\u00f1ade el c\u00f3digo necesario para obtener los siguientes elementos y mostrar por consola su contenido con <code>innerHTML</code>:</p> <ul> <li>El elemento con <code>id</code> '<code>input2</code>'</li> <li>La colecci\u00f3n de p\u00e1rrafos</li> <li>Lo mismo pero s\u00f3lo de los p\u00e1rrafos que hay dentro del <code>div</code> 'lipsum'</li> <li>El formulario (ojo, no la colecci\u00f3n con el formulario sino s\u00f3lo el formulario)</li> <li>Todos los elementos <code>input</code></li> <li>S\u00f3lo los <code>input</code> con nombre 'sexo'</li> <li>Los items de lista con clase '<code>important</code>' (s\u00f3lo los <code>&lt;li&gt;</code>)</li> <li>El primer p\u00e1rrafo que hay dentro del <code>div</code> con <code>id</code> <code>'lipsum'</code></li> <li>El segundo p\u00e1rrafo de <code>'lipsum'</code></li> <li>El \u00faltimo item de la lista</li> <li>El <code>label</code> de 'Escoge sexo'</li> </ul>"},{"location":"03electron/ud3_act1/#2-modificar-elementos","title":"2. Modificar elementos","text":"<p>Siguiendo con la p\u00e1gina de ejemplo y la estructura del ejercicio anterior, a\u00f1ade el c\u00f3digo necesario para realizar las los siguientes operaciones:</p> <ul> <li>Selecciona y muestra por consola el <code>innerHTML</code> de la etiqueta de 'Escoge sexo'.</li> <li>Selecciona y muestra por consola <code>textContent</code> de esa etiqueta.</li> <li>Modifica el <code>textContent</code> de esa etiqueta para que ponga 'G\u00e9nero:'.</li> <li>Selecciona y muestra por consola valor del primer <code>input</code> de 'sexo'.</li> <li>Selecciona y muestra por consola valor del 'sexo' que est\u00e9 seleccionado.</li> </ul>"},{"location":"03electron/ud3_act1/#3-crear-y-anadir-elementos","title":"3. Crear y a\u00f1adir elementos","text":"<p>Siguiendo con la p\u00e1gina de ejemplo y la estructura del ejercicio anterior, a\u00f1ade el c\u00f3digo necesario para a\u00f1adir a la p\u00e1gina:</p> <ul> <li>Un nuevo p\u00e1rrafo al final del DIV 'lipsum' con el texto \"Nuevo p\u00e1rrafo a\u00f1adido por javascript\" (f\u00edjate que una palabra esta en negrita)</li> <li>Un nuevo elemento al formulario tras el 'Dato 1' con la etiqueta 'Dato 1 bis' y el INPUT con id 'input1bis' que al cargar la p\u00e1gina tendr\u00e1 escrito \"Hola\"</li> </ul>"},{"location":"03electron/ud3_act1/#4-generar-una-tabla-de-tamano-variable","title":"4. Generar una tabla de tama\u00f1o variable","text":"<p>En esta actividad tendr\u00e1s que crear una p\u00e1gina que permita generar una tabla de tama\u00f1o variable, seleccionar una celda al azar y borrar la tabla.</p> <ul> <li>Crea los archivos <code>index.html</code> y <code>main.js</code> en una carpeta aparte llamada <code>tabla/</code>.</li> <li>Dale una estructura b\u00e1sica a la p\u00e1gina <code>index.html</code> y a\u00f1ade un el script <code>main.js</code>.</li> <li>Crea los siguientes elementos en la p\u00e1gina:<ul> <li>Un <code>&lt;input type=\"text\"&gt;</code> con <code>id</code> <code>'table_x'</code></li> <li>Un <code>&lt;input type=\"text\"&gt;</code> con <code>id</code> <code>'table_y'</code></li> <li>Un bot\u00f3n <code>&lt;button&gt;</code> con <code>id</code> <code>'generar'</code> y texto <code>'Generar'</code>, a\u00f1ade el atributo <code>onclick</code> con el valor <code>'generarTabla()'</code></li> <li>A\u00f1ade un <code>&lt;button&gt;</code> con <code>id</code> <code>'borrar'</code> y texto <code>'Borrar'</code>, a\u00f1ade el atributo <code>onclick</code> con el valor <code>'borrarTabla()'</code></li> <li>Un <code>&lt;div&gt;</code> con <code>id</code> <code>'tabla'</code></li> <li>Un <code>&lt;ol&gt;</code> con <code>id</code> <code>'seleccion'</code></li> </ul> </li> <li>En <code>main.js</code> crea una funci\u00f3n <code>generarTabla()</code> que:<ul> <li>Lea los valores de los <code>&lt;input&gt;</code> de <code>'table_x'</code> y <code>'table_y'</code></li> <li>Cree una tabla de <code>table_x</code> filas y <code>table_y</code> columnas dentro del <code>&lt;div&gt;</code> <code>'tabla'</code></li> <li>Cada celda de la tabla tendr\u00e1 un un <code>id</code> <code>'celda_x_y'</code> donde <code>x</code> es el n\u00famero de fila y <code>y</code> el n\u00famero de columna. El texto del <code>&lt;span&gt;</code> ser\u00e1 <code>'x,y'</code>.</li> </ul> </li> <li>Funci\u00f3n <code>borrar()</code> que:<ul> <li>Limpie el contenido del <code>&lt;div&gt;</code> <code>'tabla'</code>, los valores del formulario y el contenido del <code>&lt;ol&gt;</code> <code>'seleccion'</code>.</li> </ul> </li> <li> <p>Funci\u00f3n <code>seleccionaCelda()</code> que:</p> <ul> <li>Seleccione una celda al azar de la tabla y cambie su color de fondo, por ejemplo a rojo.</li> <li>A\u00f1ada un nuevo elemento <code>&lt;li&gt;</code> al <code>&lt;ol&gt;</code> <code>'seleccion'</code> con el texto de la celda seleccionada (<code>'x,y'</code>).</li> <li>Modifica <code>index.html</code> para aparezca un bot\u00f3n <code>'Seleccionar'</code> y en el atributo <code>onclick</code> valor <code>'seleccionaCelda()'</code>.</li> <li>Si existen celdas seleccionadas con anterioridad, se debe cambiar el color de fondo a otro distinto de la seleccionada actualmente, por ejemplo a gris.</li> <li>Consejo: resultar\u00e1 m\u00e1s f\u00e1cil si modificas las clases de las celdas en lugar de los estilos directamente.</li> </ul> </li> <li> <p>Opcional:</p> <ul> <li>\u00bfQu\u00e9 ocurre si se pulsa el bot\u00f3n <code>'Generar'</code> sin haber borrado la tabla anterior? Implementa una soluci\u00f3n.</li> </ul> </li> </ul>"},{"location":"03electron/ud3_act2/","title":"\u270d\ufe0f UD3 - Actividad 2: Eventos y formularios","text":"<p>Acepta la tarea en GitHub Classroom y clona el repositorio en tu m\u00e1quina local.</p> <ul> <li>https://classroom.github.com/a/dKdFE5JY</li> </ul> <p>Realiza las actividades en los ficheros indicados y comprueba que funcionan correctamente.</p> <p>Warning</p> <p>Es importante evitar el uso de generadores de c\u00f3digo autom\u00e1tico para realizar las actividades.</p> <p>Si tienes dudas, consulta la documentaci\u00f3n o pide ayuda al profesor.</p> <p>En caso de existir duda ante la copia o el uso de herramientas de generaci\u00f3n de c\u00f3digo autom\u00e1tico, se pedir\u00e1 una explicaci\u00f3n detallada del c\u00f3digo por parte del alumnado implicado. En caso de no poder justificarlo, se considerar\u00e1 copia y se considerar\u00e1 la actividad como no realizada para las partes afectadas.</p> <p>Commit</p> <p>Haz al menos un commit por cada apartado.</p>"},{"location":"03electron/ud3_act2/#1-validacion-nativa-de-html5","title":"1. Validaci\u00f3n nativa de HTML5","text":"<p>Dentro de la carpeta <code>validacionHTML/</code> crea un archivo <code>index.html</code> y construye un formulario de registro con los siguientes campos:</p> <ul> <li><code>Nombre de usuario</code>: Requerido, entre <code>5</code> y <code>20</code> caracteres, s\u00f3lo letras y n\u00fameros.</li> <li><code>Contrase\u00f1a</code>: Requerido, entre <code>8</code> y <code>20</code> caracteres, al menos una letra may\u00fascula, una min\u00fascula y un n\u00famero.</li> <li><code>Repetir contrase\u00f1a</code>: Requerido, misma validaci\u00f3n que la contrase\u00f1a.</li> <li><code>E-mail</code>: Requerido, debe ser un e-mail v\u00e1lido.</li> <li><code>C\u00f3digo postal</code>. Num\u00e9rico, entre <code>5</code> y <code>7</code> d\u00edgitos.</li> <li><code>Fecha de nacimiento</code>: Debe ser una fecha v\u00e1lida.</li> <li><code>Acepto las condiciones</code>: Requerido.</li> <li><code>Enviar</code>. Bot\u00f3n que env\u00eda el formulario si es v\u00e1lido.</li> </ul> <p>Utiliza la validaci\u00f3n nativa de HTML5.</p>"},{"location":"03electron/ud3_act2/#2-validacion-de-formularios-con-javascript","title":"2. Validaci\u00f3n de formularios con JavaScript","text":"<p>Dentro de la carpeta <code>validacionAPI/</code> crea los archivos <code>index.html</code> y <code>main.js</code> y construye un formulario de registro con los siguientes campos:</p> <ul> <li><code>Nombre de usuario</code>: Requerido, entre <code>5</code> y <code>20</code> caracteres, s\u00f3lo letras y n\u00fameros.</li> <li><code>Contrase\u00f1a</code>: Requerido, entre <code>8</code> y <code>20</code> caracteres, al menos una letra may\u00fascula, una min\u00fascula y un n\u00famero.</li> <li><code>Repetir contrase\u00f1a</code>: Requerido, debe ser igual a la <code>contrase\u00f1a</code>.</li> <li><code>E-mail</code>: Requerido, debe ser un e-mail v\u00e1lido.</li> <li><code>C\u00f3digo postal</code>. Debe ser un c\u00f3digo postal v\u00e1lido.</li> <li><code>Fecha de nacimiento</code>: Debe ser una fecha v\u00e1lida.</li> <li><code>Acepto las condiciones</code>: Requerido, checkbox que debe estar marcado.</li> <li><code>Enviar</code>. Bot\u00f3n que env\u00eda el formulario si es v\u00e1lido.</li> </ul> <p>Utiliza la validaci\u00f3n de formularios de HTML5 y la API de validaci\u00f3n de formularios de JavaScript.</p> <p>Utiliza etiquetas <code>&lt;span class=\"error\"&gt;</code> para mostrar mensajes de error debajo de los campos que no cumplen las reglas de validaci\u00f3n.</p>"},{"location":"03electron/ud3_act2/#3-mensajes-de-error-personalizados","title":"3. Mensajes de error personalizados","text":"<p>Dentro de la carpeta <code>validacionMensajes/</code> copia los archivos <code>index.html</code> y <code>main.js</code> de la actividad anterior y modifica el c\u00f3digo JavaScript para que muestre mensajes de error personalizados en lugar de los mensajes por defecto del navegador.</p>"},{"location":"03electron/ud3_act2/#4-validacion-de-campos-en-tiempo-real","title":"4. Validaci\u00f3n de campos en tiempo real","text":"<p>Dentro de la carpeta <code>validacionTiempoReal/</code> copia los archivos <code>index.html</code> y <code>main.js</code> de la actividad anterior y modifica el c\u00f3digo JavaScript para que valide los campos en tiempo real, mostrando mensajes de error en el momento en que se incumple una regla de validaci\u00f3n. Para ello deber\u00e1s utilizar eventos de formulario y de entrada de texto.</p> <p>El bot\u00f3n de enviar s\u00f3lo estar\u00e1 habilitado si el formulario es v\u00e1lido. Esto se puede hacer estableciendo el atributo <code>disabled=\"true\"</code> del bot\u00f3n.</p>"},{"location":"04electron_react/","title":"4 Electron avanzado","text":"<ul> <li>4.1 Introducci\u00f3n a React</li> <li>4.2 Integraci\u00f3n de React en Electron</li> <li>4.3 Eventos React</li> <li>4.4 Reaccionando a cambios de estado con <code>useState</code></li> <li>4.5 Responder a cambios externos con  <code>useEffect</code></li> <li>4.6 Estado global y rutas</li> </ul>"},{"location":"04electron_react/01_intro_react/","title":"4.1 Introducci\u00f3n a React","text":"<p>En esta secci\u00f3n vamos a aprender a crear aplicaciones de Electron con React. React es una biblioteca de JavaScript para construir interfaces de usuario, y es una de las opciones m\u00e1s populares para crear aplicaciones modernas.</p>"},{"location":"04electron_react/01_intro_react/#que-es-react","title":"\u00bfQu\u00e9 es React?","text":"<p>En la p\u00e1gina oficial de React se describe como:</p> <p>React: The library for web and native user interfaces</p> <p>React es una biblioteca de c\u00f3digo abierto para construir interfaces de usuario. Desarrollado por Meta, creado en 2011 por Jordan Walke. React es una de las opciones m\u00e1s populares para crear aplicaciones modernas, y es ampliamente utilizado por empresas como Meta, Instagram, Airbnb, Netflix, WhatsApp, Twitter, Reddit, Twitch, entre otros.</p> <p>Los frameworks como Angular y Vue proporcionan una estructura y un conjunto de herramientas para desarrollar aplicaciones completas, y tambi\u00e9n son excelentes opciones para crear aplicaciones con Electron.</p> <p>React, por otro lado, es una biblioteca que se centra en la creaci\u00f3n de interfaces de usuario. React es una excelente opci\u00f3n para crear aplicaciones de una sola p\u00e1gina (SPA) y aplicaciones de Electron, ya que facilita la creaci\u00f3n de interfaces de usuario interactivas y din\u00e1micas.</p> <p>Se escoge React para este curso, por su facilidad de uso, su popularidad y su gran comunidad de desarrolladores, y al ser una librer\u00eda, se puede integrar f\u00e1cilmente con otras herramientas y bibliotecas, sin imponer una estructura o un flujo de trabajo espec\u00edfico.</p> <p>Las desventajas de los frameworks, es que pueden ser m\u00e1s complejos y tener una curva de aprendizaje m\u00e1s pronunciada, adem\u00e1s, los cambios de versi\u00f3n pueden requerir una reescritura significativa del c\u00f3digo.</p>"},{"location":"04electron_react/01_intro_react/#caracteristicas-de-react","title":"Caracter\u00edsticas de React","text":"<ul> <li>Declarativo: Mediante la extensi\u00f3n de JavaScript llamada JSX, React permite escribir elementos como si fueran HTML. JSX es una sintaxis que se compila a JavaScript y permite escribir c\u00f3digo m\u00e1s legible y f\u00e1cil de mantener.</li> </ul> Ejemplo de un componente de React<pre><code>function App() {\n  return &lt;button onClick={() =&gt; alert('Hello, World!')}&gt;Click me&lt;/button&gt;\n}\n</code></pre> Ejemplo con JavaScript puro (vanilla)<pre><code>const button = document.createElement('button')\nbutton.textContent = 'Click me'\nbutton.addEventListener('click', () =&gt; alert('Hello, World!'))\ndocument.body.appendChild(button)\n</code></pre> <ul> <li> <p>Componentes: Cada componente tiene su propio estado y propiedades, y puede ser reutilizado en diferentes partes de la aplicaci\u00f3n.</p> </li> <li> <p>Virtual DOM: El DOM virtual para mejorar el rendimiento. En lugar de actualizar el DOM directamente, React actualiza el DOM virtual y luego compara el DOM virtual con el DOM real para determinar qu\u00e9 elementos deben actualizarse.</p> </li> <li> <p>Hooks: Los Hooks son funciones que permiten \"enganchar\" funcionalidades de React en componentes funcionales. El hook m\u00e1s popular es <code>useState</code>, que permite a\u00f1adir estado a un componentes para que pueda reaccionar a los cambios.</p> </li> </ul>"},{"location":"04electron_react/01_intro_react/#componentes","title":"Componentes","text":"<p>Un componente de software es una parte de un sistema m\u00e1s grande que realiza una funci\u00f3n espec\u00edfica. En React, los componentes son bloques de construcci\u00f3n fundamentales. Un componente puede ser una parte de la interfaz de usuario, como un bot\u00f3n o un formulario, o puede ser una parte m\u00e1s grande de la aplicaci\u00f3n, como una barra lateral o una p\u00e1gina de inicio.</p> <p>Se utilizan para dividir la interfaz de usuario en piezas m\u00e1s peque\u00f1as y manejables. Cada componente tiene su propio estado y propiedades, puede ser reutilizado en diferentes partes de la aplicaci\u00f3n y pueden anidado dentro de otros componentes.</p>"},{"location":"04electron_react/01_intro_react/#single-page-application-spa","title":"single-page application (SPA)","text":"<p>Una aplicaci\u00f3n de una sola p\u00e1gina (SPA) es una aplicaci\u00f3n web o sitio web que interact\u00faa con el usuario din\u00e1micamente, reescribiendo la p\u00e1gina actual en lugar de cargar p\u00e1ginas nuevas desde el servidor. Esto permite que la aplicaci\u00f3n sea m\u00e1s r\u00e1pida y m\u00e1s fluida, ya que solo se carga una vez y luego se actualiza din\u00e1micamente.</p> <p>React es una excelente opci\u00f3n para crear aplicaciones de una sola p\u00e1gina, ya que facilita la creaci\u00f3n de interfaces de usuario interactivas y din\u00e1micas, por lo que es ideal para aplicaciones Electron que requieren una interfaz de usuario moderna y atractiva.</p>"},{"location":"04electron_react/01_intro_react/#creacion-de-un-proyecto-de-react-con-vite","title":"Creaci\u00f3n de un proyecto de React con Vite","text":"<p>Para utilizar React necesitamos un empaquetador que transpile el c\u00f3digo a Javascript. En este curso utilizaremos Vite, un empaquetador de JavaScript moderno que permite utilizar React, Vue y otras bibliotecas en aplicaciones de Electron.</p> <p>Para crear un proyecto utilizaremos el comando <code>npm create vite@latest nombre_del_proyecto</code>. Crear\u00e1 una nueva carpeta con el <code>./nombre_del_proyecto</code> y configurar\u00e1 un proyecto de React con Vite.</p> <ul> <li> <p>Ejecutar el comando para crear un nuevo proyecto:</p> Ejecutar en la l\u00ednea de comandos:<pre><code>$ npm create vite@latest react-test-project\n</code></pre> </li> <li> <p>La primera vez, aparecer\u00e1 el siguiente mensaje:</p> <pre><code>Need to install the following packages:\ncreate-vite@6.0.1\nOk to proceed? (y)\n</code></pre> </li> <li> <p>Seleccionar el framework:</p> <pre><code>? Select a framework: \u203a - Use arrow-keys. Return to submit.\n    Vanilla\n    Vue\n\u276f   React\n    Preact\n    Lit\n    Svelte\n    Solid\n    Qwik\n    Angular\n    Others\n</code></pre> </li> <li> <p>Seleccionar el lenguaje:</p> <pre><code>? Select a variant: \u203a - Use arrow-keys. Return to submit.\n    TypeScript\n    TypeScript + SWC\n    JavaScript\n\u276f   JavaScript + SWC\n    React Router v7 \u2197\n</code></pre> <p>SWC es un compilador de JavaScript/TypeScript escrito en Rust que se ejecuta mucho m\u00e1s r\u00e1pido que Babel.</p> </li> <li> <p>Finalmente se crear\u00e1 el proyecto:</p> <pre><code>Scaffolding project in ./proyecto...\n\nDone. Now run:\n\n  cd proyecto\n  npm install\n  npm run dev\n</code></pre> </li> <li> <p>Instalar dependencias y ejecutar el proyecto:</p> <pre><code>$ cd react-test-project\n$ npm install\n\nadded 212 packages in 4s\n\n99 packages are looking for funding\n  run `npm fund` for details\n\n$ npm run dev\n\n    VITE v6.0.3  ready in 172 ms\n\n    \u279c  Local:   http://localhost:5173/\n    \u279c  Network: use --host to expose\n    \u279c  press h + enter to show help\n\n  Shortcuts\n  press r + enter to restart the server\n  press u + enter to show server url\n  press o + enter to open in browser\n  press c + enter to clear console\n  press q + enter to quit\n</code></pre> <p><code>npm run dev</code></p> <p>El servidor de desarrollo se ejecuta, por defecto, en el puerto <code>5173</code>. Para acceder a la aplicaci\u00f3n se utiliza la direcci\u00f3n <code>http://localhost:5173</code>.</p> <p>Existen una serie de atajos de teclado que permiten realizar acciones de forma r\u00e1pida.</p> <p>Si accedemos a la direcci\u00f3n <code>http://localhost:5173</code> veremos la aplicaci\u00f3n de React en funcionamiento.</p> </li> </ul>"},{"location":"04electron_react/01_intro_react/#estructura-del-proyecto-scaffolding","title":"Estructura del proyecto (scaffolding)","text":"<p>La estructura del proyecto debe ser similar a la siguiente:</p> <pre><code>\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 public/\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 vite.svg\n\u251c\u2500\u2500 src/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 assets/\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 react.svg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 App.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 App.jsx\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.css\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.jsx\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 eslint.config.js\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 vite.config.js\n</code></pre> <p>Podemos observar varios archivos de configuraci\u00f3n, como <code>package.json</code>, <code>vite.config.js</code>, adem\u00e1s de un <code>.gitignore</code>.</p> <p>Dentro de <code>package.json</code> podemos observar los siguientes scripts:</p> package.json<pre><code>...\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"lint\": \"eslint .\",\n    \"preview\": \"vite preview\"\n  },\n...\n</code></pre> <ul> <li><code>dev</code>: Ejecuta el servidor de desarrollo.</li> <li><code>build</code>: Genera la aplicaci\u00f3n para producci\u00f3n en el directorio <code>dist/</code>.</li> <li><code>lint</code>: Ejecuta el linter para comprobar el c\u00f3digo.</li> <li><code>preview</code>: Genera la aplicaci\u00f3n para producci\u00f3n y la ejecuta en un servidor local.</li> </ul> <p>Por otro lado, en <code>index.html</code> es muy sencillo. En <code>&lt;body&gt;</code> s\u00f3lo hay dos elementos:</p> <ul> <li><code>&lt;div id=\"root\"&gt;&lt;/div&gt;</code>: Es el elemento donde se renderizar\u00e1 la aplicaci\u00f3n.</li> <li><code>&lt;script type=\"module\" src=\"/src/main.jsx\"&gt;&lt;/script&gt;</code>: El punto de entrada de la aplicaci\u00f3n es <code>src/main.jsx</code>.</li> </ul> index.html<pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Vite + React&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script type=\"module\" src=\"/src/main.jsx\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>La aplicaci\u00f3n React se encuentra dentro del directorio <code>src/</code>, que es donde trabajaremos a partir de ahora. En este directorio se encuentran los siguientes archivos:</p> <ul> <li><code>main.jsx</code>: Punto de entrada de la aplicaci\u00f3n.</li> <li><code>App.jsx</code>: Componente principal de la aplicaci\u00f3n.</li> <li><code>App.css</code>: Estilos del componente principal.</li> <li><code>index.css</code>: Estilos de la aplicaci\u00f3n (<code>main.jsx</code>).</li> <li><code>assets/</code>: Directorio donde se almacenan los recursos.</li> </ul>"},{"location":"04electron_react/01_intro_react/#creacion-de-componentes","title":"Creaci\u00f3n de componentes","text":"<p>Si observamos el contenido de <code>App.jsx</code> veremos el siguiente c\u00f3digo:</p> src/App.jsx<pre><code>import { useState } from 'react'\nimport reactLogo from './assets/react.svg'\nimport viteLogo from '/vite.svg'\nimport './App.css'\n\nfunction App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    &lt;&gt;\n      &lt;div&gt;\n        &lt;a href=\"https://vite.dev\" target=\"_blank\"&gt;\n          &lt;img src={viteLogo} className=\"logo\" alt=\"Vite logo\" /&gt;\n        &lt;/a&gt;\n        &lt;a href=\"https://react.dev\" target=\"_blank\"&gt;\n          &lt;img src={reactLogo} className=\"logo react\" alt=\"React logo\" /&gt;\n        &lt;/a&gt;\n      &lt;/div&gt;\n      &lt;h1&gt;Vite + React&lt;/h1&gt;\n      &lt;div className=\"card\"&gt;\n        &lt;button onClick={() =&gt; setCount((count) =&gt; count + 1)}&gt;\n          count is {count}\n        &lt;/button&gt;\n        &lt;p&gt;\n          Edit &lt;code&gt;src/App.jsx&lt;/code&gt; and save to test HMR\n        &lt;/p&gt;\n      &lt;/div&gt;\n      &lt;p className=\"read-the-docs\"&gt;\n        Click on the Vite and React logos to learn more\n      &lt;/p&gt;\n    &lt;/&gt;\n  )\n}\n\nexport default App\n</code></pre> <p>Contiene una serie de imports, una funci\u00f3n que contiene un <code>return</code> con c\u00f3digo <code>html</code> y un <code>export</code> al final.</p> <p>Para crear nuestro propio componente, podemos borrar todo el contenido y dejarlo de la siguiente forma:</p> src/App.jsx<pre><code>import './App.css'\n\nfunction App() {\n  return (\n    &lt;&gt;\n\n    &lt;/&gt;\n  )\n}\n\nexport default App\n</code></pre> <p>Un componente siempre debe devolver un \u00fanico elemento. Si queremos devolver varios elementos, debemos agruparlos dentro de un elemento padre, para solucionarlo, se utiliza el componente <code>&lt;Fragment&gt;</code> que suele abreviarse con <code>&lt; &gt;</code> y <code>&lt; /&gt;</code>.</p> <p>Ahora vamos a crear un componente que nos muestre un mensaje de bienvenida. Para ello, modificaremos el archivo <code>App.jsx</code> con el siguiente contenido:</p> src/App.jsx<pre><code>import './App.css'\n\nfunction HolaMundo() {\n  return (\n    &lt;div className=\"HolaMundo\"&gt;\n      &lt;h1&gt;Hola desde mi primer componente&lt;/h1&gt;\n    &lt;/div&gt;\n  )\n}\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;HolaMundo /&gt;\n    &lt;/&gt;\n  )\n}\n\nexport default App\n</code></pre> <p>Si comprobamos el resultado en el navegador, podremos ver que se muestra el mensaje. De esta forma tan simple hemos creado el componente que podremos reutilizar en cualquier parte de nuestra aplicaci\u00f3n.</p> <p>Por lo general, los componentes no son tan simples, se utilizan para crear estructuras m\u00e1s complejas, como una tarjeta que muestra informaci\u00f3n de un usuario, un formulario, listados de productos, etc. Adem\u00e1s, se suelen crear en archivos separados. </p> <p>Ahora vamos a mover el componente <code>HolaMundo</code> a un archivo distinto. Para ello, crearemos la carpeta <code>src/components</code> y dentro crearemos un nuevo archivo <code>HolaMundo.jsx</code> con el siguiente contenido:</p> src/components/HolaMundo.jsx<pre><code>export default function HolaMundo() {\n  return (\n    &lt;div className=\"HolaMundo\"&gt;\n      &lt;h1&gt;Hola desde mi primer componente&lt;/h1&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p>Y ahora podemos eliminar la funci\u00f3n <code>HolaMundo</code> del archivo <code>App.jsx</code> y a\u00f1adir el import del componente:</p> src/App.jsx<pre><code>import './App.css'\nimport HolaMundo from './components/HolaMundo'\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;HolaMundo /&gt;\n    &lt;/&gt;\n  )\n}\n\nexport default App\n</code></pre>"},{"location":"04electron_react/01_intro_react/#props","title":"Props","text":"<p>Los componentes pueden recibir par\u00e1metros en forma de propiedades (props). Las props son inmutables, es decir, no se pueden modificar desde el componente. Para modificarlas, se debe hacer desde el componente padre.</p> <p>Para pasar props a un componente, se utiliza la sintaxis <code>&lt;Componente prop1=\"valor1\" prop2=\"valor2\" /&gt;</code>, con el formato <code>atributo=\"valor\"</code> t\u00edpico de <code>html</code>. Para acceder a las props desde el componente, se utiliza el objeto <code>props</code>.</p> <p>Vamos a crear un componente que reciba un nombre y un apellido y los muestre en pantalla. Para ello, crearemos el archivo <code>src/components/NombreCompleto.jsx</code> con el siguiente contenido:</p> src/components/NombreCompleto.jsx<pre><code>export default function NombreCompleto(props) {\n    return (\n        &lt;p&gt;User: &lt;strong&gt;{props.nombre}&lt;/strong&gt; {props.apellido}&lt;/p&gt;\n    )\n}\n</code></pre> <p>Desestructuraci\u00f3n de props</p> <p>En este caso, el componente recibe dos props: <code>nombre</code> y <code>apellido</code>. Para facilitar el acceso a las props, se pueden desestructurar en los argumentos de la funci\u00f3n.</p> src/App.jsx<pre><code>export default function NombreCompleto( { nombre, apellido } ) {\n    return (\n        &lt;p&gt;User: &lt;strong&gt;{nombre}&lt;/strong&gt; {apellido}&lt;/p&gt;\n    )\n}\n</code></pre> <p>Y ahora podemos a\u00f1adir el componente al archivo <code>App.jsx</code>:</p> src/App.jsx<pre><code>import './App.css'\nimport HolaMundo from './components/HolaMundo'\nimport NombreCompleto from './components/NombreCompleto'\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;HolaMundo /&gt;\n      &lt;NombreCompleto nombre=\"Mar\u00eda\" apellido=\"L\u00f3pez\" /&gt;\n      &lt;NombreCompleto nombre=\"Juan\" apellido=\"P\u00e9rez\" /&gt;\n    &lt;/&gt;\n  )\n}\n\nexport default App\n</code></pre> <p>Si comprobamos el resultado en el navegador, vemos que se muestran los nombres y apellidos que hemos pasado como props.</p>"},{"location":"04electron_react/01_intro_react/#ejemplo-de-integracion-de-bootstrap","title":"Ejemplo de integraci\u00f3n de Bootstrap","text":"<p>Para integrar Bootstrap en nuestro proyecto, debemos instalar las dependencias necesarias. Para ello, ejecutaremos el comando:</p> <pre><code>$ npm install bootstrap bootstrap-icons\n</code></pre> <p>Y ahora podemos utilizar los componentes de Bootstrap en nuestros componentes. Por ejemplo, vamos a crear un componente que muestre una tarjeta con informaci\u00f3n de un usuario. Para ello, crearemos el archivo <code>src/components/TarjetaUsuario.jsx</code> con el siguiente contenido:</p> src/components/TarjetaUsuario.jsx<pre><code>export default function TarjetaUsuario({nombre, apellido, email, telefono}) {\n  return (\n    &lt;div className=\"card shadow-sm\"&gt;\n        &lt;div className=\"card-header text-center\"&gt;\n            &lt;h5 className=\"card-title\"&gt;{nombre} {apellido}&lt;/h5&gt;\n        &lt;/div&gt;\n        &lt;div className=\"card-body\"&gt;\n            &lt;h6 className=\"card-subtitle mb-2 text-muted\"&gt;\n                &lt;a href=\"#\" className=\"card-link\"&gt;&lt;i className=\"bi bi-envelope\"&gt;&lt;/i&gt;&lt;/a&gt;\n                {email}\n            &lt;/h6&gt;\n            &lt;p className=\"card-text\"&gt;&lt;a href=\"#\" className=\"card-link\"&gt;\n                &lt;i className=\"bi bi-telephone\"&gt;&lt;/i&gt;&lt;/a&gt; {telefono}\n            &lt;/p&gt;\n            &lt;div className=\"text-end\"&gt;\n              &lt;button className=\"btn btn-outline-secondary btn-sm\"&gt;A\u00f1adir &lt;i className=\"bi bi-plus-circle\"&gt;&lt;/i&gt;&lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p>Ahora podemos a\u00f1adir el componente al archivo <code>App.jsx</code> junto a los imports de Bootstrap:</p> src/App.jsx<pre><code>import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap';\n\nimport TarjetaUsuario from './components/TarjetaUsuario';\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;div className=\"container mt-5 d-flex flex-wrap justify-content-center gap-3\"&gt;\n        &lt;TarjetaUsuario nombre=\"Mar\u00eda\" apellido=\"L\u00f3pez\" email=\"invalid@email.moc\" telefono=\"123456789\" /&gt;\n        &lt;TarjetaUsuario nombre=\"Juan\" apellido=\"P\u00e9rez\" email=\"invalid@email.moc\" telefono=\"987654321\" /&gt;\n        &lt;TarjetaUsuario nombre=\"Pedro\" apellido=\"Mart\u00edn\" email=\"invalid@email.moc\" telefono=\"123123123\" /&gt;\n        &lt;TarjetaUsuario nombre=\"Ana\" apellido=\"Garc\u00eda\" email=\"invalid@email.moc\" telefono=\"123123132\" /&gt;\n        &lt;TarjetaUsuario nombre=\"Luis\" apellido=\"Gonz\u00e1lez\" email=\"invalid@email.moc\" telefono=\"123123123\" /&gt;\n        &lt;TarjetaUsuario nombre=\"Mar\u00eda\" apellido=\"Rodr\u00edguez\" email=\"invalid@email.moc\" telefono=\"123123123\" /&gt;\n        &lt;TarjetaUsuario nombre=\"Carmen\" apellido=\"Fern\u00e1ndez\" email=\"invalid@email.moc\" telefono=\"123123123\" /&gt;\n        &lt;TarjetaUsuario nombre=\"Antonio\" apellido=\"L\u00f3pez\" email=\"invalid@email.moc\" telefono=\"123123123\" /&gt;\n        &lt;TarjetaUsuario nombre=\"Jos\u00e9\" apellido=\"Mart\u00ednez\" email=\"invalid@email.moc\" telefono=\"123123123\" /&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Si comprobamos el resultado en el navegador, vemos que se muestran las tarjetas con la informaci\u00f3n de los usuarios.</p> <p>La principal diferencia es que se han adaptado los atributos <code>class</code> a los atributos <code>className</code> de React debido a que los archivos JSX se compilan a JavaScript y <code>class</code> es una palabra reservada.</p>"},{"location":"04electron_react/01_intro_react/#listas","title":"Listas","text":"<p>Una operaci\u00f3n muy com\u00fan en las aplicaciones es mostrar una lista de elementos, que pueden tener origen en una base de datos, un archivo o una llamada a una API.</p> <p>En React, para mostrar una lista de elementos, se utiliza el m\u00e9todo <code>map</code> de los arrays. Este m\u00e9todo recorre cada elemento del array y devuelve un nuevo array con los elementos modificados.</p> <p>Vamos a crear un componente que muestre una lista de usuarios. Para ello, crearemos el archivo <code>src/components/ListaUsuarios.jsx</code> con el siguiente contenido:</p> src/components/ListaUsuarios.jsx<pre><code>import TarjetaUsuario from \"./TarjetaUsuario\"\n\nexport default function ListaUsuarios({usuarios}) {\n  return (\n      &lt;ul className=\"list-group\"&gt;\n          {usuarios.map((usuario, index) =&gt; (\n            &lt;li key={index} className=\"list-group-item\"&gt;\n                &lt;TarjetaUsuario {...usuario} /&gt;\n              &lt;/li&gt;\n          ))}\n      &lt;/ul&gt;\n  )\n}\n</code></pre> <p>Recorremos el array de usuarios y por cada usuario, crea un elemento de la lista con el componente <code>TarjetaUsuario</code>. El atributo <code>key</code> es necesario para que React pueda identificar cada elemento de la lista.</p> <p>Y ahora podemos a\u00f1adir el componente al archivo <code>App.jsx</code>:</p> src/App.jsx<pre><code>import \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"bootstrap-icons/font/bootstrap-icons.css\"\nimport \"bootstrap\"\n\nimport ListaUsuarios from \"./components/ListaUsuarios\"\n\nfunction App() {\n  const usuarios = [\n    {\n      nombre: \"Mar\u00eda\",\n      apellido: \"L\u00f3pez\",\n      email: \"invalid@email.moc\",\n      telefono: \"123456789\",\n    },\n    {\n      nombre: \"Juan\",\n      apellido: \"P\u00e9rez\",\n      email: \"invalid@email.moc\",\n      telefono: \"987654321\",\n    },\n    {\n      nombre: \"Pedro\",\n      apellido: \"Mart\u00edn\",\n      email: \"invalid@email.moc\",\n      telefono: \"123123123\",\n    },\n  ]\n\n  return (\n    &lt;&gt;\n      &lt;h1 className=\"text-center mt-5\"&gt;Lista de usuarios&lt;/h1&gt;\n      &lt;div className=\"container mt-5 d-flex flex-wrap justify-content-center gap-3\"&gt;\n        &lt;ListaUsuarios usuarios={usuarios} /&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  )\n}\n\nexport default App\n</code></pre>"},{"location":"04electron_react/02_electron_vite_project/","title":"4.2 Integraci\u00f3n de React en Electron","text":""},{"location":"04electron_react/02_electron_vite_project/#introduccion","title":"Introducci\u00f3n","text":"<p>Hemos visto una breve introducci\u00f3n a React y el empaquetador Vite, pero de poco nos sirve si no lo integramos en una aplicaci\u00f3n Electron para poder construir aplicaciones de escritorio. Para ello, utilizaremos electron-vite, que nos proporciona una plantilla de proyecto con todo lo necesario para empezar a trabajar.</p>"},{"location":"04electron_react/02_electron_vite_project/#integracion-de-react-en-electron","title":"Integraci\u00f3n de React en Electron","text":"<p>Seg\u00fan la documentaci\u00f3n oficial (Scaffolding your first electron-vite project) podemos crear la estructura de un nuevo projecto mediante el siguiente comando:</p> <pre><code>$ npm create @quick-start/electron\n</code></pre> <p>Donde:</p> <ul> <li><code>npm create @quick-start/electron</code>: crea un proyecto Electron con electron-vite</li> <li>Par\u00e1metros opcionales:<ul> <li><code>NOMBRE_PROYECTO</code>: nombre que queramos darle al proyecto, crear\u00e1 un directorio con ese nombre.</li> <li><code>-- --template react</code> indicando que utilice plantilla de proyecto con React</li> </ul> </li> </ul> <p>Aparecer\u00e1 un asistente que nos guiar\u00e1 en la creaci\u00f3n del proyecto.</p> <p>Nombre del proyecto<pre><code>&gt; npx\n&gt; create-electron\n\n? Project name: \u203a mi-proyecto\n</code></pre> Seleccionar el framework que queremos utilizar, en este caso React:</p> Seleccionar Framework<pre><code>? Select a framework: \u203a - Use arrow-keys. Return to submit.\n    vanilla\n    vue\n\u276f   react\n    svelte\n    solid\n</code></pre> <p>Por \u00faltimo, har\u00e1 una serie de preguntas, a las que responderemos <code>No</code>, para no a\u00f1adir TypeScript, ni el plugin de actualizaci\u00f3n de Electron, ni el proxy de descarga de Electron.</p> TypeScript, Electron updater y Electron mirror<pre><code>? Add TypeScript? \u203a No\n? Add Electron updater plugin? \u203a No\n? Enable Electron download mirror proxy? &gt; No\n\nScaffolding project in ./mi-proyecto...\n\nDone. Now run:\n\n  cd mi-proyecto\n  npm install\n  npm run dev\n</code></pre> <p>Nota</p> <p>No vamos a utilizar TypeScript, ni el plugin de actualizaci\u00f3n de Electron, ni el proxy de descarga de Electron.</p> <ul> <li> <p>Typescript es un lenguaje de programaci\u00f3n que es una extensi\u00f3n de JavaScript que a\u00f1ade tipos de datos. Es muy utilizado en proyectos de JavaScript de gran tama\u00f1o, pero no es necesario para proyectos peque\u00f1os.</p> </li> <li> <p>El plugin de actualizaci\u00f3n de Electron permite actualizar la aplicaci\u00f3n autom\u00e1ticamente cuando hay una nueva versi\u00f3n disponible.</p> </li> <li> <p>El proxy de descarga de Electron permite descargar Electron desde un servidor local, en lugar de desde los servidores oficiales.</p> </li> </ul> <p>Una vez terminado, nos situamos en el directorio del proyecto, instalamos las dependencias, abrimos el proyecto en vscode e iniciamos la aplicaci\u00f3n:</p> <pre><code>$ cd mi-proyecto\n$ npm install\n$ code .\n$ npm run dev\n</code></pre>"},{"location":"04electron_react/02_electron_vite_project/#estructura-de-archivos","title":"Estructura de archivos","text":"<p>La estructura de archivos que nos proporciona electron-vite es la siguiente:</p> <pre><code>.\n\u251c\u2500\u2500 \ud83d\udcc2 build/\n\u251c\u2500\u2500 \ud83d\udcc2 resources/\n\u251c\u2500\u2500 \ud83d\udcc2 src/        &lt;---------------- C\u00f3digo fuente\n\u2502   \u251c\u2500\u2500 \ud83d\udcc2 main/       &lt;------------ Proceso principal de Electron\n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 index.js\n\u2502   \u251c\u2500\u2500 \ud83d\udcc2 preload/    &lt;------------ Script de precarga\n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 index.js\n\u2502   \u2514\u2500\u2500 \ud83d\udcc2 renderer/   &lt;------------ Proceso de renderizado\n\u2502       \u251c\u2500\u2500 \ud83d\udcc2 src/        &lt;-------- Proyecto React\n\u2502       \u2502   \u251c\u2500\u2500 \ud83d\udcc2 assets/     &lt;---- Recursos (css, im\u00e1genes, ...)\n\u2502       \u2502   \u251c\u2500\u2500 \ud83d\udcc2 components/ &lt;---- Componentes React\n\u2502       \u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 Versions.jsx\n\u2502       \u2502   \u251c\u2500\u2500 App.jsx    &lt;-------- Componente principal\n\u2502       \u2502   \u2514\u2500\u2500 main.jsx   &lt;-------- Punto de entrada de la aplicaci\u00f3n React\n\u2502       \u2514\u2500\u2500 index.html\n|\n\u251c\u2500\u2500 electron-builder.yml   &lt;-------- Configuraci\u00f3n de electron-builder\n\u251c\u2500\u2500 electron.vite.config.mjs  &lt;------ Configuraci\u00f3n de vite\n\u251c\u2500\u2500 package.json    &lt;--------------- Dependencias y scripts\n\u2514\u2500\u2500 README.md\n</code></pre> <p>La aplicaci\u00f3n electron se sit\u00faa en <code>src/</code>, y est\u00e1 dividida en tres partes:</p> <ul> <li><code>src/main/</code>: c\u00f3digo del proceso principal de Electron</li> <li><code>src/preload/</code>: c\u00f3digo que precarga</li> <li><code>src/renderer/src/</code>: c\u00f3digo de la aplicaci\u00f3n React</li> </ul> <p>Como vemos, se ha movido el c\u00f3digo de la aplicaci\u00f3n React a <code>src/renderer/src/</code>.</p>"},{"location":"04electron_react/02_electron_vite_project/#scripts-de-la-npm","title":"Scripts de la npm","text":"<ul> <li><code>npm run dev</code>: inicia la aplicaci\u00f3n en modo desarrollo</li> <li><code>npm start</code>: inicia la aplicaci\u00f3n en modo producci\u00f3n</li> <li><code>npm run build</code>: crea ejecutables e instaladores para la aplicaci\u00f3n, es un proceso que puede tardar varios minutos.<ul> <li><code>npm run build:win</code>: crea ejecutables e instaladores para Windows</li> <li><code>npm run build:linux</code>: crea ejecutables e instaladores para Linux</li> <li><code>npm run build:mac</code>: crea ejecutables e instaladores para macOS. S\u00f3lo se puede ejecutar en un sistema macOS.</li> </ul> </li> </ul>"},{"location":"04electron_react/02_electron_vite_project/#codigo-de-la-aplicacion","title":"C\u00f3digo de la aplicaci\u00f3n","text":"<p>El proceso principal de Electron se encuentra en <code>src/main/index.js</code>.</p> <p>El proceso de renderizado de Electron se encuentra en <code>src/renderer/main.html</code> que es la p\u00e1gina que cargar\u00e1 la ventana principal de la aplicaci\u00f3n. <code>src/renderer/main.html</code> carga el m\u00f3dulo <code>src/renderer/src/main.jsx</code>, y este, carga el componente <code>src/renderer/src/App.jsx</code> que contiene la aplicaci\u00f3n React.</p> <p>El script de precarga se encuentra en <code>src/preload/index.js</code>. Como vimos, este script se ejecuta en el proceso de renderizado antes de cargar el c\u00f3digo de la aplicaci\u00f3n React, y tiene la siguiente estructura:</p> src/preload/index.js<pre><code>import { contextBridge, ipcRenderer } from 'electron'\nimport { electronAPI } from '@electron-toolkit/preload'\n\n// Custom APIs for renderer\nconst api = {}\n\n// Use `contextBridge` APIs to expose Electron APIs to\n// renderer only if context isolation is enabled, otherwise\n// just add to the DOM global.\nif (process.contextIsolated) {\n  try {\n    contextBridge.exposeInMainWorld('electron', electronAPI)\n    contextBridge.exposeInMainWorld('api', api)\n  } catch (error) {\n    console.error(error)\n  }\n} else {\n  window.electron = electronAPI\n  window.api = api\n}\n</code></pre> <p>expone dos objetos en el contexto global del proceso de renderizado:</p> <ul> <li> <p><code>electron</code>: utiliza el m\u00f3dulo <code>@electron-toolkit/preload</code> que expone las API de Electron en el proceso de renderizado.</p> <p>Por ejemplo, para enviar un mensaje al proceso principal: <code>window.electron.ipcRenderer.send('setWindowTitle', 'Mi aplicaci\u00f3n')</code> desde el proceso de renderizado, sin tener que declarar el m\u00f3dulo <code>ipcRenderer</code> en el script de precarga.</p> </li> <li> <p><code>api</code>: podemos definir aqu\u00ed nuestras propias funciones que queramos exponer en el proceso de renderizado, de la forma que vimos en apartado 3.5 Comunicaci\u00f3n entre procesos.</p> </li> </ul>"},{"location":"04electron_react/02_electron_vite_project/#hot-reloading","title":"Hot Reloading","text":"<p>Incluye hot reloading tanto en el proceso principal como en el de renderizado. Al realizar cambios en el c\u00f3digo, la aplicaci\u00f3n se recarga autom\u00e1ticamente. Por lo que, en principio, no es necesario reiniciar la aplicaci\u00f3n para ver los cambios.</p>"},{"location":"04electron_react/02_electron_vite_project/#referencias","title":"Referencias","text":"<ul> <li>electron-vite</li> <li>Scaffolding your first electron-vite project</li> <li>Features | electron-vite</li> <li>React</li> <li>Vite</li> <li>electron-builder</li> <li>electron-builder Configuration</li> </ul>"},{"location":"04electron_react/03_react_events/","title":"4.3 Eventos React","text":"<p>React te permite a\u00f1adir controladores de eventos. Los controladores de eventos son funciones que se ejecutar\u00e1n en respuesta a interacciones como <code>click</code>, <code>hover</code>, <code>focus</code>, <code>change</code>, etc. Recordar que en Javascript se definen con <code>addEventListener</code>, pero en JSX se definen directamente como si fueran atributos de los elementos del DOM.</p> <p>Ejemplo de un bot\u00f3n que muestra una alerta cuando se hace clic:</p> src/renderer/src/App.jsx<pre><code>export default function AlertButton() {\n  function handleClick() {\n    alert('\u00a1Me hiciste click!');\n  }\n\n  return (\n    &lt;button onClick={handleClick}&gt;\n        Clic aqu\u00ed\n    &lt;/button&gt;\n  );\n}\n</code></pre> <p>En el ejemplo, el controlador de eventos <code>onClick</code> har\u00e1 que se ejecute la funci\u00f3n <code>handleClick</code> cuando se haga clic en el bot\u00f3n, mostrando un mensaje de alerta.</p> <p>onClick</p> <p><code>onClick</code> es un atributo especial de JSX que se utiliza para a\u00f1adir controladores de eventos a los elementos del DOM. En React, los nombres de los eventos se escriben en camelCase, por ejemplo, <code>onClick</code> en lugar de <code>onclick</code>.</p> <p>Al contrario que en HTML, donde no se recomienda usar <code>onclick</code> en favor de <code>addEventListener</code>, debemos recordar que JSX no es HTML, el transpilador, en este caso Vite, transformar\u00e1 el c\u00f3digo JSX a JavaScript.</p> <p>Dentro de los controladores de eventos, podemos indicar el nombre de la funci\u00f3n a llamar, como hemos visto, o tambi\u00e9n podemos ejecutar c\u00f3digo directamente:</p> <pre><code>&lt;button onClick={ () =&gt; alert('\u00a1Me hiciste clic!') }&gt;\n    Clic aqu\u00ed\n&lt;/button&gt;\n</code></pre> <p>En este caso es importante declarar una funci\u00f3n an\u00f3nima con <code>() =&gt;</code> para que se ejecute el c\u00f3digo cuando se haga clic en el bot\u00f3n, y no cuando se renderice el componente.</p>"},{"location":"04electron_react/03_react_events/#pasar-props-en-los-controladores-de-eventos","title":"Pasar <code>props</code> en los controladores de eventos","text":"<p>Como los controladores de eventos son declarados dentro de un componente, tienen acceso a las props del componente.</p> <p>Este es un bot\u00f3n que, cuando se hace clic, muestra una alerta con su prop message:</p> <pre><code>function AlertButton({ message, children }) {\n  return (\n    &lt;button onClick={() =&gt; alert(message)}&gt;\n      {children}\n    &lt;/button&gt;\n  );\n}\n\nexport default function App() {\n  return (\n    &lt;div&gt;\n      &lt;AlertButton message=\"\u00a1Hola!\"&gt;\n        Saludar\n      &lt;/AlertButton&gt;\n      &lt;AlertButton message=\"Hasta luego\"&gt;\n        Despedirse\n      &lt;/AlertButton&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>children</p> <p><code>children</code> es una prop especial que React proporciona a los componentes. Representa el contenido entre las etiquetas de apertura y cierre de un componente. En este caso, <code>children</code> representa el texto \"Saludar\" y \"Despedirse\".</p>"},{"location":"04electron_react/03_react_events/#referencias","title":"Referencias","text":"<ul> <li>React | Responding to Events</li> <li>React | Children</li> </ul>"},{"location":"04electron_react/04_react_state/","title":"4.4 Reaccionando a cambios de estado con <code>useState</code>","text":"<p>Los componentes a menudo necesitan cambiar lo que se muestra en pantalla como resultado de una interacci\u00f3n. Escribir dentro de un formulario deber\u00eda actualizar el campo de texto, hacer clic en \u00absiguiente\u00bb en un carrusel de im\u00e1genes deber\u00eda cambiar la imagen que es mostrada; hacer clic en un bot\u00f3n para comprar un producto deber\u00eda actualizar el carrito de compras. En los ejemplos anteriores los componentes deben \u00abrecordar\u00bb cosas: el campo de texto, la imagen actual, el carrito de compras. En React, a este tipo de memoria de los componentes se le conoce como estado.</p> <p>Vamos a crear un componente que muestre un contador, y que se pueda incrementar o decrementar:</p> src/renderer/src/component/Counter.jsx<pre><code>export default function Counter() {\n  let counter = 0\n\n  function handleIncrement() {\n    counter++\n  }\n\n  function handleDecrement() {\n    counter--\n  }\n\n  return (\n    &lt;div className=\"row gap-3\"&gt;\n      &lt;button className=\"btn btn-success col\" onClick={handleIncrement}&gt;\n        +1\n      &lt;/button&gt;\n      &lt;button className=\"btn btn-danger col\" onClick={handleDecrement}&gt;\n        -1\n      &lt;/button&gt;\n      &lt;h2 className=\"text-center\"&gt;Contador: {counter}&lt;/h2&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p>En este ejemplo, el contador se encuentra en una variable <code>counter</code>. Cuando se hace clic en los botones, se modifica su valor, pero el componente no se vuelve a renderizar, y no podemos ver los cambios.</p> <p>Para solucionarlo vamos a utilizar un estado. Un estado es un objeto que contiene datos que pueden cambiar durante la vida del componente. Para crear un estado, utilizamos el hook <code>useState</code>:</p> src/renderer/src/component/Counter.jsx<pre><code>import { useState } from 'react'\n\nexport default function Counter() {\n  const [counter, setCounter] = useState(0)\n\n  function handleIncrement() {\n    setCounter(counter + 1)\n  }\n\n  function handleDecrement() {\n    setCounter(counter - 1)\n  }\n\n  return (\n    &lt;div className=\"row gap-3\"&gt;\n      &lt;button className=\"btn btn-success col\" onClick={handleIncrement}&gt;\n        +1\n      &lt;/button&gt;\n      &lt;button className=\"btn btn-danger col\" onClick={handleDecrement}&gt;\n        -1\n      &lt;/button&gt;\n      &lt;h2 className=\"text-center\"&gt;Contador: {counter}&lt;/h2&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p><code>useState</code> devuelve un array con dos elementos: el estado actual, y una funci\u00f3n para actualizar el estado. En este ejemplo, el estado inicial es <code>0</code>, y la funci\u00f3n para actualizar el estado es <code>setCounter</code>. Cuando se llama a <code>setCounter</code>, el componente se vuelve a renderizar, y se muestra el nuevo valor del contador.</p>"},{"location":"04electron_react/04_react_state/#estado-inicial","title":"Estado inicial","text":"<p>El estado inicial se pasa como argumento a <code>useState</code>. En el ejemplo anterior, el estado inicial es <code>0</code>:</p> <pre><code>const [counter, setCounter] = useState(0)\n</code></pre> <p>El estado inicial puede ser cualquier valor, como un n\u00famero, un string, un array, un objeto, etc.</p>"},{"location":"04electron_react/04_react_state/#actualizar-el-estado","title":"Actualizar el estado","text":"<p>Para actualizar el estado, llamamos a la funci\u00f3n que nos devuelve <code>useState</code>. En el ejemplo anterior, las funciones para actualizar utilizan <code>setCounter</code>:</p> <pre><code>function handleIncrement() {\n  setCounter(counter + 1)\n}\nfunction handleDecrement() {\n  setCounter(counter - 1)\n}\n</code></pre> <p>La funci\u00f3n para actualizar el estado recibe como argumento el nuevo valor del estado. En el ejemplo, el nuevo valor del estado es <code>counter + 1</code>.</p>"},{"location":"04electron_react/04_react_state/#leer-el-estado","title":"Leer el estado","text":"<p>Para leer el estado, utilizamos la variable que nos devuelve <code>useState</code>. En el ejemplo anterior, la variable que nos devuelve <code>useState</code> es <code>counter</code>:</p> <pre><code>&lt;h2 className=\"text-center\"&gt;Contador: {counter}&lt;/h2&gt;\n</code></pre>"},{"location":"04electron_react/04_react_state/#ejemplo-estado-utilizando-una-lista","title":"Ejemplo estado utilizando una lista","text":"<p>Vamos a crear un componente que muestre una lista de la compra. El componente tendr\u00e1 un formulario para a\u00f1adir productos, y un bot\u00f3n para eliminarlas.</p> src/renderer/src/component/GroceryList.jsx<pre><code>import { useState } from 'react'\n\nexport default function GroceryList() {\n  const [groceries, setGroceries] = useState([])\n\n  function handleSubmit(event) {\n    event.preventDefault()\n    const form = event.target\n    const input = form.elements['itemName']\n    if (input.value === '') return\n    const newList = [...groceries, input.value]\n    setGroceries(newList)\n    input.value = ''\n    input.focus()\n  }\n\n  function handleDelete(index) {\n    const newList = groceries.filter((value, i) =&gt; i !== index)\n    setGroceries(newList)\n  }\n\n  return (\n    &lt;div className=\"row gap-3\"&gt;\n      &lt;form className=\"input-group mb-3\" onSubmit={handleSubmit}&gt;\n        &lt;input name=\"itemName\" type=\"text\" className=\"form-control\" /&gt;\n        &lt;button className=\"btn btn-primary\" type=\"submit\"&gt;\n          A\u00f1adir\n        &lt;/button&gt;\n      &lt;/form&gt;\n      &lt;ul className=\"list-group\"&gt;\n        {groceries.map((grocery, index) =&gt; (\n          &lt;li className=\"list-group-item\" key={index}&gt;\n            &lt;span&gt;{grocery}&lt;/span&gt;\n            &lt;button className=\"btn btn-danger float-end\"\n                onClick={() =&gt; handleDelete(index)}&gt;\n              Eliminar\n            &lt;/button&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p>En este ejemplo, se define una variable de estado <code>groceries</code> que ser\u00e1 un array con las cadenas de texto de los productos. El estado inicial es un array vac\u00edo:</p> <pre><code>const [groceries, setGroceries] = useState([])\n</code></pre> <p>Cuando se env\u00eda el formulario, se captura con el controlador de eventos <code>onSubmit</code>, y pasa el control a nuestra funci\u00f3n <code>handleSubmit</code> que se a\u00f1ade un nuevo elemento al array:</p> <pre><code>function handleSubmit(event) {\n  event.preventDefault()\n  const form = event.target\n  const input = form.elements['itemName']\n  if (input.value === '') return\n  const newList = [...groceries, input.value]\n  setGroceries(newList)\n  input.value = ''\n  input.focus()\n}\n</code></pre> <ul> <li><code>event.preventDefault()</code> evita que se env\u00ede el formulario para poder manejarlo nosotros.</li> <li><code>const form = event.target</code> el evento incluye el elemento que lo ha disparado en la propiedad <code>target</code>.</li> <li><code>form.elements['itemName']</code> recogemos el elemento del formulario con el nombre <code>itemName</code>, en este caso hemos definido un <code>input</code> de texto.</li> <li><code>if (input.value === '') return</code> si el campo de texto est\u00e1 vac\u00edo, no tiene sentido a\u00f1adir el producto, por lo que se sale de la funci\u00f3n.</li> <li><code>const newList = [...groceries, input.value]</code> se crea un nuevo array, partiendo del original y a\u00f1adiendo el nuevo elemento, en este caso el valor del <code>input</code> de texto.</li> <li><code>setGroceries(newList)</code> se actualiza el estado con el nuevo array y se vuelve a renderizar el componente.</li> <li><code>input.value = ''</code> se vac\u00eda el campo de texto para poder introducir un nuevo producto.</li> <li><code>input.focus()</code> se devuelve el foco en el campo de texto para poder introducir un nuevo producto de forma m\u00e1s r\u00e1pida.</li> </ul> <p>Cuando se hace clic en el bot\u00f3n de eliminar, se elimina un elemento del array:</p> <pre><code>function handleDelete(index) {\n  const newList = groceries.filter((value, i) =&gt; i !== index)\n  setGroceries(newList)\n}\n</code></pre> <ul> <li> <p><code>const newList = groceries.filter((value, i) =&gt; i !== index)</code> se utiliza el m\u00e9todo <code>filter</code> para crear un nuevo array con todos los elementos menos el que se quiere eliminar.</p> <p>Recibe dos par\u00e1metros, aunque s\u00f3lo estamos utilizando el segundo, que es el \u00edndice del elemento que queremos borrar de la lista.</p> <p>El primer par\u00e1metro lo utilizar\u00edamos si nuestra lista tuviera identificadores \u00fanicos para cada elemento, y quisi\u00e9ramos eliminar el elemento con un identificador concreto.</p> <p><code>filter</code> tambi\u00e9n se suele utilizar para filtrar los elementos que cumplen una condici\u00f3n, por ejemplo, obtener elementos que contengan una cadena de texto concreta, o que tengan un valor num\u00e9rico mayor que un n\u00famero determinado.</p> </li> </ul> <p>Para renderizar la lista, utilizamos el m\u00e9todo <code>map</code>:</p> <pre><code>{groceries.map((grocery, index) =&gt; (\n    &lt;li className=\"list-group-item\" key={index}&gt;\n        &lt;span&gt;{grocery}&lt;/span&gt;\n        &lt;button className=\"btn btn-danger float-end\" onClick={() =&gt; handleDelete(index)}&gt;\n            Eliminar\n        &lt;/button&gt;\n    &lt;/li&gt;\n))}\n</code></pre> <p><code>map</code> recibe como par\u00e1metro una funci\u00f3n que se ejecutar\u00e1 por cada elemento del array. Esta funci\u00f3n recibe como par\u00e1metro el elemento del array, y el \u00edndice del elemento.</p> <p>En este ejemplo, la funci\u00f3n recibe como par\u00e1metro el producto, y el \u00edndice del producto. Por cada producto, se renderiza un elemento <code>li</code> con el nombre del producto, y un bot\u00f3n para eliminarlo.</p> <p>Es importante definir la propiedad <code>key</code>. Es necesaria para que React pueda identificar cada elemento de la lista, y poder actualizarla correctamente cuando se modifique el estado.</p>"},{"location":"04electron_react/04_react_state/#estados-entre-componentes","title":"Estados entre componentes","text":"<p>Para compartir estados entre componentes, podemos crear un componente que contenga el estado, y pasarlo como <code>props</code> a los componentes que lo necesiten.</p> <p>En el ejemplo anterior podemos extraer los elementos de la lista a un componente separado.</p> src/renderer/src/component/GroceryItem.jsx<pre><code>export default function GroceryItem({ grocery, index, handleDelete }) {\n  return (\n    &lt;li className=\"list-group-item\"&gt;\n      &lt;span&gt;{grocery}&lt;/span&gt;\n      &lt;button className=\"btn btn-danger float-end\" onClick={() =&gt; handleDelete(index)}&gt;\n        Eliminar\n      &lt;/button&gt;\n    &lt;/li&gt;\n  )\n}\n</code></pre> <p>Y utilizarlo en el componente <code>GroceryList</code>:</p> src/renderer/src/component/GroceryList.jsx<pre><code>  return (\n    &lt;div className=\"row gap-3\"&gt;\n      &lt;form className=\"input-group mb-3\" onSubmit={handleSubmit}&gt;\n        &lt;input name=\"itemName\" type=\"text\" className=\"form-control\" /&gt;\n        &lt;button className=\"btn btn-primary\" type=\"submit\"&gt;\n          A\u00f1adir\n        &lt;/button&gt;\n      &lt;/form&gt;\n      &lt;ul className=\"list-group\"&gt;\n        {groceries.map((grocery, index) =&gt; (\n          &lt;GroceryItem\n            key={index}\n            grocery={grocery}\n            index={index}\n            handleDelete={handleDelete} /&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n</code></pre> <p>De esta forma delegamos el comportamiento de cada elemento de la lista a un componente separado, y el componente <code>GroceryList</code> se encarga de gestionar el estado general de la lista.</p>"},{"location":"04electron_react/04_react_state/#dialogo-de-confirmacion","title":"Di\u00e1logo de confirmaci\u00f3n","text":"<p>Para eliminar un elemento de la lista, podemos utilizar un di\u00e1logo de confirmaci\u00f3n, podemos crear nuestro propio componente, o por ejemplo el <code>Modal</code> de Bootstrap. Para el ejemplo vamos a utilizar ipcRenderer para enviar un mensaje al proceso principal, y que este muestre el di\u00e1logo de confirmaci\u00f3n del sistema.</p> <p>En el proceso principal vamos a definir un manejador de eventos para el mensaje <code>openConfirmationDialog</code>:</p> src/main/index.js<pre><code>  ipcMain.handle('openConfirmationDialog', async (event, title, message) =&gt; {\n    const window = BrowserWindow.getFocusedWindow()\n    const result = await dialog.showMessageBox(window, {\n      type: 'warning',\n      title: title,\n      message: message,\n      buttons: ['S\u00ed', 'Cancelar'],\n      cancelId: 1,\n      defaultId: 0\n    })\n    console.log(result.res)\n    return result.response === 0\n  })\n</code></pre> <p>En el script de precarga definimos una funci\u00f3n <code>openConfirmationDialog</code> que env\u00eda un mensaje al proceso principal:</p> src/preload/index.js<pre><code>const api = {\n  openConfirmationDialog: (title, message) =&gt;\n    ipcRenderer.invoke('openConfirmationDialog', title, message)\n}\n</code></pre> <p>Por \u00faltimo, desde el componente <code>GroceryList</code> podemos utilizar la funci\u00f3n <code>openConfirmationDialog</code> para mostrar el di\u00e1logo de confirmaci\u00f3n:</p> src/renderer/src/component/GroceryList.jsx<pre><code>  async function handleDelete(index) {\n    await window.api.openConfirmationDialog(\n        groceries[index],\n        '\u00bfSeguro de que quieres eliminar este elemento?')\n      .then((confirmed) =&gt; {\n        if (confirmed) {\n          const newList = groceries.filter((_value, i) =&gt; i !== index)\n          setGroceries(newList)\n        }\n      })\n  }\n</code></pre>"},{"location":"04electron_react/04_react_state/#referencias","title":"Referencias","text":"<ul> <li>React | useState</li> </ul>"},{"location":"04electron_react/05_react_effect/","title":"4.5 Responder a cambios externos con  <code>useEffect</code>","text":"<p>Para responder a cambios externos en un componente funcional, podemos usar el hook <code>useEffect</code>. </p> <p><code>useEffect</code> es un hook que nos permite realizar reaccionar a cambios externos en componentes funcionales. Los cambios son operaciones que no afectan directamente al estado del componente, como la suscripci\u00f3n a eventos, la recuperaci\u00f3n de datos de una API, la manipulaci\u00f3n del DOM, etc.</p> <p><code>useEffect</code> se ejecuta despu\u00e9s de cada renderizado del componente, a menos que se especifique lo contrario. Puede ejecutarse solo una vez despu\u00e9s de que el componente se haya renderizado o cada vez que una dependencia cambie.</p>"},{"location":"04electron_react/05_react_effect/#inicializacion","title":"Inicializaci\u00f3n","text":"<p>Como primer argumento, <code>useEffect</code> recibe una funci\u00f3n que contiene la l\u00f3gica del efecto, es decir, la acci\u00f3n que queremos realizar.</p> <p>Por ejemplo, si queremos mostrar un mensaje en la consola cada vez que el componente se renderice, podemos hacer lo siguiente:</p> <pre><code>import React, { useEffect } from 'react';\n\nfunction App() {\n  useEffect(() =&gt; {\n    console.log('Componente renderizado');\n  }, []);\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Hola Mundo&lt;/h1&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>El segundo argumento de <code>useEffect</code> es una array de dependencias. Si el array est\u00e1 vac\u00edo, el efecto se ejecutar\u00e1 solo una vez despu\u00e9s de que el componente se haya renderizado en el DOM. Si el array contiene elementos, el efecto se ejecutar\u00e1 cada vez que uno de los elementos cambie.</p> <p>En el ejemplo anterior, hemos pasado un array vac\u00edo como segundo argumento, lo que significa que el efecto se ejecutar\u00e1 solo una vez despu\u00e9s de que el componente se haya renderizado en el DOM.</p> <pre><code>useEffect(() =&gt; {\n  // l\u00f3gica del efecto\n}, []);\n</code></pre> <p>La funci\u00f3n del primer argumento puede devolver otra funci\u00f3n que se ejecutar\u00e1 cuando el componente se desmonte. Esto se conoce como limpieza de efectos.</p> <pre><code>useEffect(() =&gt; {\n  // l\u00f3gica del efecto\n\n  return () =&gt; {\n    // Limpieza de efectos\n  }\n}, []);\n</code></pre>"},{"location":"04electron_react/05_react_effect/#actualizacion","title":"Actualizaci\u00f3n","text":"<p>Como hemos mencionado anteriormente, <code>useEffect</code> se ejecuta despu\u00e9s de cada renderizado, a menos que se especifique lo contrario con un array de dependencias.</p> <p>Posibles valores del array de dependencias:</p> <ul> <li><code>undefined</code> (sin array): el efecto se ejecuta despu\u00e9s de cada renderizado.</li> <li><code>[]</code> (array vac\u00edo): el efecto se ejecuta solo una vez despu\u00e9s de que el componente se haya renderizado.</li> <li><code>[valor1, valor2, ...]</code>: el efecto se ejecuta cada vez que uno de los valores cambie.</li> </ul> <p>Si queremos que el efecto se ejecute cada vez que el estado de un componente cambie, podemos pasar el estado como una dependencia en el array de dependencias. Por ejemplo, si queremos que el efecto se ejecute cada vez que el estado <code>count</code> cambie, podemos hacer lo siguiente:</p> <pre><code>import React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() =&gt; {\n    console.log(`Count: ${count}`);\n  }, [count]);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>En este ejemplo, hemos pasado el estado <code>count</code> como una dependencia en el array de dependencias. Esto significa que el efecto se ejecutar\u00e1 cada vez que el estado <code>count</code> cambie.</p> <pre><code>useEffect(() =&gt; {\n  // l\u00f3gica del efecto\n}, [count]);\n</code></pre>"},{"location":"04electron_react/05_react_effect/#limpieza-de-efectos","title":"Limpieza de efectos","text":"<p>Es importante limpiar los efectos cuando el componente se desmonta o se actualiza. Para hacer esto, podemos devolver una funci\u00f3n de limpieza en la configuraci\u00f3n. Esta funci\u00f3n se ejecutar\u00e1 cuando el componente se desmonte o se actualice.</p> <p>Si el efecto se ejecuta solo una vez, la funci\u00f3n de limpieza se ejecutar\u00e1 cuando el componente se desmonte. Si el efecto se ejecuta cada vez que una dependencia cambia, la funci\u00f3n de limpieza se ejecutar\u00e1 antes de que se ejecute el efecto la pr\u00f3xima vez.</p> <pre><code>import React, { useEffect } from 'react';\n\nfunction App() {\n  useEffect(() =&gt; {\n    const handleClick = (e) =&gt; {\n      console.log('Position: ', e.clientX, e.clientY)\n    }\n\n    document.addEventListener('click', handleClick)\n\n    return () =&gt; {\n      document.removeEventListener('click', handleClick)\n    }\n  }, [])\n\n  return (\n    &lt;button&gt;Click me&lt;/button&gt;\n  )\n}\n\nexport default App;\n</code></pre> <p>En este ejemplo, hemos creado una l\u00f3gica que escucha el evento <code>click</code> en el documento. Cuando el bot\u00f3n se hace clic, se muestra un mensaje en la consola.</p> <p>En el ejemplo anterior, hemos devuelto una funci\u00f3n de limpieza que elimina el evento <code>click</code> cuando el componente se desmonta. De esta manera, nos aseguramos de que no haya fugas de memoria ni eventos no deseados.</p>"},{"location":"04electron_react/05_react_effect/#ejemplo-completo","title":"Ejemplo completo","text":"<pre><code>import React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() =&gt; {\n    console.log(`Count: ${count}`);\n\n    return () =&gt; {\n      console.log('Componente desmontado');\n    }\n  }, [count]);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>En este ejemplo, hemos creado un contador que se incrementa cada vez que se hace clic en el bot\u00f3n. Hemos usado <code>useEffect</code> para mostrar el valor del contador en la consola cada vez que cambie. Tambi\u00e9n hemos devuelto una funci\u00f3n de limpieza que muestra un mensaje en la consola cuando el componente se desmonta.</p>"},{"location":"04electron_react/05_react_effect/#referencias","title":"Referencias","text":"<ul> <li>React - Sincronizar con Efectos</li> <li>React - useEffect</li> </ul>"},{"location":"04electron_react/06_react_router_redux/","title":"4.6 Estado global y rutas","text":""},{"location":"04electron_react/06_react_router_redux/#estado-global-con-redux","title":"Estado global con Redux","text":"<p>El estado global de una aplicaci\u00f3n es el conjunto de datos que se comparte entre todos los componentes de la aplicaci\u00f3n.</p> <p>A medida que una aplicaci\u00f3n crece, la gesti\u00f3n del estado se vuelve m\u00e1s complicada, ya que los componentes necesitan compartir datos y comunicarse entre s\u00ed, llevando a problemas de prop drilling.</p> <p>React incluye Context API para compartir datos entre componentes, pero no es suficiente para aplicaciones grandes y complejas. Para gestionar el estado de una aplicaci\u00f3n de forma eficiente, podemos utilizar Redux.</p> <p>Redux es una librer\u00eda de gesti\u00f3n de estado que nos permite almacenar y gestionar el estado de nuestra aplicaci\u00f3n de forma centralizada. Redux es muy \u00fatil en aplicaciones grandes y complejas, ya que facilita la gesti\u00f3n de los datos y la comunicaci\u00f3n entre componentes.</p>"},{"location":"04electron_react/06_react_router_redux/#conceptos-de-redux","title":"Conceptos de Redux","text":"<ul> <li>Almac\u00e9n (Store): El almac\u00e9n es un objeto que contiene todo el estado de la aplicaci\u00f3n.<ul> <li>Es la \u00fanica fuente para el estado y es inmutable.</li> <li>Los componentes obtienen y actualizan el estado solo a trav\u00e9s del almac\u00e9n.</li> </ul> </li> <li>Acciones (Actions): Las acciones son objetos que describen un cambio en el estado.<ul> <li>Cada acci\u00f3n debe tener un tipo \u00fanico que indica el tipo de cambio que se realizar\u00e1.</li> <li>Tambi\u00e9n, pueden llevar datos adicionales (como informaci\u00f3n sobre el cambio) en su propiedad payload.</li> </ul> </li> <li>Reductores (Reducers): Los reductores son funciones puras que toman el estado actual y una acci\u00f3n y devuelven un nuevo estado.<ul> <li>Los reductores definen c\u00f3mo debe cambiar el estado en funci\u00f3n del tipo de acci\u00f3n recibida.</li> <li>Deben ser inmutables y no tener efectos secundarios.</li> </ul> </li> </ul> <pre><code>flowchart LR\n    subgraph View/UI\n        V([Component])\n    end\n    subgraph Redux\n        direction RL\n        V --&gt; |dispatch| A\n        A([Action]) --&gt; R([Reducers])\n        R --&gt; S([Store])\n        S --&gt; |subscribe| V\n    end</code></pre> <p>La arquitectura de Redux sigue un flujo de datos unidireccional y predecible. Las acciones se env\u00edan a trav\u00e9s de los reductores, los cuales actualizan el estado en el almac\u00e9n. Luego, los componentes conectados reciben actualizaciones del almac\u00e9n y se vuelven a renderizar seg\u00fan sea necesario.</p>"},{"location":"04electron_react/06_react_router_redux/#instalacion","title":"Instalaci\u00f3n","text":"<p>Para a\u00f1adir Redux a nuestra aplicaci\u00f3n de React, necesitamos instalar las siguientes dependencias:</p> <ul> <li><code>@reduxjs/toolkit</code>: Es un conjunto de herramientas que facilitan la gesti\u00f3n de estado con Redux.</li> <li><code>react-redux</code>: Es una libeer\u00eda que nos permite conectar Redux con React.</li> </ul> <pre><code>$ npm install @reduxjs/toolkit react-redux\n</code></pre>"},{"location":"04electron_react/06_react_router_redux/#conceptos-clave-sobre-redux-toolkit","title":"Conceptos clave sobre Redux Toolkit","text":"<ul> <li>Slices: Un slice en Redux Toolkit es una combinaci\u00f3n de un reducer y acciones relacionadas en una entidad \u00fanica.<ul> <li>Cada slice representa una porci\u00f3n espec\u00edfica del estado global de la aplicaci\u00f3n.</li> <li>Los slices se crean utilizando la funci\u00f3n <code>createSlice</code>, que maneja la definici\u00f3n de acciones y el reductor correspondiente de manera m\u00e1s concisa.</li> </ul> </li> <li><code>createSlice</code>: Una funci\u00f3n que facilita la creaci\u00f3n de slices.<ul> <li>Toma un objeto de configuraci\u00f3n que incluye el nombre del slice, el estado inicial y las definiciones de acciones.</li> <li>Autom\u00e1ticamente genera un reducer y las acciones relacionadas.</li> </ul> </li> <li><code>configureStore</code>: Una funci\u00f3n que configura el store de Redux.<ul> <li>Permite combinar m\u00faltiples reducers.</li> </ul> </li> </ul>"},{"location":"04electron_react/06_react_router_redux/#conceptos-clave-sobre-react-redux","title":"Conceptos clave sobre react-redux","text":"<ul> <li>Provider: Un componente proporcionado por react-redux que se utiliza para envolver la aplicaci\u00f3n en el nivel superior.<ul> <li>Proporciona el store de Redux a todos los componentes descendientes, permiti\u00e9ndoles acceder al estado global y despachar acciones.</li> </ul> </li> <li><code>useSelector</code>: Un hook que permite a los componentes de React seleccionar porciones espec\u00edficas del estado global almacenado en el store de Redux.<ul> <li>Devuelve los datos seleccionados y se actualiza autom\u00e1ticamente cuando cambian.</li> </ul> </li> <li><code>useDispatch</code>: Un hook que proporciona acceso al dispatch del store de Redux.<ul> <li>Se utiliza para enviar acciones que modifican el estado global.</li> </ul> </li> </ul>"},{"location":"04electron_react/06_react_router_redux/#crear-un-slice","title":"Crear un slice","text":"<p>Vamos a crear tanto el store como los slices dentro de una nueva carpeta llamada <code>redux/</code> dentro de nuestro proyecto (<code>src/renderer/src/redux/</code>).</p> <p>Crearemos un nuevo archivo llamado <code>counter-slice.js</code> que contendr\u00e1 el siguiente c\u00f3digo:</p> src/renderer/src/redux/counter-slice.js<pre><code>import { createSlice } from '@reduxjs/toolkit'\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: { value: 0 },\n  reducers: {\n    increment: (state) =&gt; {\n      state.value += 1;\n    },\n    decrement: (state) =&gt; {\n      state.value -= 1;\n    },\n  },\n})\n\nexport const { increment, decrement } = counterSlice.actions\nexport default counterSlice.reducer\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo:</p> <ol> <li>Se importa la funci\u00f3n <code>createSlice</code> de <code>@reduxjs/toolkit</code>.</li> <li>Se utiliza <code>createSlice</code> para definir un slice llamado <code>counter</code>. Esto incluye:<ul> <li>el nombre del slice (<code>'counter'</code>)</li> <li>el estado inicial (<code>{ value: 0 }</code>)</li> <li>las definiciones de acciones (<code>increment</code> y <code>decrement</code>).</li> </ul> </li> <li>Dentro de las definiciones de acciones, se proporcionan funciones que actualizan el estado del slice.<ul> <li><code>increment</code> aumenta el valor del estado en <code>1</code>.</li> <li><code>decrement</code> lo disminuye en <code>1</code>.</li> </ul> </li> <li>Se exportan las acciones <code>increment</code> y <code>decrement</code> utilizando la notaci\u00f3n de desestructuraci\u00f3n. Estas acciones pueden ser importadas en otros archivos y utilizadas para despachar acciones.</li> <li> <p>Finalmente, se exporta el reducer del slice utilizando <code>counterSlice.reducer</code>.</p> <p>El reducer se utilizar\u00e1 m\u00e1s tarde para combinarlo con otros reductores y crear el store de Redux.</p> </li> </ol>"},{"location":"04electron_react/06_react_router_redux/#crear-un-nuevo-store","title":"Crear un nuevo store","text":"<p>Dentro de la carpeta <code>redux/</code> crearemos un nuevo archivo <code>store.js</code></p> src/renderer/src/redux/store.js<pre><code>import { configureStore } from '@reduxjs/toolkit'\nimport counterReducer from './counter-slice'\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n})\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo:</p> <ol> <li>Se importa la funci\u00f3n <code>configureStore</code> de <code>@reduxjs/toolkit</code>.</li> <li>Se importa <code>counterReducer</code> desde el archivo '<code>./counter-slice.js</code>'. Esto es el reductor que hemos definido previamente en el slice.</li> <li>Se configura el store de Redux utilizando <code>configureStore</code>. Esto implica combinar reducers en un solo lugar.</li> <li>Se exporta el store creado utilizando <code>export const store</code>. Esto permite que otros archivos de la aplicaci\u00f3n accedan y utilicen el store.</li> <li>En la configuraci\u00f3n del store, se especifica el reducer <code>counterReducer</code> bajo el campo <code>reducer</code>. Esto establece que el reductor <code>counterReducer</code> manejar\u00e1 el estado del slice llamado '<code>counter</code>'.</li> </ol>"},{"location":"04electron_react/06_react_router_redux/#integrar-el-store-en-la-aplicacion-mediante-un-provider","title":"Integrar el store en la aplicaci\u00f3n mediante un Provider","text":"<p>Para conectar Redux con React, necesitamos envolver nuestra aplicaci\u00f3n con el componente <code>Provider</code> de <code>react-redux</code> y pasarle el store como prop.</p> src/renderer/src/main.jsx<pre><code>import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  &lt;React.StrictMode&gt;\n    &lt;Provider store={store}&gt;\n      &lt;App /&gt;\n    &lt;/Provider&gt;\n  &lt;/React.StrictMode&gt;\n)\n</code></pre>"},{"location":"04electron_react/06_react_router_redux/#interactuar-con-el-store-desde-un-componente","title":"Interactuar con el store desde un componente","text":"<p>Para acceder al estado de Redux en un componente de React, podemos utilizar el hook <code>useSelector</code> de <code>react-redux</code>.</p> src/renderer/src/components/GlobalCounter.jsx<pre><code>import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { increment, decrement } from './redux/counter-slice';\n\nexport function GlobalCounter() {\n  const counter = useSelector((state) =&gt; state.counter.value)\n  const dispatch = useDispatch()\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Counter: {counter}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; dispatch(increment())}&gt;Increment&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch(decrement())}&gt;Decrement&lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo:</p> <ol> <li>Se importa React y los hooks <code>useSelector</code> y <code>useDispatch</code> de <code>react-redux</code>.<ul> <li><code>useSelector</code> se utiliza para seleccionar partes espec\u00edficas del estado global.</li> <li><code>useDispatch</code> se utiliza para acceder al despachador de acciones.</li> </ul> </li> <li>Se importan las acciones <code>increment</code> y <code>decrement</code> desde el archivo '<code>./redux/counter-slice</code>'. Estas acciones fueron exportadas previamente desde el slice.</li> <li>Se define un componente llamado <code>GlobalCounter</code>.</li> <li>Dentro del componente, se utiliza el hook <code>useSelector</code> para acceder al estado global y seleccionar el valor del contador desde el slice '<code>counter</code>'. El valor del contador se almacena en la variable <code>counter</code>.</li> <li>Se utiliza el hook <code>useDispatch</code> para obtener la funci\u00f3n de env\u00edo de acciones. La funci\u00f3n <code>dispatch</code> se utilizar\u00e1 para enviar las acciones <code>increment</code> y <code>decrement</code> al store de Redux.</li> <li>El componente renderiza un t\u00edtulo (<code>&lt;h2&gt;</code>) que muestra el valor del contador.</li> <li>Hay dos botones, uno para incrementar y otro para decrementar el contador. Cuando se hace clic en cualquiera de estos botones, se llama a la funci\u00f3n <code>dispatch</code> con la acci\u00f3n correspondiente (<code>increment()</code> o <code>decrement()</code>), lo que actualiza el estado global.</li> </ol>"},{"location":"04electron_react/06_react_router_redux/#rutas-con-react-router","title":"Rutas con React Router","text":"<p>react-router-dom es una librer\u00eda para crear aplicaciones de una sola p\u00e1gina (SPA) con React. Permite definir rutas para mostrar diferentes componentes y navegar entre ellos.</p> <p>Esto evita depender del proceso principal de Electron para navegar entre p\u00e1ginas.</p>"},{"location":"04electron_react/06_react_router_redux/#instalacion_1","title":"Instalaci\u00f3n","text":"<p>Para instalar la librer\u00eda, ejecutamos el siguiente comando:</p> <pre><code>npm install react-router-dom\n</code></pre>"},{"location":"04electron_react/06_react_router_redux/#uso-de-hashrouter","title":"Uso de HashRouter","text":"<p>El componente <code>**HashRouter**</code> debe envolver a todos los componentes que utilicen rutas.</p> <p>HashRouter vs BrowserRouter</p> <p>En un proyecto web, normalmente, se utiliza <code>BrowserRouter</code>, pero Electron, al pasar la aplicaci\u00f3n a producci\u00f3n, por seguridad tiene desactivado el historial de navegaci\u00f3n, por lo que no funciona correctamente.</p> src/renderer/src/App.jsx<pre><code>import { HashRouter, Route, Routes } from 'react-router-dom'\n\nimport AppList from './AppList'\nimport AppEditItem from './AppEditItem'\n\nexport default function App() {\n  return (\n    &lt;HashRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;AppList /&gt;} /&gt;\n        &lt;Route path=\"/:itemId\" element={&lt;AppEditItem /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/HashRouter&gt;\n  )\n}\n</code></pre> <p>En el ejemplo, el componente <code>HashRouter</code> envuelve a los componentes <code>AppList</code> y <code>AppEditItem</code>.</p> <p>El componente <code>Routes</code> que contiene las rutas de la aplicaci\u00f3n.</p> <p>Cada ruta se define con el componente <code>Route</code>, que tiene dos propiedades: <code>path</code> y <code>element</code>.</p> <p>La propiedad <code>path</code> define la ruta, y la propiedad <code>element</code> define el componente que se mostrar\u00e1 cuando se acceda a la ruta.</p> <p>Desde un componente se puede navegar a una ruta con el componente <code>Link</code> o <code>useNavigate</code>:</p> src/renderer/src/components/Item.jsx<pre><code>import { Link, useNavigate } from 'react-router-dom'\n\nexport default function Item({item}) {\n  const navigate = useNavigate()\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; navigate(`./${item.id}`)}&gt;Editar&lt;/button&gt;\n      &lt;Link to={`./${item.id}`}&gt;Editar&lt;/Link&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p>Desde el componente que recibe la ruta, se puede obtener el par\u00e1metro con el componente <code>useParams</code>:</p> src/renderer/src/components/Item.jsx<pre><code>import { useParams } from 'react-router-dom'\n\nexport default function Item() {\n  const { itemId } = useParams()\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Item {itemId}&lt;/h1&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"04electron_react/06_react_router_redux/#referencias","title":"Referencias","text":"<ul> <li>Redux</li> </ul>"},{"location":"04electron_react/ud4_act1/","title":"\u270d\ufe0f UD4 - Actividad 1: Introducci\u00f3n a React","text":"<p>Acepta la tarea en GitHub Classroom y clona el repositorio en tu m\u00e1quina local.</p> <ul> <li>https://classroom.github.com/a/sY6pQFzJ</li> </ul> <p>Realiza las actividades en los ficheros indicados y comprueba que funcionan correctamente.</p> <p>Warning</p> <p>Es importante evitar el uso de generadores de c\u00f3digo autom\u00e1tico para realizar las actividades.</p> <p>Si tienes dudas, consulta la documentaci\u00f3n o pide ayuda al profesor.</p> <p>En caso de existir duda ante la copia o el uso de herramientas de generaci\u00f3n de c\u00f3digo autom\u00e1tico, se pedir\u00e1 una explicaci\u00f3n detallada del c\u00f3digo por parte del alumnado implicado. En caso de no poder justificarlo, se considerar\u00e1 copia y se considerar\u00e1 la actividad como no realizada para las partes afectadas.</p> <p>Commit</p> <p>Haz al menos un commit por cada apartado.</p>"},{"location":"04electron_react/ud4_act1/#actividad","title":"Actividad","text":"<ol> <li>Crea un nuevo proyecto de React con Vite.</li> <li>Crea el componente <code>&lt;Titulo&gt;</code> que muestre el t\u00edtulo de la actividad.</li> <li>Crea el componente <code>&lt;Operacion&gt;</code> que reciba un dos n\u00fameros <code>n1</code> y <code>n2</code> y una operaci\u00f3n <code>op</code> (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>) y muestre la operaci\u00f3n junto con el resultado (\"3 + 2 = 5\").</li> <li>Crea un componente que reciba un n\u00famero <code>n</code> un m\u00e1ximo <code>max</code> y un m\u00ednimo <code>min</code> y genere una lista de <code>n</code> operaciones con n\u00fameros aleatorios entre <code>min</code> y <code>max</code> y operaciones aleatorias (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>) y muestre el resultado de cada operaci\u00f3n utilizando el componente <code>&lt;Operacion&gt;</code>.</li> <li>A\u00f1ade estilos a los componentes utilizando Bootstrap.</li> </ol>"},{"location":"04electron_react/ud4_act2/","title":"\u270d\ufe0f UD4 - Actividad 2: Estados y efectos en React","text":"<p>Acepta la tarea en GitHub Classroom y clona el repositorio en tu m\u00e1quina local.</p> <ul> <li>https://classroom.github.com/a/lpphGTXH</li> </ul> <p>Realiza las actividades en los ficheros indicados y comprueba que funcionan correctamente.</p> <p>Warning</p> <p>Es importante evitar el uso de generadores de c\u00f3digo autom\u00e1tico para realizar las actividades.</p> <p>Si tienes dudas, consulta la documentaci\u00f3n o pide ayuda al profesor.</p> <p>En caso de existir duda ante la copia o el uso de herramientas de generaci\u00f3n de c\u00f3digo autom\u00e1tico, se pedir\u00e1 una explicaci\u00f3n detallada del c\u00f3digo por parte del alumnado implicado. En caso de no poder justificarlo, se considerar\u00e1 copia y se considerar\u00e1 la actividad como no realizada para las partes afectadas.</p> <p>Commit</p> <p>Haz al menos un commit por cada apartado.</p>"},{"location":"04electron_react/ud4_act2/#actividad-efectos-y-estados","title":"Actividad, efectos y estados","text":"<ol> <li>Crea un nuevo proyecto de React con electron-vite.</li> <li>Crea un componente <code>&lt;ProductForm&gt;</code> que tenga un formulario con los campos <code>name</code>, <code>price</code> y <code>stock</code> y un bot\u00f3n para a\u00f1adir un producto. Utiliza el estado para almacenar los datos del formulario y validar los campos seg\u00fan las siguientes reglas:<ul> <li>El campo <code>name</code> es obligatorio.</li> <li>El campo <code>price</code> es obligatorio y debe ser un n\u00famero mayor que 0.</li> <li>El campo <code>stock</code> es obligatorio y debe ser un n\u00famero mayor o igual que 0.</li> </ul> </li> <li>Crea un componente <code>&lt;ProductList&gt;</code> que muestre una lista de productos con su nombre, precio y stock.</li> <li>Conecta los componentes <code>&lt;ProductForm&gt;</code> y <code>&lt;ProductList&gt;</code> para que al a\u00f1adir un producto en el formulario se muestre en la lista. Utiliza el estado para almacenar los productos.</li> <li>Cada vez que cambie el lista de productos en <code>&lt;ProductList&gt;</code>, guarda la lista en el localStorage.<ul> <li><code>localStorage.setItem('products', JSON.stringify(products))</code></li> </ul> </li> <li>Carga la lista de productos del localStorage al iniciar la aplicaci\u00f3n.<ul> <li><code>const products = JSON.parse(localStorage.getItem('products')) || []</code></li> </ul> </li> <li>A\u00f1ade un encabezado a <code>&lt;ProductList&gt;</code> con eventos para ordenar la lista por nombre, precio y stock al hacer clic en el encabezado.</li> <li>A\u00f1ade un bot\u00f3n a cada item de la lista de <code>&lt;ProductList&gt;</code> para eliminar un producto de la lista.</li> </ol>"},{"location":"04electron_react/ud4_act3/","title":"\u270d\ufe0f UD4 - Actividad 3: Rutas y estado global","text":"<p>Acepta la tarea en GitHub Classroom y clona el repositorio en tu m\u00e1quina local.</p> <ul> <li>https://classroom.github.com/a/skxdK4On</li> </ul> <p>Realiza las actividades en los ficheros indicados y comprueba que funcionan correctamente.</p> <p>Warning</p> <p>Es importante evitar el uso de generadores de c\u00f3digo autom\u00e1tico para realizar las actividades.</p> <p>Si tienes dudas, consulta la documentaci\u00f3n o pide ayuda al profesor.</p> <p>En caso de existir duda ante la copia o el uso de herramientas de generaci\u00f3n de c\u00f3digo autom\u00e1tico, se pedir\u00e1 una explicaci\u00f3n detallada del c\u00f3digo por parte del alumnado implicado. En caso de no poder justificarlo, se considerar\u00e1 copia y se considerar\u00e1 la actividad como no realizada para las partes afectadas.</p> <p>Commit</p> <p>Haz al menos un commit por cada apartado.</p>"},{"location":"04electron_react/ud4_act3/#actividad-estado-global","title":"Actividad estado global","text":"<ol> <li>Partiendo del proyecto de la actividad anterior, implementa un <code>store</code> global con Redux para almacenar el estado de la aplicaci\u00f3n, con un slice para gestionar la lista de productos, con las siguientes acciones:<ul> <li><code>createProduct(product)</code>: A\u00f1adir un producto a la lista.</li> <li><code>readProduct(id)</code>: Leer un producto de la lista.</li> <li><code>updateProduct(product)</code>: Actualizar un producto de la lista.</li> <li><code>deleteProduct(id)</code>: Eliminar un producto de la lista.</li> </ul> </li> <li>Integra el store en la aplicaci\u00f3n y realiza las operaciones CRUD en la lista de productos.</li> <li>Implementa un componente <code>ProductDetails</code> que muestre los detalles de un producto.</li> <li>Utiliza rutas para mostrar la lista de productos y los detalles de un producto.</li> </ol>"},{"location":"05electron_db/","title":"5 Aplicaciones Electron con Base de Datos","text":"<ul> <li>5.1 Arquitectura de datos y servicios</li> <li>5.2 API Rest</li> </ul>"},{"location":"05electron_db/01_architecture/","title":"5.1 Arquitectura de datos y servicios en una aplicaci\u00f3n Electron","text":"<p>Existen m\u00faltiples formas de implementar el almacenamiento de datos en una aplicaci\u00f3n, desde el uso de archivos locales, bases de datos relacionales, bases de datos no relacionales, hasta servicios de almacenamiento en la nube.</p> <p>En el caso de una aplicaci\u00f3n de escritorio con Electron, es com\u00fan utilizar bases de datos locales para almacenar datos de forma persistente, ya que permiten acceder a los datos sin necesidad de conexi\u00f3n a internet y ofrecen un rendimiento \u00f3ptimo para aplicaciones de este tipo, pero tambi\u00e9n es posible utilizar bases de datos en la nube o servicios de almacenamiento remoto.</p>"},{"location":"05electron_db/01_architecture/#crud","title":"CRUD","text":"<p>El acr\u00f3nimo CRUD (Create, Read, Update, Delete) se refiere a las operaciones b\u00e1sicas que se pueden realizar sobre los datos de una aplicaci\u00f3n:</p> <ul> <li>Create: Crear un nuevo registro.</li> <li>Read: Leer un registro existente.</li> <li>Update: Actualizar un registro existente.</li> <li>Delete: Eliminar un registro existente.</li> </ul> <p>Estas operaciones son fundamentales en cualquier aplicaci\u00f3n que maneje datos, ya que permiten interactuar con la informaci\u00f3n de forma completa.</p>"},{"location":"05electron_db/01_architecture/#repositorio-de-datos","title":"Repositorio de datos","text":"<p>Un repositorio de datos es una capa de abstracci\u00f3n que se encarga de interactuar con el almacenamiento de datos de la aplicaci\u00f3n. Su objetivo es encapsular la l\u00f3gica de acceso a los datos y proporcionar una interfaz sencilla y coherente para realizar operaciones CRUD sobre los datos.</p> <p>Mediante la creaci\u00f3n de un interfaz unificada para acceder a los datos, se facilita la gesti\u00f3n y mantenimiento de la capa de persistencia, ya que los componentes de la aplicaci\u00f3n no necesitan conocer los detalles de implementaci\u00f3n del almacenamiento de datos.</p> <p>En una aplicaci\u00f3n Electron los repositorios se implementan en el proceso principal y se comunican con los procesos de renderizado a trav\u00e9s del m\u00f3dulo <code>ipcMain</code> y <code>ipcRenderer</code>.</p>"},{"location":"05electron_db/01_architecture/#servicios-de-datos","title":"Servicios de datos","text":"<p>Los servicios de datos son m\u00f3dulos que encapsulan la l\u00f3gica de acceso a los datos y proporcionan una interfaz para interactuar con los repositorios de datos. Su objetivo es abstraer la complejidad de la capa de persistencia y ofrecer una interfaz sencilla y coherente para realizar operaciones CRUD sobre los datos.</p> <p>Implementa l\u00f3gica de negocio y reglas de acceso a los datos, c\u00f3mo validaciones, transformaciones, c\u00e1lculos, etc. Proporciona una capa de abstracci\u00f3n entre los componentes de la aplicaci\u00f3n y los repositorios de datos, permitiendo una mayor flexibilidad y reutilizaci\u00f3n del c\u00f3digo.</p> <p>En una aplicaci\u00f3n Electron los servicios de datos se implementan en el proceso renderizado y se comunican con los repositorios de datos a trav\u00e9s m\u00e9todos definidos en <code>preload</code>.</p>"},{"location":"05electron_db/01_architecture/#ejemplo","title":"Ejemplo","text":"<p>A continuaci\u00f3n se muestra un ejemplo de implementaci\u00f3n de un repositorio de datos y un servicio de datos en una aplicaci\u00f3n Electron:</p> <pre><code>graph LR\n  R(Repositorio de datos) --&gt; PP[Proceso principal]\n  PP --&gt; R\n  PP --&gt; PR((Preload))\n  PR --&gt; PP\n  PR --&gt; S(Servicio de datos)\n  S --&gt; PR\n  S &lt;--&gt; C(Componente)\n  SG((Estado global)) --&gt; C\n  S --&gt; SG</code></pre> <p>La idea es que el repositorio de datos se comunique con el proceso principal para realizar operaciones CRUD sobre los datos, y que el servicio de datos se comunique con el repositorio de datos a trav\u00e9s de <code>preload</code> para realizar operaciones de negocio y reglas de acceso a los datos.</p> <p>El componente se comunica con el servicio de datos para realizar operaciones CRUD sobre los datos, y el estado global se utiliza para compartir informaci\u00f3n entre los componentes de la aplicaci\u00f3n.</p> <p>Esta arquitectura, que en principio puede parecer compleja, ofrece una serie de ventajas:</p> <ul> <li>Separaci\u00f3n de responsabilidades: Cada capa de la aplicaci\u00f3n tiene una responsabilidad clara y definida, lo que facilita la comprensi\u00f3n y mantenimiento del c\u00f3digo.</li> <li>Reutilizaci\u00f3n de c\u00f3digo: Los servicios de datos y los repositorios de datos son m\u00f3dulos independientes que pueden ser reutilizados en diferentes partes de la aplicaci\u00f3n.</li> <li>Escalabilidad: La arquitectura propuesta es escalable y permite a\u00f1adir nuevas funcionalidades y componentes de forma sencilla.</li> <li>Testing: Al separar la l\u00f3gica de negocio de la capa de persistencia, se facilita la escritura de pruebas unitarias y de integraci\u00f3n.</li> <li>Flexibilidad: La arquitectura propuesta permite cambiar la capa de persistencia sin afectar a la l\u00f3gica de negocio, y viceversa.</li> </ul> <p>Por supuesto, esta arquitectura es solo una propuesta y puede ser adaptada y modificada seg\u00fan las necesidades y requisitos de la aplicaci\u00f3n. Lo importante es mantener una estructura clara y coherente que facilite el desarrollo y mantenimiento del c\u00f3digo.</p> <p>Un ejemplo de implementaci\u00f3n de un repositorio de datos, un servicio de datos y un componente en una aplicaci\u00f3n Electron se muestra a continuaci\u00f3n:</p>"},{"location":"05electron_db/01_architecture/#repositorio-de-datos_1","title":"Repositorio de datos","text":"main/repository/UserRepository.js<pre><code>// Repositorio de datos\nclass UserRepository {\n  constructor(db) {\n    this.db = db;\n  }\n\n  async create(user) {\n    // Implementaci\u00f3n de la operaci\u00f3n de creaci\u00f3n\n\n    // Ejemplo de uso de base de datos local\n    return await this.db.insert(user);\n\n    // Ejemplo de uso de fetch\n    return await fetch('http://localhost:3000/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    });\n  }\n\n  async read(id) {\n    // Implementaci\u00f3n de la operaci\u00f3n de lectura\n  }\n\n  async update(id, user) {\n    // Implementaci\u00f3n de la operaci\u00f3n de actualizaci\u00f3n\n  }\n\n  async delete(id) {\n    // Implementaci\u00f3n de la operaci\u00f3n de eliminaci\u00f3n\n  }\n}\n\nmodule.exports = UserRepository;\n</code></pre>"},{"location":"05electron_db/01_architecture/#proceso-principal","title":"Proceso principal","text":"main/main.js<pre><code>// Proceso principal\nconst { app, ipcMain } = require('electron');\nconst UserRepository = require('./repository/UserRepository');\n\napp.on('ready', () =&gt; {\n  const userRepository = new UserRepository();\n\n  ipcMain.handle('create-user', async (event, user) =&gt; {\n    return await userRepository.create(user);\n  });\n\n  ipcMain.handle('get-user', async (event, id) =&gt; {\n    return await userRepository.read(id);\n  });\n\n  ipcMain.handle('update-user', async (event, id, user) =&gt; {\n    return await userRepository.update(id, user);\n  });\n\n  ipcMain.handle('delete-user', async (event, id) =&gt; {\n    return await userRepository.delete(id);\n  });\n});\n</code></pre>"},{"location":"05electron_db/01_architecture/#preload-script","title":"Preload script","text":"preload/preload.js<pre><code>// Preload script\nconst { contextBridge, ipcRenderer } = require('electron');\n\ncontextBridge.exposeInMainWorld('api', {\n  createUser: (user) =&gt; ipcRenderer.invoke('create-user', user),\n  getUser: (id) =&gt; ipcRenderer.invoke('get-user', id),\n  updateUser: (id, user) =&gt; ipcRenderer.invoke('update-user', id, user),\n  deleteUser: (id) =&gt; ipcRenderer.invoke('delete-user', id),\n});\n</code></pre>"},{"location":"05electron_db/01_architecture/#servicio-de-datos","title":"Servicio de datos","text":"renderer/services/UserService.js<pre><code>// Servicio de datos\nclass UserService\n{\n  constructor() {\n    this.api = window.api;\n\n    // funci\u00f3n ficticia para obtener el estado global de la aplicaci\u00f3n\n    this.state = obtenerEstadoGlobalDeLaAplicaci\u00f3n();\n  }\n\n  async createUser(user) {\n    // Implementaci\u00f3n de la operaci\u00f3n de creaci\u00f3n de usuario\n\n    // validaciones\n    if (!user.name || !user.email) {\n      throw new Error('name and email are required');\n    }\n\n    this.state.showLoadingMessage('Creando usuario...');\n\n    // Ejemplo de uso de API REST\n\n    await this.api.createUser(user)\n      .then(result =&gt; {\n        // Manejo de la respuesta\n        console.log(result)\n       })\n      .catch(error =&gt; {\n        // Manejo del error\n        console.error(error)\n      })\n      .finally(() =&gt; {\n        // C\u00f3digo a ejecutar siempre\n        this.state.hideLoadingMessage();\n      });\n  }\n\n  async getUser(id) {\n    // Implementaci\u00f3n de la operaci\u00f3n de obtenci\u00f3n de usuario\n  }\n\n  async updateUser(id, user) {\n    // Implementaci\u00f3n de la operaci\u00f3n de actualizaci\u00f3n de usuario\n  }\n\n  async deleteUser(id) {\n    // Implementaci\u00f3n de la operaci\u00f3n de eliminaci\u00f3n de usuario\n  }\n}\n</code></pre>"},{"location":"05electron_db/01_architecture/#componente","title":"Componente","text":"renderer/components/UserForm.js<pre><code>// Componente UserForm\nexport default function UserForm() {\n  const userService = new UserService();\n\n  const handleSubmit = async (event) =&gt; {\n    event.preventDefault();\n\n    const user = {\n      name: event.target.name.value,\n      email: event.target.email.value,\n    };\n\n    try {\n      await userService.createUser(user);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input type=\"text\" name=\"name\" placeholder=\"Name\" /&gt;\n      &lt;input type=\"email\" name=\"email\" placeholder=\"Email\" /&gt;\n      &lt;button type=\"submit\"&gt;Create User&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre>"},{"location":"05electron_db/02_apirest/","title":"5.2 API REST","text":""},{"location":"05electron_db/02_apirest/#introduccion","title":"Introducci\u00f3n","text":"<p>Una API REST es una interfaz de programaci\u00f3n de aplicaciones que se basa en la arquitectura REST (Representational State Transfer). Es un estilo de arquitectura que se basa en la comunicaci\u00f3n a trav\u00e9s de HTTP, utilizando los m\u00e9todos de este protocolo para realizar operaciones CRUD (Create, Read, Update, Delete) sobre recursos.</p>"},{"location":"05electron_db/02_apirest/#metodos-http","title":"M\u00e9todos HTTP","text":"<p>Los m\u00e9todos HTTP m\u00e1s comunes utilizados en una API REST son:</p> <ul> <li><code>GET</code>: Obtiene un recurso o una colecci\u00f3n de recursos.</li> <li><code>POST</code>: Crea un nuevo recurso.</li> <li><code>PUT</code>: Actualiza un recurso.</li> <li><code>DELETE</code>: Elimina un recurso.</li> <li><code>PATCH</code>: Actualiza parcialmente un recurso.</li> </ul>"},{"location":"05electron_db/02_apirest/#endpoints","title":"Endpoints","text":"<p>Un endpoint es una URL que se utiliza para acceder a un recurso o a una colecci\u00f3n de recursos. Por ejemplo, si tenemos una API REST que gestiona usuarios, podr\u00edamos tener los siguientes endpoints:</p> <ul> <li><code>GET /users</code>: Obtiene todos los usuarios.</li> <li><code>GET /users/:id</code>: Obtiene un usuario por su ID.</li> <li><code>POST /users</code>: Crea un nuevo usuario.</li> <li><code>PUT /users/:id</code>: Actualiza un usuario por su ID.</li> <li><code>DELETE /users/:id</code>: Elimina un usuario por su ID.</li> </ul>"},{"location":"05electron_db/02_apirest/#autenticacion","title":"Autenticaci\u00f3n","text":"<p>La autenticaci\u00f3n es un aspecto importante en una API REST, ya que permite controlar el acceso a los recursos. Existen diferentes m\u00e9todos de autenticaci\u00f3n, c\u00f3mo por ejemplo:</p> <ul> <li>Basic Auth: Se env\u00edan las credenciales (usuario y contrase\u00f1a) en la cabecera de la petici\u00f3n. Es un m\u00e9todo sencillo pero muy poco seguro.</li> <li>API Key: Se env\u00eda una clave de API en la cabecera de la petici\u00f3n. Se utiliza para identificar a la aplicaci\u00f3n que realiza la petici\u00f3n. Debe ser secreta y \u00fanica para cada aplicaci\u00f3n.</li> <li>Bearer Token: Se env\u00eda un token de acceso en la cabecera de la petici\u00f3n. Se utiliza para identificar a un usuario autenticado. El token se obtiene mediante un proceso de autenticaci\u00f3n previo.</li> <li>JWT (JSON Web Token): Se env\u00eda un token codificado en la cabecera de la petici\u00f3n. Los JWT son tokens que contienen informaci\u00f3n codificada en formato JSON. Se utilizan para autenticar y autorizar a los usuarios.</li> <li>OAuth: Se utiliza un flujo de autorizaci\u00f3n para obtener un token de acceso. Se utiliza para delegar la autenticaci\u00f3n a un proveedor de identidad externo (Google, Facebook, etc.).</li> </ul>"},{"location":"05electron_db/02_apirest/#variables-de-entorno","title":"Variables de entorno","text":"<p>Las variables de entorno son valores que se utilizan en una aplicaci\u00f3n para configurar su comportamiento. Se utilizan para almacenar informaci\u00f3n sensible, c\u00f3mo claves de API (API keys), tokens de acceso, URLs de servicios, etc. y se acceden desde el c\u00f3digo de la aplicaci\u00f3n.</p> <p>Las variables de entorno se pueden configurar en un archivo <code>.env</code> en la ra\u00edz del proyecto. Este archivo se utiliza para almacenar las variables de entorno y se carga autom\u00e1ticamente en la aplicaci\u00f3n. Debemos tener en cuenta que las variables de entorno no deben ser compartidas ni subidas a un repositorio p\u00fablico, ya que pueden contener informaci\u00f3n sensible, para ello se debe a\u00f1adir el archivo <code>.env</code> al archivo <code>.gitignore</code>.</p> <p>En nuestro caso, <code>electron-vite</code> cargar\u00e1 variables de entorno desde la ra\u00edz del proyecto, y usar\u00e1 diferentes prefijos para limitar el alcance disponible.</p> <p>Por defecto, las variables con el prefijo <code>MAIN_VITE_</code> est\u00e1n disponibles para el proceso principal, <code>PRELOAD_VITE_</code> para los scripts de precarga, <code>RENDERER_VITE_</code> para los renderizadores y <code>VITE_</code> para todos.</p> .env<pre><code>KEY=123                # no disponible\nMAIN_VITE_KEY=123      # solo disponible para el proceso principal\nPRELOAD_VITE_KEY=123   # solo disponible para los scripts de precarga\nRENDERER_VITE_KEY=123  # solo disponible para los renderizadores\nVITE_KEY=123           # disponible para todos\n</code></pre> <p>Para recuperar una variable de entorno en el c\u00f3digo de la aplicaci\u00f3n, el objeto <code>process.env</code> se puede utilizar para acceder a las variables de entorno.</p> main/index.js<pre><code>console.log(process.env.MAIN_VITE_KEY);\nconsole.log(process.env.VITE_KEY);\n</code></pre>"},{"location":"05electron_db/02_apirest/#fetch","title":"fetch()","text":"<p><code>fetch()</code> es una funci\u00f3n de JavaScript que se utiliza para realizar peticiones HTTP. Es una API moderna que proporciona una interfaz sencilla y potente para realizar solicitudes de red. <code>fetch()</code> devuelve una promesa que resuelve la respuesta de la petici\u00f3n.</p>"},{"location":"05electron_db/02_apirest/#sintaxis","title":"Sintaxis","text":"<pre><code>fetch(url, options)\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.error(error));\n</code></pre> <p>Descripci\u00f3n de los elementos de la sintaxis:</p> <ul> <li><code>fetch()</code>: Funci\u00f3n para realizar una petici\u00f3n HTTP.</li> <li><code>url</code>: URL de la petici\u00f3n.</li> <li> <p><code>options</code>: Opciones de la petici\u00f3n (m\u00e9todo, cabeceras, cuerpo, etc.).</p> Ejemplo de opciones<pre><code>{\n  method: 'GET', // 'POST', 'PUT', 'DELETE', etc.\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization: 'Bearer TOKEN'\n    'x-api-key': 'API_KEY'\n    // ...\n  },\n  body: JSON.stringify(data)\n}\n</code></pre> </li> <li> <p><code>then()</code>: M\u00e9todo para manejar la respuesta de la petici\u00f3n.</p> </li> <li><code>catch()</code>: M\u00e9todo para manejar los errores de la petici\u00f3n.</li> <li><code>data</code>: Datos de la respuesta de la petici\u00f3n.</li> <li><code>error</code>: Error de la petici\u00f3n.</li> <li><code>response</code>: Objeto de la respuesta de la petici\u00f3n (cabeceras, estado, etc.).<ul> <li><code>response.ok</code>: Propiedad que indica si la petici\u00f3n fue exitosa (c\u00f3digo de estado 200-299).</li> <li><code>response.status</code>: C\u00f3digo de estado de la respuesta. (200, 404, 500, etc.)</li> <li><code>response.statusText</code>: Mensaje de estado de la respuesta. (\"OK\", \"Not Found\", \"Internal Server Error\", etc.)</li> <li><code>response.headers</code>: Cabeceras de la respuesta. (Objeto con las cabeceras)<ul> <li>Ejemplo: <code>response.headers.get('Content-Type')</code></li> </ul> </li> <li><code>response.text()</code>: M\u00e9todo para obtener el cuerpo de la respuesta en formato texto.</li> <li><code>response.json()</code>: M\u00e9todo para obtener el cuerpo de la respuesta en formato JSON.</li> </ul> </li> </ul>"},{"location":"05electron_db/02_apirest/#ejemplo-de-uso","title":"Ejemplo de uso","text":"<p>En el repositorio https://github.com/jsanvil/din25-events-api se encuentra la documentaci\u00f3n de una API REST que gestiona eventos. En este repositorio se pueden encontrar los endpoints disponibles, as\u00ed c\u00f3mo ejemplos de uso de la API.</p> <p>API de eventos</p> <p>La API puede no estar disponible en todo momento y puede tener un l\u00edmite de peticiones, por lo que debemos configurar nuestras aplicaciones para manejar errores y reintentar las peticiones en caso de fallo, informando al usuario de la situaci\u00f3n.</p>"},{"location":"05electron_db/02_apirest/#api-url","title":"API URL","text":"<ul> <li>https://din25-events.jacinto-sanchez.workers.dev/api/v1/events</li> </ul>"},{"location":"05electron_db/02_apirest/#endpoints_1","title":"Endpoints","text":"<ul> <li><code>GET /api/v1/events</code>: Obtener lista de eventos. Soporta par\u00e1metros de consulta para b\u00fasqueda, filtrado por fecha, paginaci\u00f3n y ordenaci\u00f3n. (Ver abajo)</li> <li><code>GET /api/v1/events/:id</code>: Obtener un evento por id.</li> <li><code>POST /api/v1/events</code>: Crear un nuevo evento.</li> <li><code>PUT /api/v1/events/:id</code>: Actualizar un evento por id.</li> <li><code>DELETE /api/v1/events/:id</code>: Eliminar un evento por id.</li> </ul>"},{"location":"05electron_db/02_apirest/#esquema-del-evento","title":"Esquema del evento","text":"<pre><code>{\n  \"id\": \"EVENT_ID\",\n  \"title\": \"Event Title\",\n  \"description\": \"Event Description\",\n  \"location\": \"Event Location\",\n  \"date\": \"2025-01-01 00:00\",\n  \"price\": 0.0,\n  \"image\": \"https://example.com/image.jpg\"\n}\n</code></pre>"},{"location":"05electron_db/02_apirest/#parametros-de-consulta","title":"Par\u00e1metros de consulta","text":"<ul> <li>Filtros:<ul> <li><code>search</code>: Buscar eventos que contengan la cadena dada en el nombre o descripci\u00f3n.</li> <li><code>min_date</code>: Filtrar eventos por fecha m\u00ednima. (Fecha en formato ISO 8601 o marca de tiempo Unix)</li> <li><code>max_date</code>: Filtrar eventos por fecha m\u00e1xima. (Fecha en formato ISO 8601 o marca de tiempo Unix)</li> </ul> </li> <li>Paginaci\u00f3n:<ul> <li><code>limit</code>: Limitar el n\u00famero de eventos devueltos. (Entero entre 1 y 10)</li> <li><code>offset</code>: Desplazar el n\u00famero de eventos devueltos. (Entero &gt;= 0)</li> </ul> </li> <li>Ordenar:<ul> <li><code>sort</code>: Ordenar eventos por un campo. (Cadena) \"title\" | \"location\" | \"date\" | \"price\"</li> <li><code>order</code>: Ordenar eventos por un campo. (Cadena) \"asc\" | \"desc\"</li> </ul> </li> </ul> <p>Ejemplos:</p> <ul> <li><code>GET /api/v1/events?search=Event</code>: Buscar eventos que contengan la cadena \"Event\".</li> <li><code>GET /api/v1/events?min_date=2025-01-01</code>: Filtrar eventos por fecha m\u00ednima.</li> <li><code>GET /api/v1/events?max_date=2025-12-31</code>: Filtrar eventos por fecha m\u00e1xima.</li> <li><code>GET /api/v1/events?min_date=2025-01-01&amp;max_date=2025-12-31</code>: Filtrar eventos por fecha m\u00ednima y m\u00e1xima.</li> <li><code>GET /api/v1/events?search=Event&amp;min_date=2025-01-01</code>: Buscar eventos que contengan la cadena \"Event\" y filtrar por fecha m\u00ednima.</li> <li><code>GET /api/v1/events?limit=10&amp;offset=0</code>: Limitar el n\u00famero de eventos devueltos y desplazar los resultados.</li> <li><code>GET /api/v1/events?sort=title&amp;order=asc</code>: Ordenar eventos por t\u00edtulo en orden ascendente.</li> <li><code>GET /api/v1/events?sort=date&amp;order=desc</code>: Ordenar eventos por fecha en orden descendente.</li> <li><code>GET /api/v1/events?search=Event&amp;min_date=2025-01-01&amp;limit=10&amp;offset=0&amp;sort=title&amp;order=asc</code>: Buscar eventos que contengan la cadena \"Event\", filtrar por fecha m\u00ednima, limitar el n\u00famero de eventos devueltos, desplazar los resultados, ordenar por t\u00edtulo en orden ascendente.</li> </ul>"},{"location":"05electron_db/02_apirest/#autenticacion_1","title":"Autenticaci\u00f3n","text":"<p>Se requiere autenticaci\u00f3n mediante token en el header para todas las solicitudes.</p> <p><code>x-api-key</code>: Clave API para autenticaci\u00f3n.</p> <p>\ud83d\udd10 Una <code>API_KEY</code> v\u00e1lida estar\u00e1 disponible en el Moodle de los estudiantes.</p> <p>Ejemplo:</p> <pre><code>curl -X POST https://din25-events.jacinto-sanchez.workers.dev/api/v1/events \\\n-H \"x-api-key: API_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"title\": \"New Event\", \"description\": \"This is a new event.\", \"location\": \"New Location\", \"date\": \"2025-01-01\", \"price\": 0}'\n</code></pre> <pre><code>fetch(\n  'https://din25-events.jacinto-sanchez.workers.dev/api/v1/events',\n  {\n    method: 'POST',\n    headers: {\n      'x-api-key': 'API-KEY',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      title: 'New Event',\n      description: 'This is a new event.',\n      location: 'New Location',\n      date: '2025-01-01',\n      price: 0\n    })\n  })\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.error(error));\n</code></pre>"},{"location":"proyectos/01_watchlist/","title":"Proyecto 1 - Lista de seguimiento","text":"<p>El objetivo de este proyecto es crear una aplicaci\u00f3n en Electron que permita gestionar una lista de seguimiento de libros, juegos y pel\u00edculas. La aplicaci\u00f3n debe permitir a\u00f1adir, editar, eliminar y filtrar elementos de la lista. Adem\u00e1s, se debe poder guardar y cargar la lista en un fichero json.</p> <ul> <li>Tendr\u00e1 un peso del 70% sobre la calificaci\u00f3n de la primera evaluaci\u00f3n.</li> <li>Fecha l\u00edmite de entrega 04/12/2024 a las 23:59. (modificado)</li> <li>GitHub Classroom: https://classroom.github.com/a/jeAbMzt9</li> </ul>"},{"location":"proyectos/01_watchlist/#requisitos","title":"Requisitos","text":"<ul> <li>Estructura del proyecto.<ul> <li>El proyecto debe estar bien estructurado en archivos HTML, JS y CSS.</li> <li>Separar el c\u00f3digo en m\u00f3dulos bien definidos mediante import y export.</li> <li>En la l\u00f3gica de la aplicaci\u00f3n, no utilizar frameworks o librer\u00edas externas a los proporcionados por Node.js y Electron.</li> <li>Se podr\u00e1n utilizar librer\u00edas de estilos. (Bootstrap, Materialize, etc.)</li> <li>C\u00f3digo estructurado. Las variables, clases y funciones est\u00e1n bien comentadas. Los nombres de las clases, funciones y variables son descriptivos.</li> <li>Utilizar clases para representar los elementos de la colecci\u00f3n y la lista.</li> <li>Los elementos tendr\u00e1n los siguientes atributos:<ul> <li><code>Name</code>. Obligatorio. M\u00e1ximo 50 caracteres. </li> <li><code>Type</code>. <code>book</code>, <code>game</code>, <code>movie</code>.</li> <li><code>Status</code>. <code>completed</code>, <code>in_progress</code>, <code>pending</code>. Por defecto, <code>pending</code>.</li> <li><code>Rating</code>. Calificaci\u00f3n del 1 al 5. Si es 0 se considera sin calificar.</li> <li><code>Notes</code>. M\u00e1ximo 200 caracteres.</li> </ul> </li> </ul> </li> <li>Funcionalidades:<ul> <li>Listado de elementos.<ul> <li>El estado se debe representar con colores y/o iconos.</li> <li>Los cambios en los elementos deben actualizar la lista autom\u00e1ticamente.</li> <li>Los elementos de la lista deben mostrar los siguientes atributos:<ul> <li>Nombre.</li> <li>Tipo. Icono o texto.</li> <li>Estado. Icono o texto.</li> <li>Calificaci\u00f3n.</li> </ul> </li> <li>Los elementos deben tener tres opciones: editar, cambiar estado y eliminar.<ul> <li>Cambiar estado. Se debe actualizar la lista al cambiar el estado.</li> <li>Eliminar. Debe pedir confirmaci\u00f3n al usuario. Se debe actualizar la lista al eliminar un elemento.</li> <li>Editar. Mostrar\u00e1 una vista ampliada con todos los atributos del elemento.</li> </ul> </li> </ul> </li> <li>A\u00f1adir nuevo elemento. Mostrar\u00e1 un formulario vac\u00edo con los campos del elemento. Se debe validar el formulario y mostrar todos los errores.</li> <li>Editar elemento. Mostrar\u00e1 un formulario con los campos del elemento con los valores actuales.<ul> <li>Tendr\u00e1 una opci\u00f3n para cancelar la edici\u00f3n.</li> <li>Si hay cambios y se cancela la edici\u00f3n, se debe pedir confirmaci\u00f3n al usuario.</li> <li>Se debe validar el formulario y mostrar todos los errores antes de guardar los cambios.</li> </ul> </li> <li>Filtros. Se deben poder combinar varios filtros.<ul> <li>Tipo. <code>book</code>, <code>game</code>, <code>movie</code>.</li> <li>Estado. <code>completed</code>, <code>in_progress</code>, <code>pending</code>.</li> <li>Calificaci\u00f3n. M\u00ednimo y m\u00e1ximo (1-5).</li> <li>B\u00fasqueda. Campo de texto.<ul> <li>Filtra el listado seg\u00fan se escribe.</li> <li>Si el texto est\u00e1 contenido en <code>name</code> o <code>notes</code>, se mostrar\u00e1 el elemento.</li> </ul> </li> <li>Bot\u00f3n para limpiar filtros.</li> </ul> </li> <li>Ordenar elementos, en orden ascendiente y descendiente, por los siguientes atributos:<ul> <li>Estado.</li> <li>Nombre.</li> <li>Calificaci\u00f3n.</li> </ul> </li> <li>Persistencia. Leer y escribir la lista de seguimiento en un fichero json.<ul> <li>Se debe guardar la lista al realizar cambios.</li> <li>Se debe cargar la lista al abrir la aplicaci\u00f3n.</li> <li>Las operaciones se deben realizar en segundo plano, sin bloquear la interfaz, y mostrar un mensaje de \u00e9xito o error.</li> </ul> </li> </ul> </li> <li>Documentaci\u00f3n. Incluir fichero <code>README.md</code> en la ra\u00edz del proyecto con la siguiente informaci\u00f3n:<ul> <li>Nombre del proyecto.</li> <li>Nombre y apellidos.</li> <li>Detalles de implementaci\u00f3n, decisiones y problemas encontrados.</li> </ul> </li> <li>Seguimiento<ul> <li>El repositorio de GitHub Classroom debe reflejar el progreso.</li> <li>Se deben realizar al menos 10 commits.</li> <li>Los commits deben se concisos e informativos.</li> <li>Durante el desarrollo del proyecto, se realizar\u00e1n reuniones de seguimiento para comprobar el progreso.</li> </ul> </li> </ul>"},{"location":"proyectos/01_watchlist/#evaluacion","title":"Evaluaci\u00f3n","text":"<p>Para la evaluaci\u00f3n del proyecto se tendr\u00e1n en cuenta los siguientes ponderaciones teniendo en cuenta el alcance de los requisitos:</p> <ul> <li>5% Estructura del proyecto</li> <li>85% Funcionalidades<ul> <li>25% Listado de elementos<ul> <li>10% Mostrar</li> <li>5% Cambiar estado</li> <li>5% Eliminar</li> <li>5% Editar</li> </ul> </li> <li>10% A\u00f1adir</li> <li>15% Editar</li> <li>15% Filtros</li> <li>10% Ordenar</li> <li>10% Persistencia</li> </ul> </li> <li>5% Documentaci\u00f3n</li> <li>5% Seguimiento</li> </ul> <p>Se evaluar\u00e1 en modo desarrollo y la aplicaci\u00f3n debe poder abrirse sin errores de inicio.</p> <p>Se aceptar\u00e1n entregas tard\u00edas con una penalizaci\u00f3n del 10% por d\u00eda.</p>"},{"location":"proyectos/02_events/","title":"Proyecto 2 - Gesti\u00f3n de eventos","text":"<p>El objetivo de este proyecto es crear una aplicaci\u00f3n en Electron que permita gestionar eventos sociales (conciertos, exposiciones, conferencias, quedadas, talleres, etc.).</p> <p>El proceso de creaci\u00f3n de eventos sociales es una tarea que requiere de una buena organizaci\u00f3n y planificaci\u00f3n. La aplicaci\u00f3n permitir\u00e1 a los usuarios crear, editar, listar, eliminar y filtrar eventos.</p> <p>Se plantear\u00e1n una serie de requisitos y funcionalidades que deber\u00e1n ser implementados en la aplicaci\u00f3n.</p> <ul> <li>Tendr\u00e1 un peso del 70% sobre la calificaci\u00f3n de la segunda evaluaci\u00f3n.</li> <li>Fecha l\u00edmite de entrega 21/02/2025 a las 23:59.</li> <li>GitHub Classroom: https://classroom.github.com/a/4e3M9n71</li> </ul>"},{"location":"proyectos/02_events/#metodologia","title":"Metodolog\u00eda","text":"<ul> <li>Metodolog\u00eda \u00e1gil. Se utilizar\u00e1n metodolog\u00edas \u00e1giles para el desarrollo del proyecto.<ul> <li>Sprints. Se dividir\u00e1 el proyecto en sprints de una semana.</li> <li>Sprint Review. Reuniones al final de cada sprint para revisar el trabajo realizado.</li> </ul> </li> <li>Documentaci\u00f3n.<ul> <li>Se deber\u00e1 incluir un fichero <code>README.md</code> en el repositorio con los detalles del proyecto.</li> <li>Incluir comentarios al menos en la cabecera de cada uno de los componentes.</li> </ul> </li> <li>C\u00f3digo. Se deber\u00e1 seguir una estructura de c\u00f3digo clara y organizada.<ul> <li>Repositorio. Utilizar un repositorio de GitHub para el control de versiones.<ul> <li>Marcar con tags (etiquetas) los commits de cada sprint.</li> </ul> </li> <li>Estilo.<ul> <li>Se deber\u00e1 seguir un estilo de c\u00f3digo limpio y ordenado.</li> <li>Nombres descriptivos y claros.</li> <li>Los nombres de las clases, funciones y variables deber\u00e1n estar en ingl\u00e9s.</li> </ul> </li> </ul> </li> <li>Persistencia.<ul> <li>Utilizar una base de datos externa.</li> <li>Se deber\u00e1 guardar guardar las preferencias de usuario de forma local.</li> </ul> </li> <li>Dise\u00f1o.<ul> <li>La interfaz deber\u00e1 seguir un dise\u00f1o consistente, limpio y atractivo.</li> <li>Realizar un boceto previo de cada una de las vistas de la aplicaci\u00f3n.</li> <li>Utilizar librer\u00edas de componentes.</li> </ul> </li> <li>Usabilidad. Se deben seguir principios b\u00e1sicos de usabilidad, justificando las decisiones tomadas en una secci\u00f3n del <code>README.md</code>.</li> <li>Accesibilidad.<ul> <li>Usar lenguaje claro y sencillo.</li> <li>Utilizar colores, contrastes y tama\u00f1os de letra adecuados.</li> <li>Implementar sistema de navegaci\u00f3n mediante teclado.</li> <li>Implementar sistema sistema de localizaci\u00f3n y cambio de idioma.</li> </ul> </li> </ul>"},{"location":"proyectos/02_events/#sprint-1-creacion-de-proyecto-y-componentes","title":"Sprint 1 - Creaci\u00f3n de proyecto y componentes","text":"<p>(13/01/2025 - 19/01/2025)</p> <ul> <li>Crear nuevo proyecto utilizando electron-vite.</li> <li>El modelo de datos de un evento (<code>EventItem</code>) contendr\u00e1 los siguientes atributos:<ul> <li><code>id</code>: Cadena de texto \u00fanica generada autom\u00e1ticamente.</li> <li><code>title</code>: Cadena de texto. M\u00e1ximo 50 caracteres. Obligatorio.</li> <li><code>description</code>: Cadena de texto. M\u00e1ximo 200 caracteres.</li> <li><code>location</code>: Cadena de texto. M\u00e1ximo 100 caracteres. Obligatorio.</li> <li><code>date</code>: Fecha y hora del evento. Obligatorio. Por defecto, una semana despu\u00e9s de la fecha actual.</li> <li><code>price</code>: N\u00famero decimal. Precio del evento, en euros. Por defecto, 0 (gratuito). Obligatorio.</li> <li><code>image</code>: Cadena de texto con la URL de la imagen.</li> </ul> </li> <li>Utiliza Redux para gestionar el estado de la aplicaci\u00f3n.</li> <li>Crear los siguientes componentes y vistas:<ul> <li><code>EventDetail</code>: Vista detallada de un evento. Mostrar\u00e1 todos los atributos del evento.</li> <li><code>EventList</code>: Muestra la lista de eventos.<ul> <li>Limitar la lista a 10 elementos y a\u00f1adir un bot\u00f3n para cargar m\u00e1s eventos.</li> <li><code>EventListItem</code>: Vista de un elemento de la lista de eventos.<ul> <li>Mostrar\u00e1 el t\u00edtulo, imagen, fecha y precio del evento.</li> <li>Al hacer clic en un elemento, se mostrar\u00e1 la vista detallada del evento.</li> <li>A\u00f1adir un bot\u00f3n para editar y eliminar el evento.</li> <li>Indicar con un icono las siguientes caracter\u00edsticas:<ul> <li>Si el evento es gratuito.</li> <li>Si el evento ha caducado, tiene fecha anterior a la actual.</li> <li>Si el evento est\u00e1 pr\u00f3ximo, en los pr\u00f3ximos 7 d\u00edas.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"proyectos/02_events/#sprint-2-editar-detalles-navegacion-filtros","title":"Sprint 2 - Editar, detalles, navegaci\u00f3n, filtros","text":"<p>(20/01/2025 - 26/01/2025)</p> <ul> <li>Utiliza React Router para la navegaci\u00f3n entre las vistas.</li> <li>Nuevos componentes:<ul> <li><code>EventCreate</code>: Formulario para crear un evento.</li> <li><code>EventEdit</code>: Formulario para editar un evento.</li> <li><code>EventListFilter</code>: Filtros para la lista de eventos. Mostrar\u00e1 el n\u00famero de eventos que cumplen los filtros.<ul> <li>Buscar por nombre, case insensitive y que contenga el texto.</li> <li>Filtrar por periodo de fechas.</li> </ul> </li> </ul> </li> </ul>"},{"location":"proyectos/02_events/#sprint-3-persistencia-y-preferencias","title":"Sprint 3 - Persistencia y preferencias","text":"<p>(27/01/2025 - 02/02/2025)</p> <ul> <li>Persistencia de datos en almacenamiento local.<ul> <li>Guardar y cargar la lista de eventos en un fichero JSON almacenado en el perfil de usuario.</li> <li>Operaciones en segundo plano.</li> </ul> </li> <li>Guardar las preferencias de usuario de forma local.<ul> <li>Filtros aplicados.</li> <li>Orden de la lista de eventos.</li> </ul> </li> </ul>"},{"location":"proyectos/02_events/#sprint-4-integracion-con-api-de-eventos","title":"Sprint 4 - Integraci\u00f3n con API de eventos","text":"<p>(03/02/2025 - 09/02/2025)</p> <p>Integrar llamadas a una API de eventos.</p> <p>En este punto, puedes migrar la persistencia de datos a la API o mantener la persistencia local y utilizar la API c\u00f3mo fuente de datos.</p> <p>Consultar repositorio: https://github.com/jsanvil/din25-events-api para m\u00e1s informaci\u00f3n. <code>API_KEY</code> en Aules</p> <p>El repositorio contiene una API de eventos que se puede utilizar para obtener eventos de ejemplo. No hace falta implementar la API, solo consumirla, pero tienes la opci\u00f3n de implementar tu propia API.</p> <p>API de eventos</p> <p>La API puede no estar disponible en todo momento y puede tener un l\u00edmite de peticiones.</p> <p>Implementar llamadas a la API desde el proceso principal de Electron y almacenar los eventos en el estado de la aplicaci\u00f3n para mostrarlos en la lista.</p>"},{"location":"proyectos/02_events/#api-url","title":"API URL","text":"<ul> <li>https://din25-events.jacinto-sanchez.workers.dev/api/v1/events</li> </ul>"},{"location":"proyectos/02_events/#endpoints","title":"Endpoints","text":"<ul> <li><code>GET /api/v1/events</code>: Obtener lista de eventos. Soporta par\u00e1metros de consulta para b\u00fasqueda, filtrado por fecha, paginaci\u00f3n y ordenaci\u00f3n. (Ver abajo)</li> <li><code>GET /api/v1/events/:id</code>: Obtener un evento por id.</li> <li><code>POST /api/v1/events</code>: Crear un nuevo evento.</li> <li><code>PUT /api/v1/events/:id</code>: Actualizar un evento por id.</li> <li><code>DELETE /api/v1/events/:id</code>: Eliminar un evento por id.</li> </ul>"},{"location":"proyectos/02_events/#esquema-del-evento","title":"Esquema del evento","text":"<pre><code>{\n  \"id\": \"EVENT_ID\",\n  \"title\": \"Event Title\",\n  \"description\": \"Event Description\",\n  \"location\": \"Event Location\",\n  \"date\": \"2025-01-01 00:00\",\n  \"price\": 0.0,\n  \"image\": \"https://example.com/image.jpg\"\n}\n</code></pre>"},{"location":"proyectos/02_events/#parametros-de-consulta","title":"Par\u00e1metros de consulta","text":"<ul> <li>Filtros:<ul> <li><code>search</code>: Buscar eventos que contengan la cadena dada en el nombre o descripci\u00f3n.</li> <li><code>min_date</code>: Filtrar eventos por fecha m\u00ednima. (Fecha en formato ISO 8601 o marca de tiempo Unix)</li> <li><code>max_date</code>: Filtrar eventos por fecha m\u00e1xima. (Fecha en formato ISO 8601 o marca de tiempo Unix)</li> </ul> </li> <li>Paginaci\u00f3n:<ul> <li><code>limit</code>: Limitar el n\u00famero de eventos devueltos. (Entero entre 1 y 10)</li> <li><code>offset</code>: Desplazar el n\u00famero de eventos devueltos. (Entero &gt;= 0)</li> </ul> </li> <li>Ordenar:<ul> <li><code>sort</code>: Ordenar eventos por un campo. (Cadena) \"title\" | \"location\" | \"date\" | \"price\"</li> <li><code>order</code>: Ordenar eventos por un campo. (Cadena) \"asc\" | \"desc\"</li> </ul> </li> </ul> <p>Ejemplos:</p> <ul> <li><code>GET /api/v1/events?search=Event</code>: Buscar eventos que contengan la cadena \"Event\".</li> <li><code>GET /api/v1/events?min_date=2025-01-01</code>: Filtrar eventos por fecha m\u00ednima.</li> <li><code>GET /api/v1/events?max_date=2025-12-31</code>: Filtrar eventos por fecha m\u00e1xima.</li> <li><code>GET /api/v1/events?min_date=2025-01-01&amp;max_date=2025-12-31</code>: Filtrar eventos por fecha m\u00ednima y m\u00e1xima.</li> <li><code>GET /api/v1/events?search=Event&amp;min_date=2025-01-01</code>: Buscar eventos que contengan la cadena \"Event\" y filtrar por fecha m\u00ednima.</li> <li><code>GET /api/v1/events?limit=10&amp;offset=0</code>: Limitar el n\u00famero de eventos devueltos y desplazar los resultados.</li> <li><code>GET /api/v1/events?sort=title&amp;order=asc</code>: Ordenar eventos por t\u00edtulo en orden ascendente.</li> <li><code>GET /api/v1/events?sort=date&amp;order=desc</code>: Ordenar eventos por fecha en orden descendente.</li> <li><code>GET /api/v1/events?search=Event&amp;min_date=2025-01-01&amp;limit=10&amp;offset=0&amp;sort=title&amp;order=asc</code>: Buscar eventos que contengan la cadena \"Event\", filtrar por fecha m\u00ednima, limitar el n\u00famero de eventos devueltos, desplazar los resultados, ordenar por t\u00edtulo en orden ascendente.</li> </ul>"},{"location":"proyectos/02_events/#autenticacion","title":"Autenticaci\u00f3n","text":"<p>Se requiere autenticaci\u00f3n mediante token en el header para todas las solicitudes.</p> <p><code>x-api-key</code>: Clave API para autenticaci\u00f3n.</p> <p>\ud83d\udd10 Una <code>API_KEY</code> v\u00e1lida estar\u00e1 disponible en el Moodle de los estudiantes.</p> <p>Ejemplo:</p> <pre><code>curl -X POST https://din25-events.jacinto-sanchez.workers.dev/api/v1/events \\\n-H \"x-api-key: API_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"title\": \"New Event\", \"description\": \"This is a new event.\", \"location\": \"New Location\", \"date\": \"2025-01-01\", \"price\": 0}'\n</code></pre> <pre><code>fetch(\n  'https://din25-events.jacinto-sanchez.workers.dev/api/v1/events',\n  {\n    method: 'POST',\n    headers: {\n      'x-api-key': 'API-KEY',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      title: 'New Event',\n      description: 'This is a new event.',\n      location: 'New Location',\n      date: '2025-01-01',\n      price: 0\n    })\n  })\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.error(error));\n</code></pre>"},{"location":"proyectos/02_events/#sprint-5-usabilidad-y-diseno","title":"Sprint 5 - Usabilidad y dise\u00f1o","text":"<p>(10/02/2025 - 16/02/2025)</p> <ul> <li>Documentar el dise\u00f1o de la aplicaci\u00f3n:<ul> <li>Boceto de las vistas.</li> <li>Flujo de navegaci\u00f3n entre las vistas.</li> <li>Criterios de Usabilidad.</li> <li>Librer\u00edas de componentes.</li> </ul> </li> <li>A\u00f1adir accesibilidad a la aplicaci\u00f3n.<ul> <li>En las fuentes de letra se debe cuidar el tama\u00f1o y contraste de color.</li> <li>Atajos de teclado para \"buscar\" y volver a la \"vista principal\".</li> <li>Implementar internacionalizaci\u00f3n en la aplicaci\u00f3n con al menos dos idiomas.</li> </ul> </li> </ul>"}]}